#!/bin/sh
# shellcheck disable=SC2039

#############################################################################
##
##  cli-functions
##
##  Copyright 2021-2022 Dermot Bradley <dermot_bradley@yahoo.com>
##
##  Licensed via GPL version 2.0
##
#############################################################################


#
# Parse options given on the command line
#
parse_cli_options() {
  local _cli _help_requested

  if ! _cli=$(getopt -s sh \
    -o h \
    -l \
add-directory-contents:,\
add-packages:,\
apk-static-url:,\
apk-static-version:,\
arch:,\
auth-control:,\
boot-by-label,\
bootchart,\
bootloader:,\
bootloader-password:,\
boottype:,\
chroot-directory:,\
cloud:,\
cloud-init-network-fallback,\
cloud-seed-url:,\
console-type:,\
console-user:,\
console-user-password:,\
cpu-vendor:,\
create-boot-partition,\
cron:,\
debug,\
dhcp-client:,\
disk-resize-free-percent:,\
enable-utmp,\
enable-watchdog,\
encrypt,\
encrypt-cipher:,\
encrypt-passphrase:,\
encrypt-remote-unlock,\
esp-part-size:,\
esp-part-type:,\
ethernet-module:,\
experimental,\
extra-cmdline-options:,\
extra-modules:,\
firewall:,\
fs-type:,\
full-hostname:,\
graphics-vendor:,\
graphics-vendor-driver:,\
harden,\
hwrng,\
image-filename:,\
images-directory:,\
initramfs-tool:,\
insecure,\
ipv4only,\
ipv6only,\
ipv6-type,\
kernel-type:,\
keyboard-type:,\
keymap:,\
local-repo:,\
local-repo-sig-file:,\
locale:,\
lvm,\
mdev,\
mirror:,\
no-cloud-configuration,\
no-console-user:,\
no-grub-encryption,\
ntp-servers:,\
ntp-use-host,\
optimise,\
os-device-media:,\
os-device-type:,\
pam,\
password:,\
physical:,\
ramdisk-directory:,\
release:,\
remote-unlock-network-module:,\
remote-unlock-ssh-port:,\
remote-unlock-static-gateway:,\
remote-unlock-static-interface:,\
remote-unlock-static-ip:,\
remote-unlock-static-netmask:,\
root-part-size:,\
rpi-poe-hat,\
rpi-rtc,\
script-filename:,\
serial-console-speed:,\
short-hostname:,\
ssh-key-types:,\
ssh-public-key:,\
ssh-server:,\
syslogd:,\
timezone:,\
tiny-cloud,\
udev,\
use-ramdisk,\
username:,\
virtual:,\
help\
    -n "$0" -- "$@"); then
    error_message "Terminating..."
  fi

  _help_requested=false

  eval set -- "$_cli"

  while true; do
    case "$1" in
      --add-directory-contents )
        extra_files_directory="$2"
        shift 2
        ;;
      --add-packages )
        extra_packages_list="$(echo "$2" | sed -e 's|,| |g')"
        shift 2
        ;;
      --apk-static-url )
        apk_static_url="$2"
        shift 2
        ;;
      --apk-static-version )
        apk_static_version="$2"
        shift 2
        ;;
      --arch )
        case $2 in
          aarch64 | armv7 | x86 | x86_64 )
            image_arch=$2 ;;
          * )
            cli_option_unknown_value "arch '$2'" ;;
        esac
        shift 2
        ;;
      --auth-control )
        case $2 in
          doas | sudo | both )
            image_auth_control=$2 ;;
          * )
            cli_option_unknown_value "auth control mechanism '$2'" ;;
        esac
        shift 2
        ;;
      --boot-by-label )
        image_boot_reference="label"
        shift
        ;;
      --bootchart )
        if [ "$script_type" = "creator" ]; then
          image_bootchart=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --bootloader )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            grub | rpi | syslinux )
              image_bootloader=$2 ;;
            * )
              cli_option_unknown_value "bootloader '$2', valid values are 'grub', 'rpi', and 'syslinux'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --bootloader-password )
        if [ "$script_type" = "creator" ]; then
          image_bootloader_password="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --boottype )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            bios | rpi | uefi )
              image_boot_type=$2 ;;
            * )
              cli_option_unknown_value "boot type '$2', valid values are 'bios', 'rpi', and 'uefi'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --chroot-directory )
        chroot_directory="$2"
        shift 2
        ;;
      --cloud )
        if [ "$script_type" = "creator" ]; then
          image_class="cloud"
          case $2 in
            aliyun | aws | azure | bigstep | brightbox | digitalocean | e24 | exoscale | generic | google | hetzner | hyperone | ibmcloud | oracle | ovh | rootbox | scaleway | tencent | upcloud | vultr )
              image_cloud_type=$2 ;;
            * )
              cli_option_unknown_value "cloud type '$2'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --cloud-init-network-fallback )
        if [ "$script_type" = "creator" ]; then
          image_cloud_init_network_fallback=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --cloud-seed-url )
        if [ "$script_type" = "creator" ]; then
          cloud_seed_url="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --console-type )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            hypervisor | normal | serial )
              image_console_type="$2" ;;
            * )
              cli_option_unknown_value "console type '$2'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --console-user )
        image_console_user="$2"
        shift 2
        ;;
      --console-user-password )
        image_console_user_password="$2"
        shift 2
        ;;
      --cpu-vendor )
        if [ "$script_type" = "creator" ]; then
          image_cpu_vendor="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --create-boot-partition )
        if [ "$script_type" = "creator" ]; then
          create_boot_partition=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --cron )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            busybox )
              image_cron_daemon=$2 ;;
            * )
              cli_option_unknown_value "Cron '$2', must be one of 'busybox', or '???'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --debug )
        debug_enabled=true
        shift
        ;;
      --dhcp-client )
        if [ "$script_type" = "creator" ]; then
          image_dhcp_client="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --disk-resize-free-percent )
        if [ "$script_type" = "creator" ]; then
          image_resize_free_percent=$2
          if [ "$image_resize_free_percent" -gt 0 ] 2>/dev/null && \
             [ "$image_resize_free_percent" -lt 100 ] 2>/dev/null; then
            :
          else
            cli_option_unknown_value "Invalid percentage value '$2', it must be within the range 1-99"
          fi
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --enable-utmp )
        if [ "$script_type" = "creator" ]; then
          image_enable_utmp="true"
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --enable-watchdog )
        if [ "$script_type" = "creator" ]; then
          image_enable_watchdog="true"
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --encrypt )
        if [ "$script_type" = "creator" ]; then
          image_encrypted=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --encrypt-cipher )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            adiantum | typical )
              image_encryption_cipher=$2 ;;
            * )
              cli_option_unknown_value "or unsupported LUKS cipher type '$2'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --encrypt-passphrase )
        if [ "$script_type" = "creator" ]; then
          image_encryption_passphrase="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --encrypt-remote-unlock )
        if [ "$script_type" = "creator" ]; then
          image_encrypted=true
          remote_unlock_enabled=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --esp-part-size )
        if [ "$script_type" = "creator" ]; then
          esp_part_size=$2
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --esp-part-type )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            fat12 | fat16 | fat32 )
              esp_type=$2 ;;
            * )
              cli_option_unknown_value "or unsupported ESP partition FAT type '$2'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --ethernet-module )
        if [ "$script_type" = "creator" ]; then
          image_ethernet_module="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --experimental )
        if [ "$script_type" = "creator" ]; then
          image_experimental=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --extra-cmdline-options )
        image_extra_cmdline_options="$2"
        shift 2
        ;;
      --extra-modules )
        if [ "$script_type" = "creator" ]; then
          image_extra_modules="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --firewall )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            awall | iptables | nftables )
              image_firewall=$2 ;;
            * )
              cli_option_unknown_value "or unsupported firewall '$2'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --fs-type )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            btrfs | ext4 | f2fs | xfs )
              image_fs_type="$2" ;;
            * )
              cli_option_unknown_value "or unsupported filesystem type '$2'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --full-hostname )
        if [ "$script_type" = "creator" ]; then
          image_full_hostname="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --graphics-vendor )
        if [ "$script_type" = "creator" ]; then
          image_graphics_vendor="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --graphics-vendor-driver )
        if [ "$script_type" = "creator" ]; then
          image_graphics_vendor_driver="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      -h | --help )
        _help_requested=true
        shift
        ;;
      --harden )
        if [ "$script_type" = "creator" ]; then
          image_harden=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --hwrng )
        image_hwrng=true
        shift
        ;;
      --image-filename )
        filename_for_image="$2"
        shift 2
        ;;
      --images-directory )
        images_directory="$2"
        shift 2
        ;;
      --initramfs-tool )
        case $2 in
          booster | mkinitfs )
            image_initramfs_tool=$2 ;;
          * )
            cli_option_unknown_value "unknown initramfs tool!'" ;;
        esac
        shift 2
        ;;
      --insecure )
        if [ "$script_type" = "creator" ]; then
          image_insecure=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --ipv4only )
        if [ "$script_type" = "creator" ]; then
          image_disable_ipv6=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --ipv6only )
        if [ "$script_type" = "creator" ]; then
          image_disable_ipv4=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --ipv6-type )
        case $2 in
          dhcp | slaac | static )
            image_ipv6_type=$2 ;;
          * )
            cli_option_unknown_value "kernel type '$2', can only be 'dhcp', 'slaac', or 'static'" ;;
        esac
        shift 2
        ;;
      --kernel-type )
        case $2 in
          normal | edge )
            image_kernel_type=$2 ;;
          * )
            cli_option_unknown_value "kernel type '$2', can only be 'edge' or 'normal'" ;;
        esac
        shift 2
        ;;
      --keyboard-type )
        case $2 in
          both | ps2 | usb )
            image_keyboard_type="$2" ;;
          * )
            cli_option_unknown_value "keyboard type '$2', can only be 'both', 'ps2', or 'usb'" ;;
        esac
        shift 2
        ;;
      --keymap )
        image_keymap="$2"
        shift 2
        ;;
      --local-repo )
        local_alpine_repository="$2"
        shift 2
        ;;
      --local-repo-sig-file )
        local_repo_signature_file="$2"
        shift 2
        ;;
      --locale )
        image_locale="$2"
        shift 2
        ;;
      --lvm )
        if [ "$script_type" = "creator" ]; then
          image_lvm_rootfs=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --mdev )
        if [ "$script_type" = "creator" ]; then
          image_mdev=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --mirror )
        alpine_mirror_site="$2"
        shift 2
        ;;
      --no-cloud-configuration )
        image_cloud_software="none"
        shift
        ;;
      --no-console-user )
        if [ "$script_type" = "creator" ]; then
         image_no_console_user=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --no-grub-encryption )
        if [ "$script_type" = "creator" ]; then
          image_no_grub_encryption=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --ntp-servers )
        image_ntp_servers="$2"
        image_ntp_use_host=false
        shift 2
        ;;
      --ntp-use-host )
        image_ntp_use_host=true
        shift
        ;;
      --optimise )
        if [ "$script_type" = "creator" ]; then
         image_optimise=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --os-device-media )
        case $2 in
          disk | flash | sd | ssd )
            image_os_device_media=$2 ;;
          * )
            cli_option_unknown_value "os device media '$2'" ;;
        esac
        shift 2
        ;;
      --os-device-type )
        case $2 in
          nvme | sata | scsi | sd | usb )
            image_os_device_type=$2 ;;
          * )
            cli_option_unknown_value "os device type '$2'" ;;
        esac
        shift 2
        ;;
      --pam )
        image_pam_enabled=true
        shift
        ;;
      --password )
        image_default_user_password="$2"
        shift 2
        ;;
      --physical )
        if [ "$script_type" = "creator" ]; then
          image_class="physical"
          case $2 in
            arm-server | pc | rpi2 | rpi3 | rpi4 )
              image_physical_type=$2 ;;
            * )
              cli_option_unknown_value "physical machine type '$2'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --ramdisk-directory )
        ramdisk_directory="$2"
        shift 2
        ;;
      --release )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            3.13 | 3.14 | 3.15 | 3.16 )
              image_alpine_release=v$2 ;;
            edge )
              image_alpine_release=$2 ;;
            * )
              cli_option_unknown_value "or unsupported Alpine release '$2'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --remote-unlock-network-module )
        if [ "$script_type" = "creator" ]; then
          remote_unlock_network_module="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --remote-unlock-ssh-port )
        if [ "$script_type" = "creator" ]; then
          remote_unlock_ssh_port="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --remote-unlock-static-gateway )
        if [ "$script_type" = "creator" ]; then
          remote_unlock_static_gateway="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --remote-unlock-static-interface )
        if [ "$script_type" = "creator" ]; then
          remote_unlock_static_interface="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --remote-unlock-static-ip )
        if [ "$script_type" = "creator" ]; then
          remote_unlock_static_ip="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --remote-unlock-static-netmask )
        if [ "$script_type" = "creator" ]; then
          remote_unlock_static_netmask="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --root-part-size )
        override_root_part_size="$2"
        shift 2
        ;;
      --rpi-poe-hat )
        if [ "$script_type" = "creator" ]; then
          rpi_use_poe_hat=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --rpi-rtc )
        if [ "$script_type" = "creator" ]; then
          rpi_use_rtc=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --script-filename )
        generated_script_filename="$2"
        shift 2
        ;;
      --serial-console-speed )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            '9600' | '19200' | '38400' | '57600' | '115200' )
              image_serial_console_port_speed="$2" ;;
            * )
              cli_option_unknown_value "serial console speed '$2', must be either '9600', '19200', '38400', '57600' or '115200'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --short-hostname )
        if [ "$script_type" = "creator" ]; then
          image_short_hostname="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --ssh-key-types )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            'ed25519' | 'ed25519+rsa' )
              image_ssh_keytypes="$2" ;;
            * )
              cli_option_unknown_value "SSH host key type '$2', must be either 'ed25519' or 'ed25519+rsa'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --ssh-public-key )
        if [ "$script_type" = "creator" ]; then
          if [ -f "$2" ]; then
            ssh_public_key=$(cat "$2")
          else
            error_message "SSH keyfile '$2' not found"
          fi
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --ssh-server )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            dropbear | openssh | tinyssh )
              image_ssh_server=$2 ;;
            * )
              cli_option_unknown_value "SSH server software '$2', must be one of 'dropbear', 'openssh', or 'tinyssh'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --syslogd )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            busybox | rsyslog )
              image_syslog_server=$2 ;;
            * )
              cli_option_unknown_value "Syslog server software '$2', must be one of 'busybox', or 'rsyslog'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --timezone )
        image_timezone=$2
        shift 2
        ;;
      --tiny-cloud )
        if [ "$script_type" = "creator" ]; then
          image_cloud_software="tiny-cloud"
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --udev )
        if [ "$script_type" = "creator" ]; then
          image_mdev=false
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --use-ramdisk )
        use_ramdisk=true
        shift
        ;;
      --username )
        if [ "$script_type" = "creator" ]; then
          image_admin_username=$2
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --virtual )
        if [ "$script_type" = "creator" ]; then
          image_class="virtual"
          case $2 in
            generic | hyperv | libvirtd | lxd | proxmox | qemu | utm | virtualbox | vmware )
              image_vm_type=$2 ;;
            * )
              echo
              cli_option_unknown_value "virtual machine type '$2'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      -- )
        shift
        break
        ;;
    esac
  done

  if [ $_help_requested = true ]; then
    usage
    exit 0
  fi
}


#
# Help text
#
usage() {
  echo
  echo "Usage: $0 [ options ]"
  echo
  echo "When called with no options is equivalent to:"
  echo
  echo "  $0 \\"
  echo "    --arch x86_64 \\"
  echo "    --release edge \\"
  echo "    --bootloader syslinux \\"
  echo "    --virtual qemu"
  echo
  echo "Options:"
  echo
  if [ -n "${image_experimental+x}" ]; then
    option_help "--add-directory-contents < directory-path >" "Experimental. Directory from which to recursively copy all files from into the generated disk image."
  fi
  option_help "--add-packages '< packages list >'" "A space or comma separated list of additional packages to install."
  option_help "--apk-static-url < url >" "Base url to download statically compiled APK tool from. Defaults to $CONSTANT_APK_STATIC_URL"
  option_help "--apk-static-version < version >" "Version of the statically compiled APK tool to download/use. Defaults to v$CONSTANT_APK_STATIC_VERSION"
  option_help "--arch < aarch64 | armv7 | x86 | x86_64 >" "Defaults to 'x86_86', except if physical rpi2/rpi3/rpi4 specified, when it defaults to 'aarch64'."
  option_help "--auth-control < doas | sudo | both >" "The method used by normal users to run privileged commands. Defaults to 'sudo' for Alpine releases prior to v3.15, and to '$CONSTANT_DEFAULT_AUTH_CONTROL' for v3.15 onwards."
  if [ -n "${image_experimental+x}" ]; then
    option_help "--boot-by-label" "Experimental. Use Labels rather than UUIDs in /etc/fstab and bootloader to refer to filesystems."
  fi
  if [ -n "${image_experimental+x}" ]; then
    option_help "--bootchart" "Experimental. Enables bootchart creation during boot."
  fi
  option_help "--bootloader < grub | syslinux >" "Defaults to 'syslinux'. Not relevant for RPI physical machines."
  option_help "--bootloader-password < password >" "Specify password to lock GRUB or Syslinux menu with. Not relevant for RPI physical machines."
  option_help "--boottype < bios | uefi >" "The default value depends on the CPU arch and the machine type. Not relevant for RPI physical machines."
  option_help "--chroot-directory < directory >" "Temporary directory to use for building the Alpine image. Defaults to './chroot'."
  if [ -z "${image_class+x}" ] || [ "$image_class" = "cloud" ]; then
    option_help "--cloud <cloud type>" "Valid values are: generic, aliyun, aws, azure, bigstep, brightbox, digitalocean, e24, exoscale, google, hetzner, hyperone, ibmcloud, oracle, rootbox, scaleway, tencent, upcloud, vultr"
  fi
  if [ -n "${image_experimental+x}" ] && \
     { [ -z "${image_class+x}" ] || [ "$image_class" = "cloud" ] || [ "$image_class" = "virtual" ]; }; then
    option_help "--cloud-seed-url < url >" "Base url for cloud-init NoCloud DataSource to download configuration from."
  fi
  option_help "--console-type < hypervisor | normal | serial >" "The type of device used for the console."
  option_help "--console-user < username >" "Username for the console-only (non-SSH) user account created unless '--no-console-user' is specified. Defaults to '$CONSTANT_DEFAULT_CONSOLE_USER_ACCOUNT'"
  option_help "--console-user-password < password >" "Password for console-only (non-SSH) user account. If this option is not specified then the account password is locked."
  option_help "--cpu-vendor < amd | intel >" "Used to decide if only AMD or Intel relevant microcode is installed and whether vendor-specific CPU kernel modules are included in the initramfs."
  option_help "--create-boot-partition" "Create a separate /boot partition, even if not required."
  if [ -n "${image_experimental+x}" ]; then
    option_help "--cron < busybox | ??? >" "Cron daemon software to use."
  fi
  option_help "--debug" "Enable debug-specific logging."
  if [ -n "${image_experimental+x}" ]; then
    option_help "--dhcp-client < dhclient | dhcpcd | udhcpc >" "Experimental. Specify the DHCP Client software to use. Defaults to '$CONSTANT_DEFAULT_DHCP_CLIENT'."
  fi
  if [ -n "${image_experimental+x}" ]; then
    option_help "--disk-resize-free-percent < percent >" "Only for physical machines. For Flash/SSDs/SDcard devices the percent of disk to leave unallocated when root is resized. '10' is a reasonable value."
  fi
  option_help "--enable-utmp" "Enable UTMP support."
  if [ -z "${image_class+x}" ] || [ "$image_class" = "physical" ]; then
    option_help "--enable-watchdog" "Enable hardware watchdog support."
  fi
  option_help "--encrypt" "Enable LUKS encryption of the rootfs."
  option_help "--encrypt-cipher < adiantum | typical >" "The cipher to use for the encrypted filesystem. Adiantum may be more suitable for Arm systems. Defaults to 'typical' (actual value is $CONSTANT_DEFAULT_LUKS_CIPHER) if not specified."
  option_help "--encrypt-passphrase < passphrase >" "The passphrase to use for the encrypted filesystem. Defaults to '$CONSTANT_DEFAULT_LUKS_PASSPHRASE' if not specified."
  if [ -n "${image_experimental+x}" ]; then
    option_help "--encrypt-remote-unlock" "Experimental. Enable functionality for the remote-unlocking of encrypted root filesystem at boot time via SSH."
  fi
  option_help "--esp-part-size < size in MiB >" "For UEFI only. Specify the size of the ESP partition."
  option_help "--esp-part-type < fat12 | fat16 | fat32 >" "For UEFI only. Specify the type of FAT partition to use (which affects the default size of the partition)."
  if [ -n "${image_experimental+x}" ]; then
    option_help "--ethernet-module < module-name >" "Experimental. When remote unlocking of encrypted filesystem is enabled this parameter is also required to specific the relevant kernel module for the ethernet device as the driver must be included in the initramfs as (obviously) it cannot be loaded from the (still encrypted at that point) rootfs."
  fi
  option_help "--experimental" "Enable experimental options."
  option_help "--extra-cmdline-options '< options >'" "Extra entries to add to the /proc/cmdline passed by bootloader to the initramfs and kernel."
  option_help "--extra-modules '< module ( < module > )'" "Space-separated list of extra kernel modules to load."
  if [ -n "${image_experimental+x}" ]; then
    option_help "--firewall < awall | iptables | nftables >" "Experimental. Selects the firewall software to use."
  fi
  if [ -n "${image_experimental+x}" ]; then
    option_help "--fs-type < btrfs | ext4 | f2fs | xfs >" "Selects the filesystem type to use for the rootfs."
  else
    option_help "--fs-type < ext4 | xfs >" "Selects the filesystem type to use for the rootfs."
  fi
  if [ -z "${image_class+x}" ] || [ "$image_class" = "physical" ]; then
    option_help "--full-hostname < hostname >" "Only for physical machines. The hostname, including domain, to place in the generated cloud-init user-data YAML file."
  fi
  if [ -z "${image_class+x}" ] || \
     { [ "$image_class" = "physical" ] && [ "$image_physical_type" = "pc" ]; }; then
    option_help "--graphics-vendor < amd | intel | nvidia >" "Only for physical machines. Indicates the vendor of server's graphics card so that the initramfs can be generated containing only that vendor's drivers and firmware."
    option_help "--graphics-vendor-driver < amdgpu | gma500 | i915 | radeon >" "Only for physical machines. Indicates the vendor-specific driver of server's graphics card so that the initramfs can be generated containing only that specific vendor model's driver and firmware."
  fi
  option_help "--harden" "Disables kernel module loading, delete unnecessary users & groups, disables unnecessary kernel modules, sets up basic firewall rules."
  option_help "--hwrng" "Machine has a hardware RNG."
  option_help "--image-filename < filename >" "Filename to use for the created Alpine disk image."
  option_help "--images-directory < directory >" "The directory where to store the created disk image. Defaults to '$CONSTANT_DEFAULT_IMAGES_DIRECTORY'."
  if [ -n "${image_experimental+x}" ]; then
    option_help "--initramfs-tool '< booster | mkinitfs >'" "Experimental. Chooses which tool is used to create and run the initramfs. Defaults to mkinitfs."
  fi
  if [ -n "${image_experimental+x}" ]; then
    option_help "--insecure" "Experimental. Permit password-based access via SSH."
  fi
  option_help "--ipv4only" "Do not enable IPv6 in the created disk image."
  option_help "--ipv6only" "Do not enable IPv4 in the created disk image."
  if [ -n "${image_experimental+x}" ]; then
    option_help "--ipv6-type '< dhcp | slaac | static >'" "Experimental. Indicates how an IPv6 address should be obtained. Defaults to 'dhcp'."
  fi
  if [ -n "${image_experimental+x}" ]; then
    option_help "--kernel-type '< normal | edge >'" "Experimental. For Alpine Edge images selects whether to use linux-lts/linux-virt kernel or linux-edge/linux-edge4virt kernel."
  fi
  if [ -z "${image_class+x}" ] || [ "$image_class" != "physical" ] || \
     [ "$image_physical_type" = "pc" ]; then
    option_help "--keyboard-type '< ps2 | usb >'" "Indicate the type of physical console keyboard. Defaults to 'ps2' for x86/x86_64 machines in many cases, however for aarch64 machines defaults to 'usb'."
  fi
  option_help "--keymap '< keymap >'" "Defaults to '$CONSTANT_DEFAULT_KEYMAP'."
  option_help "--local-repo < url >" "Local Alpine repository for unofficial Alpine packages."
  option_help "--local-repo-sig-file < filename >" "Signature file used to sign packages in local Alpine repository."
  option_help "--locale < locale >" "Defaults to '$CONSTANT_DEFAULT_LOCALE'."
  option_help "--lvm" "Use LVM for root filesystem. If '--encrypt' is also specified then create LVM-on-LUKS filesystem."
  if [ -n "${image_experimental+x}" ]; then
    option_help "--mdev" "Experimental. Use mdev rather than udev."
  fi
  option_help "--mirror < mirror url >" "URL of the Alpine mirror site to use. Defaults to $CONSTANT_DEFAULT_MIRROR_SITE"
  if [ -n "${image_experimental+x}" ]; then
    option_help "--no-cloud-configuration" "Experimental. Indicates that neither cloud-init nor tiny-cloud should be installed/configured."
  fi
  option_help "--no-console-user" "Do not create a user account for console-only (non-SSH) access."
  option_help "--no-grub-encryption" "Do not enable GRUB's own LUKS handling (distinct from whether LUKS is in use in general) which means that /boot must then be unencrypted and so /boot will be created as a separate partition from the rootfs."
  if [ -n "${image_experimental+x}" ]; then
    option_help "--ntp-servers < comma separated list of NTP servers >" "Experimental. Synch with these NTP servers."
  fi
  if [ -n "${image_experimental+x}" ] && \
     { [ -z "${image_class+x}" ] || [ "$image_class" = "cloud" ] || [ "$image_class" = "virtual" ]; }; then
    option_help "--ntp-use-host" "Experimental. For VMs and Cloud servers to sync time directly from hypervisor host."
  fi
  option_help "--optimise" "Optimise the image setup such as only enabling required kernel modules."
  option_help "--os-device-media < disk | flash | sd | ssd >" "The storage media type of the device that disk image will be installed on."
  option_help "--os-device-type < nvme | sata | scsi | sd | usb >" "The interface type of the device that disk image will be installed on."
  if [ -n "${image_experimental+x}" ]; then
    option_help "--pam" "Experimental. Enable PAM support."
  fi
  option_help "--password < password >" "Password for default user created upon 1st boot. If this option is not specified then the account password is locked (but SSH access via SSH key, if configured using '--ssh-public-key', is still possible)."
  if [ -z "${image_class+x}" ] || [ "$image_class" = "physical" ]; then
    option_help "--physical < pc | rpi2 | rpi3 | rpi4 >" "The type of physical machine to be created."
  fi
  option_help "--ramdisk-directory < directory >" "When '--use-ramdisk' is also specified this value indicates the directory in which to store the ramdisk file."
  option_help "--release < 3.13 | 3.14 | 3.15 | edge >" "Which Alpine Release to use for the disk image. If not specified then defaults to 'edge'."
  if [ -n "${image_experimental+x}" ]; then
    option_help "--remote-unlock-network-module < kernel module name >" "Experimental. Specifies the name of the network device kernel module to be loaded."
    option_help "--remote-unlock-ssh-port < port number >" "Experimental. Specifies the TCP port that the temporary SSH daemon should listen on. If not specified then defaults to '22'."
    option_help "--remote-unlock-static-gateway < IP address >" "Experimental. Specifies the IP address of the local router. Only applicable when '--remote-unlock-static-ip' has also been specified."
    option_help "--remote-unlock-static-interface < interface name >" "Experimental. Specifies the network interface name. Only applicable when '--remote-unlock-static-ip' has also been specified."
    option_help "--remote-unlock-static-ip < IP address >" "Experimental. Specifies the (temporary) IP address for the machine to use for remote unlock functionality. If not specified then DHCP is used instead."
    option_help "--remote-unlock-static-netmask < netmask >" "Experimental. Specifies the network netmask to use. Only applicable when '--remote-unlock-static-ip' has also been specified."
  fi
  option_help "--root-part-size < size in MiB >" "Specify the size of the root partition. Useful in conjunction with '--add-packages' where more space is needed."
  if [ -z "${image_class+x}" ] || \
     { [ "$image_class" = "physical" ] && [ "$(expr "$image_physical_type" : '.*rpi.*')" -gt 0 ]; }; then
    option_help "--rpi-poe-hat" "When creating an image for a Raspberry Pi (i.e. '--physical rpi2') indicates that the RPI has a Raspberry Pi official PoE HAT fitted."
    option_help "--rpi-rtc" "When creating an image for a Raspberry Pi (i.e. '--physical rpi2') indicates that the RPI has a hardware RTC fitted."
  fi
  option_help "--script-filename < filename >" "MANDATORY. The filename of the script to be created."
  option_help "--serial-console-speed < speed >" "The speed of the serial port used as console."
  if [ -z "${image_class+x}" ] || [ "$image_class" = "physical" ]; then
    option_help "--short-hostname < hostname >" "Only for physical machines. The hostname, without domain, to place in the generated cloud-init user-data YAML file."
  fi
  option_help "--ssh-key-types < key types >" "SSH host key types to be used. Valid values are 'ed25519' or 'ed25519+rsa'."
  if [ -z "${image_class+x}" ] || [ "$image_class" = "physical" ]; then
    option_help "--ssh-public-key < filename >" "Only for physical machines. File containing the SSH public key that is permitted to log in as the default user and also, when remote encryption unlocking is enabled, to connect to the temporary SSH server used for unlocking of disk encryption."
  fi
  if [ -n "${image_experimental+x}" ]; then
    option_help "--ssh-server < dropbear | openssh | tinyssh >" "Experimental. SSH server software to use."
  fi
  option_help "--syslogd < busybox | rsyslog >" "Syslog server software to use."
  if [ -z "${image_class+x}" ] || [ "$image_class" = "physical" ]; then
    option_help "--timezone < zonename >" "Only for physical machines. Timezone to place in the generated cloud-init user-data YAML file. Example value: 'Europe/London'."
  fi
  if [ -n "${image_experimental+x}" ] && \
     { [ -z "${image_class+x}" ] || [ "$image_class" = "cloud" ]; }; then
    option_help "--tiny-cloud" "Experimental. Use tiny-cloud instead of cloud-init."
  fi
  if [ -n "${image_experimental+x}" ]; then
    option_help "--udev" "Experimental. Use udev rather than mdev."
  fi
  option_help "--use-ramdisk" "Indicates to use a (temporary) ramdisk when creating the disk image to speed up creation and/or to reduce disk writes (i.e. on SSD)."
  option_help "--username <username>" "Name of the default account to create upon 1st boot. Defaults to '$CONSTANT_DEFAULT_ADMIN_USERNAME'."
  if [ -z "${image_class+x}" ] || [ "$image_class" = "virtual" ]; then
    option_help "--virtual <vm type>" "Valid values are:  < generic | hyperv | libvirtd | lxd | openstack | proxmox | qemu | utm | virtualbox | vmware >"
  fi
}


#
# Check that the combination of CLI options make sense
#
validate_cli_options() {
  if [ -z "${generated_script_filename+x}" ]; then
    error_message "You must specify a filename for the script to be created!"
  fi

  # Defaults when settings not specified
  #-------------------------------------

  # Arch
  if [ -z ${image_arch+x} ]; then
    if [ -n "${image_class+x}" ] && [ "$image_class" = "physical" ] && \
       [ "$image_physical_type" = "arm-server" ]; then
      image_arch="aarch64"
    else
      image_arch=$CONSTANT_DEFAULT_ARCH
    fi
  fi

  # Alpine Release
  image_alpine_release=${image_alpine_release:-$CONSTANT_DEFAULT_ALPINE_RELEASE}

  # Machine type defaults to QEMU VM
  if [ -z ${image_class+x} ]; then
    image_class="virtual"
    image_vm_type="qemu"
  fi

  # Kernel
  image_kernel_type="${image_kernel_type:-normal}"

  # Whether /tmp is on disk or tmpfs
  image_tmp_on_tmpfs=${image_tmp_on_tmpfs:-true}

  # APK-static version
  apk_static_version=${apk_static_version:-$CONSTANT_APK_STATIC_VERSION}

  # URL to download APK-static down
  apk_static_url=${apk_static_url:-$CONSTANT_APK_STATIC_URL}

  # Chroot directory
  chroot_directory=${chroot_directory:-$CONSTANT_DEFAULT_CHROOT_DIRECTORY}

  # Images directory
  images_directory=${images_directory:-$CONSTANT_DEFAULT_IMAGES_DIRECTORY}

  # Whether to use ramdisk
  if [ -n "${use_ramdisk+x}" ] && [ -z "${ramdisk_directory+x}" ]; then
    # If ramdisk directory not specified then assume default
    ramdisk_directory=$CONSTANT_DEFAULT_RAMDISK_DIRECTORY
  fi

  # Alpine repo mirror site
  alpine_mirror_site=${alpine_mirror_site:-$CONSTANT_DEFAULT_MIRROR_SITE}


  # Cloud/Physical/Virtual specific settings
  case $image_class in
    cloud )
      default_cloud_settings ;;
    physical )
      default_physical_settings ;;
    virtual )
      default_virtual_settings ;;
  esac


  # Admin username
  image_admin_username=${image_admin_username:-$CONSTANT_DEFAULT_ADMIN_USERNAME}

  # Console-only user
  image_no_console_user=${image_no_console_user:-false}
  if [ "$image_no_console_user" = "false" ]; then
    image_console_user=${image_console_user:-$CONSTANT_DEFAULT_CONSOLE_USER_ACCOUNT}
    image_console_only_group="${image_console_only_group:-$CONSTANT_DEFAULT_CONSOLE_ONLY_GROUP}"
  fi

  # Whether to use boot_by_label
  image_boot_reference=${image_boot_reference:-$CONSTANT_DEFAULT_BOOT_REFERENCE}

  # Whether to enable Bootchart
  if [ -n "${image_bootchart+x}" ] && [ -z "${image_experimental+x}" ]; then
    error_message "Bootchart support is an experimental option!"
  fi

  # Console type
  image_console_type="${image_console_type:-normal}"

  # Cron daemon software
  image_cron_daemon=${image_cron_daemon:-$CONSTANT_DEFAULT_CRON_DAEMON}

  # DHCP client software
  image_dhcp_client=${image_dhcp_client:-$CONSTANT_DEFAULT_DHCP_CLIENT}

  # Doas
  if [ -z ${image_auth_control+x} ]; then
    case $image_alpine_release in
      v3.13 | v3.14 )
        image_auth_control="sudo" ;;
      * )
        image_auth_control=$CONSTANT_DEFAULT_AUTH_CONTROL ;;
    esac
  elif [ "$image_auth_control" = "doas" ] || [ "$image_auth_control" = "both" ]; then
    case $image_alpine_release in
      v3.13 | v3.14 )
        error_message "Alpine v3.13 and v3.14 do not work correctly with doas and cloud-init. Please use sudo only." ;;
    esac
  fi

  # Filesystem type
  image_fs_type=${image_fs_type:-$CONSTANT_DEFAULT_FS_TYPE}
  if [ -z "${image_experimental+x}" ]; then
    case $image_fs_type in
      btrfs | f2fs )
        error_message "Support for this filesystem type is experimental!" ;;
    esac
  fi

  # Firewall software
  image_firewall=${image_firewall:-$CONSTANT_DEFAULT_FIREWALL}

  # Tools for creating/updating initramfs
  if [ -z ${image_initramfs_tool+x} ]; then
    image_initramfs_tool="mkinitfs"
  else
    case $image_initramfs_tool in
      booster )
        case $image_alpine_release in
          edge )
            : ;;
          * )
            error_message "Booster is not available for this version of Alpine." ;;
        esac
        ;;
    esac
  fi

  # IPv6 type (DHCPv6 / SLAAC)
  image_ipv6_type=${image_ipv6_type:-$CONSTANT_DEFAULT_IPV6_TYPE}

  # Keymap
  image_keymap=${image_keymap:-$CONSTANT_DEFAULT_KEYMAP}

  # Locale
  image_locale=${image_locale:-$CONSTANT_DEFAULT_LOCALE}

  # If mdev/mdevd/udev not specified, use default.
  image_mdev=${image_mdev:-$CONSTANT_DEFAULT_MDEV}

  image_resize_free_percent=${image_resize_free_percent:-$CONSTANT_DEFAULT_DISK_RESIZE_FREE_PERCENT}

  # If SSH host key types not specified then assume default
  image_ssh_keytypes=${image_ssh_keytypes:-$CONSTANT_DEFAULT_SSH_KEYTYPES}

  # SSH server software
  image_ssh_server=${image_ssh_server:-$CONSTANT_DEFAULT_SSH_SERVER}

  # Syslog server software
  image_syslog_server=${image_syslog_server:-$CONSTANT_DEFAULT_SYSLOG_SERVER}

  # Overrride default root partition size
  if [ -n "${override_root_part_size+x}" ]; then
    general_root_part_size=$override_root_part_size
  fi


  # Settings that may depend on other per cloud/physical/virtual settings:
  #-----------------------------------------------------------------------

  # Whether to use Limine bootloader
  if [ "$image_bootloader" = "limine" ] && [ -z "${image_experimental+x}" ]; then
    error_message "Limine bootloader support is an experimental option!"
  fi

  # Log filename is based on image filename
  logs_output_file=$(echo "$filename_for_image" | sed -e 's|\.img$|\.log|')

  # Boot device type
  case $image_physical_type in
    rpi* )
      image_os_device_type=${image_os_device_type:-$CONSTANT_DEFAULT_RPI_BOOT_DEVICE_TYPE}
      case $image_os_device_type in
        sd )
          : ;;
        * )
          error_message "Raspberry Pi's only support booting from SDcard!"
      esac
      ;;
    * )
      image_os_device_type=${image_os_device_type:-$CONSTANT_DEFAULT_BOOT_DEVICE_TYPE} ;;
  esac

  # Boot device media
  if [ -z ${image_os_device_media+x} ]; then
    case $image_os_device_type in
      nvme )
        image_os_device_media="ssd" ;;
      sd )
        image_os_device_media="sd" ;;
      usb )
        image_os_device_media="flash" ;;
      * )
        image_os_device_media="disk" ;;
    esac
  fi

  # Boot device logical sector size (in bytes)
  image_os_device_sector_size=${image_os_device_sector_size:-512}

  # Encryption
  if [ -n "${image_encrypted+x}" ]; then
    image_encryption_cipher=${image_encryption_cipher:-$CONSTANT_DEFAULT_LUKS_CIPHER}
    image_encryption_passphrase="${image_encryption_passphrase:-$CONSTANT_DEFAULT_LUKS_PASSPHRASE}"
  fi

  # Keyboard type
  if [ "$image_console_type" = "normal" ] && [ -z ${image_keyboard_type+x} ]; then
    case $image_arch in
      aarch64 )
        # aarch64 machines have USB keyboard
        image_keyboard_type="usb" ;;
      * )
        image_keyboard_type="both" ;;
    esac
  fi


  # Sanity checks
  #---------------

  if [ -n "${create_boot_partition+x}" ] && [ "$image_bootloader" = "grub" ]; then
    # By creating a separate boot partition this means that GRUB
    # should also not enable its own encryption support for /boot.
    image_no_grub_encryption=true
  fi

  if [ -z "${needs_boot_partition+x}" ] && \
     { [ "$image_bootloader" = "syslinux" ] && \
       { [ -n "${image_encrypted+x}" ] || [ -n "${image_lvm_rootfs+x}" ]; } } || \
     { [ "$image_bootloader" = "grub" ] && [ -n "${image_encrypted+x}" ] && \
       [ -n "${image_experimental+x}" ] && [ -n "${remote_unlock_enabled+x}" ]; } || \
     { [ "$image_bootloader" = "grub" ] && [ -n "${image_encrypted+x}" ] && \
       [ -n "${image_no_grub_encryption+x}" ]; } || \
     { [ "$image_bootloader" = "grub" ] && [ -n "${image_encrypted+x}" ] && \
       [ "$image_encryption_cipher" = "adiantum" ]; } || \
     [ -n "${create_boot_partition+x}" ]; then
    # A separate boot partition is required in the following situations:
    # - Syslinux is bootloader with encrypted rootfs or LVM rootfs
    # - GRUB is bootloader with remote unlock of encrypted rootfs
    # - GRUB is bootloader with encrypted rootfs but unencrypted boot partition
    # - GRUB is bootloader with Adiantum encrypted rootfs - GRUB's LUKS module does not support this
    # - a separate boot partition is explicitly requested
    needs_boot_partition=true
  fi

  # Sort out partition sizing
  #---------------------------

  if [ -n "${image_encrypted+x}" ]; then
    image_luks_part_size=$(calculate_luks_part_size)
  elif [ -n "${image_lvm_rootfs+x}" ]; then
    image_lvm_part_size=$(calculate_lvm_vg_size)
  else
    image_root_part_size=$(calculate_root_part_size)
  fi

  image_boot_part_size=$(calculate_boot_part_size)

  case $image_boot_type in
    secure-uefi | uefi )
      image_uefi_part_size=$(calculate_uefi_part_size) ;;
  esac
}
