#!/bin/sh -u
# shellcheck disable=SC2039

#############################################################################
##
##  cloud-functions
##
##  Copyright 2021-2022 Dermot Bradley <dermot_bradley@yahoo.com>
##
##  Licensed via GPL version 2.0
##
#############################################################################


#
# Create cloud Alibaba mkinitfs feature file
#
configure_mkinitfs_feature_cloud_alibaba() {
  cat <<'EOF' >> "$run_script"

  {
    write_log "Setting up features.d/cloud-alibaba.modules" 2
EOF

  initramfs_entry_initialise "cloud-alibaba"
  initramfs_entry_add "kernel/drivers/acpi/tiny-power-button.ko*"
  initramfs_entry_add "kernel/drivers/block/virtio_blk.ko*"
  initramfs_entry_add "kernel/drivers/virtio/virtio_pci.ko*"
  initramfs_entry_finish

  if [ -n "${debug_enabled+x}" ]; then
    cat <<'EOF' >> "$run_script"

    # Debug
    {
      write_debug_log "cloud-alibaba.modules contents:" 2
      cat /etc/mkinitfs/features.d/cloud-alibaba.modules >> /chroot.log
    }
EOF
  fi

  cat <<'EOF' >> "$run_script"
  }
EOF
}


#
# Create cloud AWS mkinitfs feature file
#
configure_mkinitfs_feature_cloud_aws() {
  cat <<'EOF' >> "$run_script"

  {
    write_log "Setting up features.d/cloud-aws.modules" 2
EOF

  initramfs_entry_initialise "cloud-aws"
  initramfs_entry_add "kernel/drivers/acpi/tiny-power-button.ko*"
  if [ "$image_arch" = "aarch64" ]; then
    initramfs_entry_add "kernel/drivers/gpio/gpio-pl061.ko*"
  fi
  initramfs_entry_add "kernel/drivers/net/ethernet/amazon/ena"
  case $image_os_device_type in
    nvme )
      initramfs_entry_add "kernel/drivers/nvme/host/nvme.ko*"
      ;;
    sata | scsi )
      initramfs_entry_add "kernel/drivers/scsi/sd_mod.ko*"
      initramfs_entry_add "kernel/drivers/scsi/virtio_scsi.ko*"
      ;;
  esac
  initramfs_entry_add "kernel/drivers/virtio/virtio_pci.ko*"
  initramfs_entry_finish

  if [ -n "${debug_enabled+x}" ]; then
    cat <<'EOF' >> "$run_script"

    # Debug
    {
      write_debug_log "cloud-aws.modules contents:" 2
      cat /etc/mkinitfs/features.d/cloud-aws.modules >> /chroot.log
    }
EOF
  fi

  cat <<'EOF' >> "$run_script"
  }
EOF
}


#
# Create cloud Azure mkinitfs feature file
#
configure_mkinitfs_feature_cloud_azure() {
  cat <<'EOF' >> "$run_script"

  {
    write_log "Setting up features.d/cloud-azure.modules" 2
EOF

  initramfs_entry_initialise "cloud-azure"
  initramfs_entry_add "kernel/drivers/acpi/tiny-power-button.ko*"
  initramfs_entry_add "kernel/drivers/hv/hv_utils.ko*"
  initramfs_entry_add "kernel/drivers/hv/hv_vmbus.ko*"
  initramfs_entry_add "kernel/drivers/net/hyperv/hv_netvsc.ko*"
  initramfs_entry_add "kernel/drivers/scsi/sd_mod.ko*"
  initramfs_entry_add "kernel/drivers/scsi/hv_storvsc.ko*"
  case $image_alpine_release in
    v3.13 | v3.14 )
      initramfs_entry_add "kernel/drivers/video/fbdev/hyperv_fb.ko*" ;;
    * )
      initramfs_entry_add "kernel/drivers/gpu/drm/hyperv/hyperv_drm.ko*" ;;
  esac
  initramfs_entry_finish

  if [ -n "${debug_enabled+x}" ]; then
    cat <<'EOF' >> "$run_script"

    # Debug
    {
      write_debug_log "cloud-azure.modules contents:" 2
      cat /etc/mkinitfs/features.d/cloud-azure.modules >> /chroot.log
    }
EOF
  fi

  cat <<'EOF' >> "$run_script"
  }
EOF
}


#
# Create cloud Exoscale mkinitfs feature file
#
configure_mkinitfs_feature_cloud_exoscale() {
  cat <<'EOF' >> "$run_script"

  {
    write_log "Setting up features.d/cloud-exoscale.modules" 2
EOF

  initramfs_entry_initialise "cloud-exoscale"
  initramfs_entry_add "kernel/drivers/acpi/tiny-power-button.ko*"
  initramfs_entry_add "kernel/drivers/char/hw_random/rng-core.ko*"
  initramfs_entry_add "kernel/drivers/char/hw_random/virtio-rng.ko*"
  initramfs_entry_add "kernel/drivers/net/virtio_net.ko*"
  case $image_os_device_type in
    nvme )
      initramfs_entry_add "kernel/drivers/nvme/host/nvme.ko*"
      ;;
    sata | scsi )
      initramfs_entry_add "kernel/drivers/scsi/sd_mod.ko*"
      initramfs_entry_add "kernel/drivers/scsi/virtio_scsi.ko*"
      ;;
  esac
  initramfs_entry_add "kernel/drivers/virtio/virtio_pci.ko*"
  initramfs_entry_finish

  if [ -n "${debug_enabled+x}" ]; then
    cat <<'EOF' >> "$run_script"

    # Debug
    {
      write_debug_log "cloud-exoscale.modules contents:" 2
      cat /etc/mkinitfs/features.d/cloud-exoscale.modules >> /chroot.log
    }
EOF
  fi

  cat <<'EOF' >> "$run_script"
  }
EOF
}


#
# Create cloud GCE mkinitfs feature file
#
configure_mkinitfs_feature_cloud_gce() {
  cat <<'EOF' >> "$run_script"

  {
    write_log "Setting up features.d/cloud-gce.modules" 2
EOF

  initramfs_entry_initialise "cloud-gce"
  initramfs_entry_add "kernel/drivers/acpi/tiny-power-button.ko*"
  initramfs_entry_add "kernel/drivers/net/virtio_net.ko*"
  case $image_os_device_type in
    nvme )
      initramfs_entry_add "kernel/drivers/nvme/host/nvme.ko*"
      ;;
    sata | scsi )
      initramfs_entry_add "kernel/drivers/scsi/sd_mod.ko*"
      initramfs_entry_add "kernel/drivers/scsi/virtio_scsi.ko*"
      ;;
  esac
  initramfs_entry_add "kernel/drivers/virtio/virtio_pci.ko*"
  initramfs_entry_finish

  if [ -n "${debug_enabled+x}" ]; then
    cat <<'EOF' >> "$run_script"

    # Debug
    {
      write_debug_log "cloud-gce.modules contents:" 2
      cat /etc/mkinitfs/features.d/cloud-gce.modules >> /chroot.log
    }
EOF
  fi

  cat <<'EOF' >> "$run_script"
  }
EOF
}


#
# Define cloud machine specific packages
#
define_cloud_machine_packages() {
  local _cloud_pkgs=""

  case $image_cloud_type in
    aws )
      _cloud_pkgs="aws-cli nvme-cli" ;;
    azure )
      _cloud_pkgs="hvtools" ;;
    digitalocean )
      case $image_alpine_release in
        v3.13 | v3.14 | v3.15 )
          # No doctl packaged for these Alpine releases
          : ;;
        * )
          _cloud_pkgs="doctl" ;;
      esac
      ;;
    gce )
      _cloud_pkgs="nvme-cli" ;;
    hetzner )
      _cloud_pkgs="hcloud" ;;
    ###vultr )
    ###  _cloud_pkgs="vultr-cli" ;;
  esac

  echo "$_cloud_pkgs"
}


#
# Define the cloud-init DataSource(s) to enable for the relevant Cloud type
#
define_cloud_settings() {
  case $image_cloud_type in
    generic )
      datasource_list="'AliYun','Azure','BigStep','ConfigDrive','DigitalOcean'"
      datasource_list="$datasource_list,'E24Cloud','Ec2','Exoscale','GCE'"
      datasource_list="$datasource_list,'Hetzner','IBMCloud','Oracle'"
      datasource_list="$datasource_list,'RbxCloud','Scaleway','UpCloud'"
      datasource_list="$datasource_list,'Vultr'" ;;
    aliyun )
      datasource_list="'AliYun'" ;;
    aws )
      datasource_list="'Ec2'"
      image_console_type="serial"
      serial_port_number="0"
      if [ "$image_arch" = "aarch64" ]; then
        image_console_name="ttyAMA${serial_port_number}"
        serial_port_name="ttyAMA${serial_port_number}"
      else
        serial_port_name="ttyS${serial_port_number}"
      fi
      ;;
    azure )
      datasource_list="'Azure'"
      image_console_type="serial"
      serial_port_number="0"
      serial_port_name="ttyS${serial_port_number}"
      ;;
    bigstep )
      datasource_list="'Bigstep'" ;;
    brightbox )
      datasource_list="'Ec2'" ;;
    digitalocean )
      datasource_list="'DigitalOcean'"
      image_console_type="both"
      serial_port_number="0"
      serial_port_name="ttyS${serial_port_number}"
      ;;
    e24 )
      datasource_list="'E24Cloud'" ;;
    exoscale )
      datasource_list="'Exoscale'" ;;
    gce )
      datasource_list="'GCE'" ;;
    hetzner )
      datasource_list="'Ec2'" ;;
    hyperone )
      datasource_list="'RbxCloud'" ;;
    ibmcloud )
      datasource_list="'IBMCloud'" ;;
    oracle )
      datasource_list="'Oracle'"
      if [ "$image_arch" = "aarch64" ]; then
        image_console_name="ttyAMA1"
      fi
      image_console_type="both"
      if [ "$image_console_type" = "serial" ]; then
        serial_port_number="0"
        if [ "$image_arch" = "aarch64" ]; then
          serial_port_name="ttyAMA${serial_port_number}"
        else
          serial_port_name="ttyS${serial_port_number}"
        fi
      fi
      ;;
    rootbox )
      datasource_list="'RbxCloud'" ;;
    scaleway )
      datasource_list="'Scaleway'" ;;
    tencent )
      datasource_list="'ConfigDrive'" ;;
    upcloud )
      datasource_list="'UpCloud'" ;;
    vultr )
      datasource_list="'Vultr'"
      image_console_type="normal"
      ;;
  esac
}


#
# Add cloud machine related entries to /etc/modules
#
etc_modules_list_for_cloud() {
  cat <<'EOF' >> "$run_script"
	
	# Cloud-specific modules
	tiny-power-button
EOF

  case $image_cloud_type in
    aws )
      if [ "$image_arch" = "aarch64" ]; then
        cat <<'EOF' >> "$run_script"
	gpio-pl061
EOF
      fi
      cat <<'EOF' >> "$run_script"
	nvme
EOF
      ;;
    azure )
      cat <<'EOF' >> "$run_script"
	hv_utils
EOF
      ;;
    gce )
      cat <<'EOF' >> "$run_script"
	nvme
EOF
      ;;
    generic )
      cat <<'EOF' >> "$run_script"
	hv_utils
	nvme
	ptp_kvm
EOF
      ;;
  esac
}
