#!/bin/sh -u
# shellcheck disable=SC1117,SC2039
#
#############################################################################
##
##  create-alpine-disk-image
##
##  Copyright 2021-2022 Dermot Bradley <dermot_bradley@yahoo.com>
##
##  Licensed via GPL version 2.0
##
#############################################################################
##
##  This script can be run as any (i.e. unprivileged) user as it only creates
##  another shell script.
##
##  However the resultant script must be run as "root" user as it performs
##  operations that require privileges (such as setting up lookback devices,
##  mounting LUKS filesystems, etc).
##
#############################################################################

TMPDIR="/var/tmp"

script_version="0.2-DEV"
script_type="creator"
script_name="create-alpine-disk-image"
script_dir="$(dirname "$0")"


# Source read-only variables
. ${script_dir}/lib/common-defines
. ${script_dir}/lib/disk-image-defines


# Source functions, some shared with create-alpine-disk-installer
. ${script_dir}/lib/common-functions
. ${script_dir}/lib/disk-image-functions
. ${script_dir}/lib/mkinitfs-functions
. ${script_dir}/lib/services-functions

. ${script_dir}/lib/cloud-functions
. ${script_dir}/lib/non-cloud-functions
. ${script_dir}/lib/vm-functions

#############################################################################
##		Main Section
#############################################################################

full_command_options="$*"

echo
echo "$script_name version $script_version"

parse_cli_options "$@"
validate_cli_options

echo
echo "Using the following settings:"
echo "  Image arch: $image_arch"
echo "  Image class: $image_class"
case $image_class in
  cloud )
    echo "  Cloud type: $image_cloud_type"
    ;;
  physical )
    echo "  Physical machine type: $image_physical_type"
    ;;
  virtual )
    echo "  VM type: $image_vm_type"
    ;;
esac
echo "  Alpine release: $image_alpine_release"
echo "  Boot Type: $image_boot_type"
echo "  Bootloader: $image_bootloader"
echo "  Filesystem type: $image_fs_type"
if [ -n "${image_encrypted+x}" ]; then
  echo "  Image LUKS partition size: $image_luks_part_size"
elif [ -n "${image_lvm_rootfs+x}" ]; then
  echo "  Image LVM partition size: $image_lvm_part_size"
else
  echo "  Image root partition size: $image_root_part_size"
fi

#############################################################################
##		Prepare the run script
#############################################################################

run_script="$generated_script_filename"
create_runscript_header
insert_runscript_functions
prep_runscript_main_section

if [ -n "${use_ramdisk+x}" ]; then
  mount_ramdisk
fi

disk_image_size=$(calculate_image_size)

cat <<EOF >> "$run_script"

write_log "Creating sparse disk image of ${disk_image_size}MiB"
truncate -s ${disk_image_size}M \$image_full_filename >> \$logfile
EOF

if [ "$image_boot_type" = "rpi" ]; then
  partition_rpi
elif [ "$image_boot_type" = "bios" ]; then
  partition_bios
else
  partition_uefi
fi

if [ -n "${debug_enabled+x}" ]; then
  cat <<'EOF' >> "$run_script"

# Debug
{
  write_debug_log "Resultant partition layout:" 2
  parted --machine --script --align=optimal $image_full_filename \
    unit MiB print >> $logfile
}
EOF
fi

setup_loop_device

if [ -n "${image_encrypted+x}" ]; then
  setup_luks_device
fi
if [ -n "${image_lvm_rootfs+x}" ]; then
  setup_lvm_device
fi

format_and_mount_fs

if [ -n "${image_encrypted+x}" ] && \
   [ "$image_bootloader" = "grub" ] && \
   { [ -z "${image_experimental+x}" ] || \
     [ -z "${remote_unlock_enabled+x}" ]; } && \
   [ -z "${image_no_grub_encryption+x}" ] && \
   [ -z "${needs_boot_partition+x}" ]; then
  # LUKS keyfile is used to unlock rootfs without 2nd password prompt.
  # It applies only when:
  #  - disk image is encrypted, AND
  #  - bootloader is Grub, AND
  #  - remote unlock is not enabled (as otherwise /boot is not encrypted), AND
  #  - Grub LUKS encryption support is not disabled, AND
  #  - /boot is not a separate partition.
  copy_luks_keyfile_into_place
  setup_crypttab
fi

download_static_apk
copy_host_resolv_conf_to_chroot
create_repositories_file_inside_chroot
if [ -n "${local_repo_signature_file+x}" ]; then
  copy_local_repo_key_to_chroot
fi
install_alpine_base
cat <<EOF >> "$run_script"
rm -Rf \$TMPDIR/apk-tools-$apk_static_version
EOF

mount_host_special_fs_in_chroot

# shellcheck disable=SC2129
cat <<'EOF' >> "$run_script"

#############################################################################
##		Start of Chroot section
#############################################################################

chroot "$chroot_dir" /bin/sh -eu <<EOT

EOF

if [ -n "${image_short_hostname+x}" ]; then
  cat <<EOF >> "$run_script"
short_hostname="$image_short_hostname"

EOF
elif [ -n "${image_full_hostname+x}" ]; then
  cat <<EOF >> "$run_script"
full_hostname="$image_full_hostname"

EOF
fi
cat <<EOF >> "$run_script"
keymap="$image_keymap"
locale="$image_locale"
EOF

if [ "$image_class" = "physical" ]; then
  cat <<EOF >> "$run_script"
timezone="$image_timezone"
EOF
fi

insert_chroot_functions

cat <<'EOF' >> "$run_script"

############################################################################
##		Chroot Main Section
############################################################################
EOF

configure_fstab
add_additional_repos
update_upgrade_packages
basic_os_configuration
setup_etc_modules
disable_extra_getty
add_base_init_d
install_additional_packages
additional_os_configuration

if [ -z "${image_without_cloud_init+x}" ]; then
  configure_cloud_init
else
  configure_non_cloud_init
fi

if [ "$image_console_type" = "serial" ] || \
   [ "$image_console_type" = "both" ]; then
  enable_serial_console
fi

if [ -n "${image_optimise+x}" ]; then
  disable_kernel_modules
fi

if [ -n "${image_harden+x}" ]; then
  create_module_blocking_initd
  delete_users_groups
fi

configure_mkinitfs

if [ -n "${remote_unlock_enabled+x}" ] && \
   [ -n "${ssh_public_key+x}" ]; then
  setup_dropbear_authorized_keys
fi

if [ -n "${image_lvm_rootfs+x}" ] && \
   [ "$image_bootloader" = "grub" ]; then
  cat <<'EOF' >> "$run_script"

{
EOF

  if [ -n "${debug_enabled+x}" ]; then
    cat <<'EOF' >> "$run_script"
  # Debug
  {
    cp /usr/sbin/grub-mkconfig /usr/sbin/grub-mkconfig-orig
  }

EOF
  fi

  cat <<'EOF' >> "$run_script"
  write_log "Tweaking grub-mkconfig to prevent LVM-related warning" 2
  sed -i \\
    -Ee 's|^(GRUB_DEVICE="\`)(.*)|\1export LVM_SUPPRESS_FD_WARNINGS=1; \2|' \\
    -Ee 's|^(GRUB_DEVICE_UUID="\`)(.*)|\1export LVM_SUPPRESS_FD_WARNINGS=1; \2|' \\
    -Ee 's|^(GRUB_DEVICE_PARTUUID="\`)(.*)|\1 export LVM_SUPPRESS_FD_WARNINGS=1; \2|' \\
    -Ee 's|^(GRUB_DEVICE_BOOT="\`)(.*)|\1export LVM_SUPPRESS_FD_WARNINGS=1; \2|' \\
    -Ee 's|^(GRUB_DEVICE_BOOT_UUID="\`)(.*)|\1export LVM_SUPPRESS_FD_WARNINGS=1; \2|' \\
    -Ee 's|^(GRUB_FS="\`)(.*)|\1export LVM_SUPPRESS_FD_WARNINGS=1; \2|' \\
    /usr/sbin/grub-mkconfig
EOF

  if [ -n "${debug_enabled+x}" ]; then
    cat <<'EOF' >> "$run_script"

  # Debug
  {
	  diff /usr/sbin/grub-mkconfig-orig /usr/sbin/grub-mkconfig \\
      >> /chroot.log || true
  }
EOF
  fi

  cat <<'EOF' >> "$run_script"
}
EOF
fi

if [ "$image_mdev" = true ]; then
  # Hack for grub-probe problems - it will use "udevadm info" to determine
  # info related to the boot device/fs if eudev package is installed, if not
  # then it falls back to its own way of figuring stuff out which does not
  # work for filesystems on a loopback device, so let's temporarily install
  # eudev to let it use udevadm.
  cat <<EOF >> "$run_script"

write_log "Temporarily installing eudev so that grub-probe can use it"
apk add eudev >> /chroot.log 2>&1
EOF
fi

install_kernel

if [ "$image_arch" = "x86" ] || \
   [ "$image_arch" = "x86_64" ]; then
  install_microcode
fi
install_firmware

if [ "$image_bootloader" = "grub" ]; then
  configure_bootloader_grub
elif [ "$image_bootloader" = "syslinux" ]; then
  configure_bootloader_syslinux
elif [ "$image_class" = "physical" ] && \
     [ "$(expr "$image_physical_type" : '.*rpi.*')" -gt 0 ]; then
  configure_bootloader_rpi
fi

if [ -n "${image_encrypted+x}" ] && \
   [ "$image_bootloader" = "grub" ] && \
   { [ -z "${image_experimental+x}" ] || \
     [ -z "${remote_unlock_enabled+x}" ]; } && \
   [ -z "${image_no_grub_encryption+x}" ] && \
   [ -z "${needs_boot_partition+x}" ]; then
  # When using GRUB encryption along with a keyfile (to avoid 2nd prompt),
  # ensure that initramfs is only readable by root as it contains the
  # keyfile to decrypt the root partition.
  case $image_class in
    cloud | virtual )
      if [ "$image_kernel_type" = "edge" ]; then
        _initramfs_filename="initramfs-edge2virt"
      else
        _initramfs_filename="initramfs-virt"
      fi
      ;;
    physical )
      if [ "$(expr "$image_physical_type" : '.*rpi.*')" -gt 0 ]; then
        _initramfs_filename="initramfs-rpi"
      else
        if [ "$image_kernel_type" = "edge" ]; then
          _initramfs_filename="initramfs-edge"
        else
          _initramfs_filename="initramfs-lts"
        fi
      fi
      ;;
  esac
  cat <<EOF >> "$run_script"

chmod 600 /boot/$_initramfs_filename
EOF
fi

if [ -n "${debug_enabled+x}" ]; then
  cat <<'EOF' >> "$run_script"

# Debug
{
  write_debug_log "mkinitfs contents:"
  mkinitfs -l "\$_kernel_version" >> /chroot.log
}
EOF
fi

if [ "$image_bootloader" = "grub" ]; then
  install_grub
elif [ "$image_bootloader" = "syslinux" ]; then
  install_syslinux
fi


configure_services


if [ -n "${extra_packages_list+x}" ]; then
  install_extra_packages
fi

if [ -n "${extra_files_directory+x}" ]; then
  install_extra_files
fi


if [ -n "${debug_enabled+x}" ]; then
  cat <<'EOF' >> "$run_script"

# Debug
{
  write_debug_log "Final installed packages list:"
  apk info -v | sort >> /chroot.log

  write_debug_log "Disk space usage:"
  df -k >> /chroot.log

  write_debug_log "/boot size:"
  du -k /boot/ |sort -n >> /chroot.log
  write_debug_log "/boot contents:"
  ls -laR /boot/ >> /chroot.log
EOF

  if [ "$image_boot_type" = "uefi" ]; then
    # UEFI
    cat <<'EOF' >> "$run_script"

  write_debug_log "/efi size:"
	du -k /efi/ |sort -n >> /chroot.log
  write_debug_log "Contents of /efi directory:"
  ls -lR /efi >> /chroot.log
EOF
  fi

  cat <<'EOF' >> "$run_script"

  apk info | sort > /final-packages.list
}
EOF
fi

cat <<'EOF' >> "$run_script"

EOT

#############################################################################
##		End of Chroot section
#############################################################################

cat "$chroot_dir"/chroot.log >> "$logfile"
rm "$chroot_dir"/chroot.log

write_log "Finished chroot section"

write_log "Removing temporary /etc/resolv.conf from chroot filesystem"
rm "$chroot_dir"/etc/resolv.conf
EOF

if [ -n "${debug_enabled+x}" ]; then
  cat <<'EOF' >> "$run_script"

# Debug
mv "$chroot_dir"/base-packages.list .
mv "$chroot_dir"/final-packages.list .
mv "$chroot_dir"/kernel-config_* .
EOF
fi

cat <<'EOF' >> "$run_script"

write_log "Cleaning up"
normal_cleanup
EOF

if [ -n "${use_ramdisk+x}" ]; then
  cat <<EOF >> "$run_script"

write_log "Copying image from ramdisk to final location"
cp "\$image_full_filename" "\$images_dir/"

if mount | grep -q "\$ramdisk_dir" ; then
  _rc=1
  while [ \$_rc -ne 0 ]; do
    write_log "Unmounting ramdisk"
    umount \$ramdisk_dir >> \$logfile
    _rc=\$?
    sleep 5
  done
  # A small delay before rmdir as sometimes the umount is not immediate
  sleep 5
  rmdir \$ramdisk_dir
fi
EOF
fi

cat <<'EOF' >> "$run_script"

# Clear exit trap function
trap EXIT

exit
EOF

if [ -n "${debug_enabled+x}" ]; then
  shellcheck -s ash -e SC1117 "$run_script"
  # shellcheck disable=SC2034
  _rc=$?
  #if [ $_rc != 0 ]; then
  #  exit 2
  #fi
fi

chmod +x "$run_script"

echo
echo "Created tailored script '$run_script'."
echo "This script must be run as user 'root'."
echo

exit
