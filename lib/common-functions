#!/bin/sh -u
# shellcheck disable=SC1117,SC2039

#############################################################################
##
##  common-functions
##
##  Copyright 2021-2022 Dermot Bradley <dermot_bradley@yahoo.com>
##
##  Licensed via GPL version 2.0
##
#############################################################################

#
# Add more Alpine repos to the repositories file
#
add_additional_repos() {
  cat <<-'EOF' >> "$run_script"
	
	write_log "Adding additional repos"
	{
	EOF

  add_alpine_repo "$alpine_mirror_site" "$image_alpine_release" "community"

  if [ "$image_alpine_release" = "edge" ]; then
    add_alpine_repo "$alpine_mirror_site" "$image_alpine_release" "testing"
  fi

  if [ -n "${local_alpine_repository+x}" ]; then
    add_alpine_repo "$local_alpine_repository" "$image_alpine_release"
  fi

  cat <<-'EOF' >> "$run_script"
	}
	EOF
}


#
# Enable base Alpine init.d services
#
add_base_init_d() {
  cat <<-'EOF' >> "$run_script"
	
	write_log "Enable init.d scripts"
	{
	EOF

  add_init_d_service "devfs" "sysinit" 2
  add_init_d_service "dmesg" "sysinit" 2

  cat <<-'EOF' >> "$run_script"
	
	EOF

  add_init_d_service "bootmisc" "boot" 2
  add_init_d_service "hostname" "boot" 2
  add_init_d_service "modules" "boot" 2
  add_init_d_service "swap" "boot" 2
  add_init_d_service "urandom" "boot" 2

  if [ "$image_class" = "cloud" ] || \
     [ "$image_class" = "virtual" ] || \
     { [ "$image_class" = "physical" ] && \
       [ "$(expr "$image_physical_type" : '.*rpi.*')" -eq 0 ]; }; then
    # Everything except RPIs
    add_init_d_service "osclock" "boot" 2
  elif [ "$image_class" = "physical" ] && \
     [ "$(expr "$image_physical_type" : '.*rpi.*')" -gt 0 ]; then
    # RPIs
    if [ -n "${rpi_use_rtc+x}" ]; then
      # With hardware RTC
      add_init_d_service "osclock" "boot" 2
    else
      # Without hardware RTC
      add_init_d_service "swclock" "boot" 2
    fi
  fi

  cat <<-'EOF' >> "$run_script"
	
	EOF

  add_init_d_service "networking" "default" 2

  cat <<-'EOF' >> "$run_script"
	
	EOF

  add_init_d_service "killprocs" "shutdown" 2
  add_init_d_service "mount-ro" "shutdown" 2
  add_init_d_service "savecache" "shutdown" 2

  cat <<-'EOF' >> "$run_script"
	} >> /chroot.log 2>&1
	EOF
}


#
# Add an entry to /etc/apk/repositories file
#
add_alpine_repo() {
  local _mirror=$1
  local _release=$2
  local _repo=${3:-local}

  cat <<EOF >> "$run_script"

  write_log "Adding ${_repo} repo to /etc/apk/repositories" 2
  cat <<-_SCRIPT_ >> /etc/apk/repositories
EOF

  if [ "$_repo" = "local" ]; then
    cat <<EOF >> "$run_script"
	${_mirror}/${_release}
EOF
  else
    cat <<EOF >> "$run_script"
	${_mirror}/${_release}/${_repo}
EOF
  fi

  cat <<'EOF' >> "$run_script"
	_SCRIPT_
EOF
}


#
# Enable the specified service on the specified runlevel
#
add_init_d_service() {
  local _service_name=$1
  local _run_level=$2
  local _indent=${3:-0}

  cat <<-EOF >> "$run_script"
	$(printf "%${_indent}s")rc-update add ${_service_name} ${_run_level}
	EOF
}


#
# Display error as command option is not supported, and exit
#
cli_option_not_handled() {
  error_message "This option does not apply in this situation."
}


#
# Display error as command option value is not valid, and exit
#
cli_option_unknown_value() {
  local _additional_text="$1"

  error_message "Unknown $_additional_text!"
}


#
# Copy /etc/resolv.conf from host system to chroot
#
copy_host_resolv_conf_to_chroot() {
  cat <<-'EOF' >> "$run_script"
	
	write_log "Copying system's /etc/resolv.conf into chroot filesystem"
	{
	  mkdir -p "$chroot_dir"/etc
	  cp /etc/resolv.conf "$chroot_dir"/etc/
	}
	EOF
}

#
# Copy local repository signing key to chroot
#
copy_local_repo_key_to_chroot() {
  cat <<-EOF >> "$run_script"
	
	write_log "Copy local repo key to /etc/apk/keys/ directory inside chroot"
	cp "${local_repo_signature_file}" "\$chroot_dir"/etc/apk/keys/
	EOF
}


#
# Create MBR or GPT disk label
#
create_disk_label() {
  local label_type=$1

  cat <<-EOF >> "$run_script"
	  write_debug_log "Creating ${label_type} disk label" 2
	  parted --machine --script --align=optimal \$image_full_filename \\
	    mklabel ${label_type} >> "\$logfile" 2>&1
	EOF
}


#
# Create a disk partition
#
create_disk_partition() {
  local _part_number=$1
  local _part_start=$2
  local _part_end=$3
  local _size=$4
  local _part_desc=$5
  local _flags="${6:-}"
  local _fs_type=${7:-}

  local _flag

  cat <<-EOF >> "$run_script"
	  write_debug_log "Creating ${_size}MiB ${_part_desc} partition" 2
	  parted --machine --script --align=optimal \$image_full_filename \\
	    unit MiB mkpart primary ${_fs_type} ${_part_start} ${_part_end} >> "\$logfile" 2>&1
	EOF

  for _flag in $_flags; do
    cat <<-EOF >> "$run_script"
	  write_debug_log "Setting partition ${_flag} flag on" 2
	  parted --machine --script --align=optimal \$image_full_filename \\
	    set ${_part_number} ${_flag} on >> "\$logfile" 2>&1
	EOF
  done
}


#
# Create basic /etc/apk/repositories file inside chroot
#
create_repositories_file_inside_chroot() {
  cat <<-EOF >> "$run_script"
	
	write_log "Creating /etc/apk/repositories file inside chroot"
	{
	  mkdir -p "\$chroot_dir"/etc/apk/keys
	  echo "${alpine_mirror_site}/${image_alpine_release}/main" \\
	    > "\$chroot_dir"/etc/apk/repositories
	}
	EOF
}


#
# Output list of options, one per line
#
options_wrap() {
  local _options_list="$1"

  local _option

  while [ ${#_options_list} -gt 0 ] && \
        [ "${_options_list#*--}" != "$_options_list" ]; do
    _options_list="${_options_list#*--}"
    _option="${_options_list%% --*}"
    cat <<-EOF >> "$run_script"
	#   --${_option}
	EOF
  done
}


#
# Create the comment block at the start of the runscript
#
create_runscript_header() {
  cat <<-EOF > "$run_script"
	#!/bin/sh -eu
	# shellcheck disable=SC2039
	
	#############################################################################
	# Generated on $(date +%c) by ${script_name}
	# version ${script_version} using the following options:
	#
	EOF

  options_wrap "$full_command_options"

  cat <<-'EOF' >> "$run_script"
	#
	#############################################################################
	
	if [ "$(id -u)" -ne 0 ]; then
	  echo
	  echo "This script must be run as the root user!"
	  echo
	  exit 1
	fi
	
	EOF
}


#
# Download tarball of statically compiled apk tool
#
download_static_apk() {
  cat <<-EOF >> "$run_script"
	
	_host_arch="\$(detect_host_arch)"
	write_log "Downloading statically built APK tool for \${_host_arch} arch"
	{
	  wget -q -O ${TMPDIR}/apk.static \\
	    ${apk_static_url}/"\${_host_arch}"/apk.static \\
	    2>> "\$logfile"
	  chmod +x ${TMPDIR}/apk.static
	}
	EOF
}


#
# Enable serial console for Grub
#
enable_grub_serial_console() {
  cat <<-EOF >> "$run_script"
	    {
	      write_log "Configure GRUB serial command" 4
	      echo 'GRUB_SERIAL_COMMAND="serial --unit=${serial_port_number} \\
	        --speed=${serial_port_speed}"' >> /etc/default/grub
	      write_log "Configure GRUB for serial console" 4
	EOF

  if [ "$image_console_type" = "both" ]; then
    cat <<-'EOF' >> "$run_script"
	      sed -i -e 's/^GRUB_TERMINAL=.*/GRUB_TERMINAL="serial console"/' \
	        /etc/default/grub
	EOF
  else
    cat <<-'EOF' >> "$run_script"
	      sed -i -e 's/^GRUB_TERMINAL=.*/GRUB_TERMINAL="serial"/' \
	        /etc/default/grub
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	    }
	EOF
}


#
# Enable serial console for Syslinux
#
enable_syslinux_serial_console() {
  cat <<-EOF >> "$run_script"
	
	    write_log "Configure Syslinux serial port and speed" 4
	    sed -i -e "s|^serial_port=.*|serial_port=${serial_port_number}|g" \\
	      -e "s|^serial_baud=.*|serial_baud=${serial_port_speed}|g" \\
	      /etc/update-extlinux.conf
	EOF

  if [ "$image_console_type" = "serial" ]; then
    cat <<-'EOF' >> "$run_script"
	
	    write_log "Disable normal Syslinux console" 4
	    sed -i -e "s|^console=.*|console=0|g" /etc/update-extlinux.conf
	EOF
  fi
}


#
# Display an error message and exit the script
#
error_message() {
  local _error_message="$1"

  echo
  echo "${_error_message}"
  echo
  exit 2
}


#
# Create an ESP FAT filesystem
#
format_esp_fs() {
  case $esp_type in
    fat12 )
      uefi_info_type="FAT12"
      uefi_mkfs_option="-F12 -s 1 -S 512"
      ;;
    fat16 )
      uefi_info_type="FAT16"
      uefi_mkfs_option="-F16 -s 1 -S 512"
      ;;
    fat32 )
      uefi_info_type="FAT32"
      uefi_mkfs_option="-F32"
      ;;
  esac

  cat <<-EOF >> "$run_script"
	  write_log "Formatting ${uefi_info_type} filesystem on ESP partition" 2
	  mkfs.fat -v ${uefi_mkfs_option} -n ${CONSTANT_ESP_FS_LABEL} "\$uefi_part_device" \\
	    >> "\$logfile" 2>&1
	
	EOF
}


#
# Create an EXT4 filesystem
#
format_ext4_fs() {
  local device=$1
  local fs_use="$2"
  local label=$3
  local formatting_where="$4"

  local _fs_options

  # Ensure EXT4 inode size is 256 bytes rather than 128 in order to avoid
  # Year 2038 problems/warning.
  _fs_options="-I 256"

  if [ "$fs_use" = "boot" ]; then
    if [ "$image_bootloader" = "syslinux" ]; then
      # Syslinux requires 64bit flag be disabled for boot filesystem
      _fs_options="$_fs_options -O ^64bit"
    fi
  elif [ "$fs_use" = "root" ] && \
       [ -z "${needs_boot_partition+x}" ] && \
       [ "$image_bootloader" = "syslinux" ] && \
       [ -z "${image_lvm_rootfs+x}" ]; then
    # Syslinux requires 64bit flag be disabled for boot filesystem
    _fs_options="$_fs_options -O ^64bit"
  fi

  cat <<-EOF >> "$run_script"
	  write_log "Formatting Ext4 ${fs_use} filesystem on ${formatting_where}" 2
	  mkfs.ext4 -q -L ${label} ${_fs_options} "${device}" >> "\$logfile" 2>&1
	EOF
}


#
# Insert function add_fstab_entry into created script
#
insert_chroot_function_add_fstab_entry() {
  cat <<-'EOF' >> "$run_script"
	
	add_fstab_entry() {
	  local _entry_type=\$1
	  local _entry_value=\$2
	  local _mount_point=\$3
	  local _fs_type=\$4
	  local _fs_options=\$5
	  local _entry_log=\$6
	
	  local _fstab_entry
	  if [ "\$_entry_type" = "BIND" ]; then
	    _fs_options="bind,\${_fs_options}"
	    local _fs_passno="0"
	  elif [ "\$_mount_point" = "/" ]; then
	    local _fs_passno="1"
	  else
	    local _fs_passno="2"
	  fi
	
	  if [ "\$_entry_type" = "BIND" ] ||
	     [ "\$_entry_type" = "DEVICE" ]; then
	    _fstab_entry="\${_entry_value}"
	  else
	    _fstab_entry="\${_entry_type}=\${_entry_value}"
	  fi
	  _fstab_entry="\${_fstab_entry}\t\${_mount_point}\t\${_fs_type}\t\${_fs_options} 0 \${_fs_passno}"
	
	  write_log "Add \${_entry_log} entry" 2
	  # shellcheck disable=SC2169,SC3036
	  echo -e "\${_fstab_entry}" >> /etc/fstab
	}
	EOF
}


#
# Insert function get_kernel_version into created script
#
insert_chroot_function_get_kernel_version() {
  local _kernel_package

  cat <<-'EOF' >> "$run_script"
	
	get_kernel_version() {
	EOF

  case $image_class in
    cloud | virtual )
      if [ "$image_kernel_type" = "edge" ]; then
        _kernel_package="edge4virt"
      else
        _kernel_package="virt"
      fi
      ;;
    physical )
      case $image_physical_type in
        pc )
          if [ "$image_kernel_type" = "edge" ]; then
            _kernel_package="edge"
          else
            _kernel_package="lts"
          fi
          ;;
        rpi2 | rpi3 )
          if [ "$image_arch" = "armv7" ]; then
            _kernel_package="rpi2"
          else
            _kernel_package="rpi"
          fi
          ;;
        rpi4 )
          _kernel_package="rpi4" ;;
      esac
      ;;
  esac

  cat <<-EOF >> "$run_script"
	  echo "\\\$(apk info linux-${_kernel_package} | head -n 1 | sed -e "s/^linux-${_kernel_package}-//" \\
	    -e 's/-r/-/' -e 's/ .*//' -Ee "s/^(.*)\$/\\1-${_kernel_package}/")"
	}
	EOF
}


#
# Insert function write_debug_log into created script
#
insert_chroot_function_write_debug_log() {
  cat <<-'EOF' >> "$run_script"
	
	write_debug_log() {
	  local _log_entry="\$1"
	  local _indent=\${2:-0}
	
	  local _current_time
	EOF

  if [ -n "${debug_enabled+x}" ]; then
    cat <<-'EOF' >> "$run_script"
	
	  _current_time=\$(printf "[%s]" "\$(date -u "+%Y-%m-%d %H:%M:%S")")
	  printf "\$_current_time chroot: %\${_indent}s\${_log_entry}\n" >> /chroot.log
	EOF
  else
    cat <<-'EOF' >> "$run_script"
	  # Debug not enabled so do nothing
	  true
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	}
	EOF
}


#
# Insert function write_log into created script
#
insert_chroot_function_write_log() {
cat <<-'EOF' >> "$run_script"
	
	write_log() {
	  local _log_entry="\$1"
	  local _indent=\${2:-0}
	
	  local _current_time
	
	  _current_time=\$(printf "[%s]" "\$(date -u "+%Y-%m-%d %H:%M:%S")")
	  printf "\$_current_time chroot: %\${_indent}s\${_log_entry}\n" >> /chroot.log
	  printf "chroot: %\${_indent}s\${_log_entry}\n"
	}
	EOF
}


#
# Insert function check_binfmt_packages into the run script
#
insert_runscript_function_check_binfmt_packages() {
  cat <<-'EOF' >> "$run_script"
	
	#
	# Check that the host OS has necessary packages installed for
	# running user-mode QEMU via binfmt and that it is configured.
	#
	check_binfmt_packages() {
	  local _arch=$1
	
	  local _binfmt_arch_enabled _binfmt_file _host_arch _host_os _required_packages
	
	  _host_arch=$(detect_host_arch)
	
	  if [ "$_host_arch" != "$_arch" ]; then
	    _host_os=$(detect_host_os)
	    case $_host_os in
	      alpine )
	        _required_packages="qemu-openrc"
	        case $_arch in
	          aarch64 )
	            _required_packages="$_required_packages qemu-aarch64" ;;
	          armv7 )
	            _required_packages="$_required_packages qemu-arm" ;;
	          x86 )
	            _required_packages="$_required_packages qemu-i386" ;;
	          x86_64 )
	            _required_packages="$_required_packages qemu-x86_64" ;;
	          * )
	            echo "Unsupported architecture: $_arch!"
	            exit 1
	            ;;
	        esac
	        # shellcheck disable=SC2086
	        if ! apk info -e -q $_required_packages; then
	          echo
	          echo "The following Alpine packages need to be installed:"
	          echo "  $_required_packages"
	          echo
	          exit 1
	        fi
	        ;;
	      debian | ubuntu )
	        _required_packages="binfmt-support qemu-user-static"
	        # shellcheck disable=SC2086
	        if ! dpkg-query -W -f='${Status}\n' $_required_packages 1>/dev/null 2>&1; then
	          echo
	          echo "The following packages need to be installed:"
	          echo "  $_required_packages"
	          echo
	          exit 1
	        fi
	        ;;
	      * )
	        echo
	        echo "Unsupported host OS!"
	        echo
	        exit 1
	        ;;
	    esac
	
	    # Is binfmt configured for this QEMU arch?
	    case $_arch in
	      aarch64 )
	        _binfmt_file="/proc/sys/fs/binfmt_misc/qemu-aarch64" ;;
	      armv7 )
	        _binfmt_file="/proc/sys/fs/binfmt_misc/qemu-arm" ;;
	      x86 )
	        _binfmt_file="/proc/sys/fs/binfmt_misc/qemu-i386" ;;
	      x86_64 )
	        _binfmt_file="/proc/sys/fs/binfmt_misc/qemu-x86_64" ;;
	    esac
	    if [ -e "$_binfmt_file" ]; then
	      _binfmt_arch_enabled=$(head -1 ${_binfmt_file})
	      if [ "$_binfmt_arch_enabled" = "enabled" ]; then
	        return
	      else
	        echo
	        echo "Binfmt is not enabled for $_arch"
	        echo
	        exit 1
	      fi
	    else
	      echo
	      echo "Binfmt and QEMU are not configured for $_arch"
	      echo
	      exit 1
	    fi
	  fi
	}
	EOF
}


#
# Insert function check_for_required_packages into the run script
#
insert_runscript_function_check_for_required_packages() {
  local _package_list

  cat <<-'EOF' >> "$run_script"
	
	#
	# Checks that the host OS has all necessary packages installed
	#
	check_for_required_packages() {
	  local _host_os _host_os_major_version _required_packages
	
	  _host_os=$(detect_host_os)
	  case $_host_os in
	    alpine )
	      _host_os_major_version="$(grep VERSION_ID /etc/os-release | sed -E -e 's/^VERSION_ID=([0-9]+\.[0-9]+).*/\1/g')"
	EOF

  # Select:
  #    coreutils for: truncate
  _package_list="blkid busybox coreutils lsblk parted tar wget"

  if [ "$image_fs_type" = "btrfs" ]; then
    _package_list="$_package_list btrfs-progs btrfs-progs-extra"
  elif [ "$image_fs_type" = "ext4" ]; then
    # e2fsprogs for: mkfs.ext4
    _package_list="$_package_list e2fsprogs"
  elif [ "$image_fs_type" = "f2fs" ]; then
    _package_list="$_package_list f2fs-tools"
  elif [ "$image_fs_type" = "xfs" ]; then
    _package_list="$_package_list xfsprogs xfsprogs-extra"
  fi
  if [ -n "${image_encrypted+x}" ]; then
    _package_list="$_package_list cryptsetup"
  fi
  if [ -n "${image_lvm_rootfs+x}" ]; then
    _package_list="$_package_list lvm2"
  fi

  cat <<-EOF >> "$run_script"
	      _required_packages="${_package_list}"
	      case \$_host_os_major_version in
	        3.13 | 3.14 )
	          # Select:
	          #    util-linux for: losetup, mount (Busybox versions are not suitable)
	          _required_packages="\$_required_packages util-linux"
	          ;;
	        3.15 )
	          # Select:
	          #    util-linux-misc for: losetup, mount (Busybox versions are not suitable)
	          _required_packages="\$_required_packages util-linux-misc"
	          ;;
	        * )
	          # Select:
	          #    losetup & util-linux-misc for: losetup, mount (Busybox versions are not suitable)
	          _required_packages="\$_required_packages losetup util-linux-misc"
	          ;;
	      esac
	      # shellcheck disable=SC2086
	      if ! apk info -e -q \$_required_packages; then
	        echo
	        echo "The following Alpine packages need to be installed:"
	        echo "  \$_required_packages"
	        echo
	        exit 1
	      fi
	      ;;
	    debian | ubuntu )
	EOF

  _package_list="coreutils dosfstools mount parted wget util-linux"
  if [ "$image_fs_type" = "btrfs" ]; then
    _package_list="$_package_list btrfs-progs"
  elif [ "$image_fs_type" = "ext4" ]; then
    _package_list="$_package_list e2fsprogs"
  elif [ "$image_fs_type" = "f2fs" ]; then
    _package_list="$_package_list f2fs-tools"
  elif [ "$image_fs_type" = "xfs" ]; then
    _package_list="$_package_list xfsprogs"
  fi
  if [ -n "${image_encrypted+x}" ]; then
    _package_list="$_package_list cryptsetup-bin"
  fi
  if [ -n "${image_lvm_rootfs+x}" ]; then
    _package_list="$_package_list lvm2"
  fi

  cat <<-EOF >> "$run_script"
	      _required_packages="${_package_list}"
	      # shellcheck disable=SC2086
	      if ! dpkg-query -W -f='\${Status}\n' \$_required_packages 1>/dev/null 2>&1; then
	        echo
	        echo "The following packages need to be installed:"
	        echo "  \$_required_packages"
	        echo
	        exit 1
	      fi
	      # The apk.static package requires a CAs file to use for trusting HTTPS
	      # connections but it is hardcoded to look for /etc/apk/ca.pem, which is
	      # Alpine-specific. Create this directory on the host machine and copy
	      # the host's usual CA file there. This directory will be deleted when
	      # this script finishes.
	      if [ ! -d /etc/apk ]; then
	        mkdir -p /etc/apk
	        temp_ca_dir_created=true
	      fi
	      if [ ! -f /etc/apk/ca.pem ]; then
	        cp /etc/ssl/certs/ca-certificates.crt /etc/apk/ca.pem
	        temp_ca_file_created=true
	      fi
	      ;;
	    *)
	      echo
	      echo "Unsupported host OS!"
	      echo
	      exit 1
	      ;;
	  esac
	}
	EOF
}


#
# Insert function detect_host_arch into the run script
#
insert_runscript_function_detect_host_arch() {
  cat <<-'EOF' >> "$run_script"
	
	#
	# Determine the host architecture that this script is being run on
	#
	detect_host_arch() {
	  uname -m
	}
	EOF
}


#
# Insert function detect_host_os into the run script
#
insert_runscript_function_detect_host_os() {
  cat <<-'EOF' >> "$run_script"
	
	#
	# Determine the Linux distro that this script is being run on
	#
	detect_host_os() {
	  local _os
	
	  _os=$(grep "^ID=" /etc/os-release | sed -e 's/^ID=//')
	  echo "$_os"
	}
	EOF
}


#
# Insert function error_cleanup into the run script
#
insert_runscript_function_error_cleanup() {
  cat <<-'EOF' >> "$run_script"
	
	#
	# Unmount filesystems whenever an error occurs in the script
	#
	error_cleanup() {
	  local _rc
	
	  write_log
	  write_log
	  write_log "AN ERROR OCCURRED, cleaning up before aborting!"
	  write_log
	  write_log
	
	  if [ -f "$chroot_dir"/chroot.log ]; then
	    cat "$chroot_dir"/chroot.log >> "$logfile"
	  fi
	
	  normal_cleanup "error"
	EOF

  if [ -n "${ramdisk_directory+x}" ]; then
    cat <<-'EOF' >> "$run_script"
	
	  unmount_ramdisk
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	}
	EOF
}


#
# Insert function get_uuid_from_device into the run script
#
insert_runscript_function_get_uuid_from_device() {
  cat <<-'EOF' >> "$run_script"
	
	#
	# Get the UUID of the filesystem in the specified device
	#
	get_uuid_from_device() {
	  local _device=$1
	
	  # shellcheck disable=SC2005
	  echo "$(blkid -s UUID "$_device" | sed -E -e 's|^.*UUID="(.*)"|\1|')"
	}
	EOF
}


#
# Insert function normal_cleanup into the run script
#
insert_runscript_function_normal_cleanup() {
  cat <<-'EOF' >> "$run_script"
	
	#
	# Unmount filesystems mounted inside chroot directory
	#
	normal_cleanup() {
	  local _param="${1:-}"
	
	  # Clear exit trap function
	  trap EXIT
	
	  if [ -z "$_param" ]; then
	    write_log "Normal cleanup"
	  fi
	
	  unmount_chroot_fs "/dev"
	  unmount_chroot_fs "/sys"
	  unmount_chroot_fs "/proc"
	EOF

  if [ -n "${needs_boot_partition+x}" ] || \
     [ -n "${image_lvm_rootfs+x}" ]; then
    cat <<-'EOF' >> "$run_script"
	  unmount_chroot_fs "/boot"
	EOF
  elif [ "$image_boot_type" = "uefi" ] && \
       [ "$image_bootloader" = "syslinux" ]; then
    cat <<-'EOF' >> "$run_script"
	  unmount_chroot_fs "/boot" "bind-mounted from ESP filesystem"
	EOF
  fi

  if [ "$image_boot_type" = "uefi" ]; then
    cat <<-'EOF' >> "$run_script"
	  unmount_chroot_fs "/efi"
	EOF
  fi

  if [ "$image_class" = "physical" ] &&
     [ "$image_cloud_software" = "cloud-init" ]; then
    cat <<-'EOF' >> "$run_script"
	  unmount_chroot_fs "/cidata"
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	  unmount_chroot_fs "/"
	EOF

  if [ -n "${image_encrypted+x}" ]; then
    if [ -n "${image_lvm_rootfs+x}" ]; then
      # LVM-on-LUKS
      cat <<-'EOF' >> "$run_script"
	
	  vgchange -an >> "$logfile"
	EOF
    fi

    cat <<-EOF >> "$run_script"
	
	  cryptsetup close ${CONSTANT_LUKS_DEVICE_NAME} >> "\$logfile"
	EOF
  elif [ -n "${image_lvm_rootfs+x}" ]; then
    cat <<-'EOF' >> "$run_script"
	
	  vgchange -an >> "$logfile"
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	
	  if [ -n "${loop_device+x}" ]; then
	    write_log "Freeing up loop device" 2
	    losetup -d "$loop_device" >> "$logfile"
	  fi
	}
	EOF
}


#
# Insert function unmount_chroot_fs into the run script
#
insert_runscript_function_unmount_chroot_fs() {
  cat <<-'EOF' >> "$run_script"
	
	#
	# Unmount a filesystem inside chroot
	#
	unmount_chroot_fs() {
	  local _mountpoint="$1"
	  local _where_from="${2:-inside chroot}"
	
	  local _full_path _pseudo_path
	
	  if [ "$_mountpoint" = "/" ]; then
	    _full_path="$chroot_dir"
	    _pseudo_path="root filesystem"
	  else
	    _full_path="${chroot_dir}${_mountpoint}"
	    _pseudo_path="$_mountpoint"
	  fi
	
	  if mount | grep -q "$_full_path" ; then
	    write_log "Unmounting ${_pseudo_path} ${_where_from}" 2
	    umount -l -f "$_full_path" >> "$logfile"
	  fi
	}
	EOF
}


#
# Insert function unmount_ramdisk into the run script
#
insert_runscript_function_unmount_ramdisk() {
  cat <<-'EOF' >> "$run_script"
	
	#
	# Unmount ramdisk
	#
	unmount_ramdisk() {
	  local _rc
	
	  # Give any previous operations on things using the ramdisk time to complete
	  sleep 10
	
	  if mount | grep -q "$ramdisk_dir" ; then
	    _rc=1
	    while [ $_rc -ne 0 ]; do
	      write_log "Unmounting ramdisk"
	      umount "$ramdisk_dir" >> "$logfile"
	      _rc=$?
	      sleep 5
	    done
	
	    write_log "Deleting ramdisk directory"
	    rmdir "$ramdisk_dir" >> "$logfile"
	  fi
	}
	EOF
}


#
# Insert function write_debug_log into the run script
#
insert_runscript_function_write_debug_log() {
  cat <<-'EOF' >> "$run_script"
	
	#
	# Write debug messages only to the log file
	#
	write_debug_log() {
	  local _log_entry="$1"
	  local _indent="${2:-0}"
	
	  local _current_time
	
	EOF

  if [ -n "${debug_enabled+x}" ]; then
	  cat <<-'EOF' >> "$run_script"
	  _current_time=$(printf "[%s]" "$(date -u "+%Y-%m-%d %H:%M:%S")")
	  printf "${_current_time} %${_indent}s${_log_entry}\n" >> "$logfile"
	EOF
  else
    cat <<-'EOF' >> "$run_script"
	  # Debug not enabled so do nothing
	  true
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	}
	EOF
}


#
# Insert function write_log into the run script
#
insert_runscript_function_write_log() {
  cat <<-'EOF' >> "$run_script"
	
	#
	# Write log messages to both the logfile (with timestamp) and stdout
	#
	write_log() {
	  local _log_entry="${1:-}"
	  local _indent="${2:-0}"
	
	  local _current_time
	
	  _current_time=$(printf "[%s]" "$(date -u "+%Y-%m-%d %H:%M:%S")")
	  printf "${_current_time} %${_indent}s${_log_entry}\n" >> "$logfile"
	  printf "%${_indent}s$_log_entry\n"
	}
	EOF
}


#
# Insert required functions into the run script
#
insert_runscript_functions() {
  cat <<-'EOF' >> "$run_script"
	
	#############################################################################
	##   Functions
	#############################################################################
	EOF

  insert_runscript_function_check_for_required_packages

  insert_runscript_function_check_binfmt_packages

  insert_runscript_function_detect_host_arch
  insert_runscript_function_detect_host_os
  insert_runscript_function_error_cleanup
  insert_runscript_function_get_uuid_from_device
  insert_runscript_function_normal_cleanup
  insert_runscript_function_unmount_chroot_fs
  insert_runscript_function_unmount_ramdisk
  insert_runscript_function_write_debug_log
  insert_runscript_function_write_log
}


#
# Adds an entry to the specified /etc/mkinitfs/features.d/*.modules file
#
initramfs_entry_add() {
  local _modules_entry="$1"

  cat <<EOF >> "$run_script"
	$_modules_entry
EOF
}


#
# Complete adding entries to the specified /etc/mkinitfs/features.d/*.modules file
#
initramfs_entry_finish() {
  cat <<EOF >> "$run_script"
	_SCRIPT_
EOF
}


#
# Prep adding entries to the specified /etc/mkinitfs/features.d/*.modules file
#
initramfs_entry_initialise() {
  local _modules_file=$1
  local _append=${2:-no}

  local _output='>'

  if [ "$_append" != "no" ]; then
    _output='>>'
  fi

  cat <<EOF >> "$run_script"
    cat <<-_SCRIPT_ $_output /etc/mkinitfs/features.d/${_modules_file}.modules
EOF
}


#
# Install additional packages
#
install_additional_packages() {
  cat <<-EOF >> "$run_script"
	
	_initial_packages="$(define_additional_packages)"
	EOF

  cat <<-'EOF' >> "$run_script"
	write_log "Install additional packages: \$_initial_packages"
	{
	  apk add \$_initial_packages >> /chroot.log 2>&1
	EOF

  if [ -n "${debug_enabled+x}" ]; then
    cat <<-'EOF' >> "$run_script"
	
	  # Debug
	  {
	    write_debug_log "Full installed packages list:"
	    apk info -v | sort >> /chroot.log
	  }
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	}
	EOF
}


#
# Install the contents of a user-specified directory into image
#
install_extra_files() {
  cat <<-EOF >> "$run_script"
	
	_extra_contents="${extra_files_directory}"
	EOF

  cat <<-'EOF' >> "$run_script"
	write_log "Installing contents of specified directory '$_extra_contents' into image"
	{
	  if [ -d "$_extra_contents" ]; then
	    cp -vpr "$_extra_contents"/* $chroot_dir/ >> $logfile 2>&1
	  else
	    write_log "NOTE: directory $_extra_contents is missing, unable to copy files from there!"
	  fi
	}
	EOF
}


#
# Install extra, user specified, packages
#
install_extra_packages() {
  cat <<-EOF >> "$run_script"
	
	_extra_packages="${extra_packages_list}"
	EOF

  cat <<-'EOF' >> "$run_script"
	write_log "Installing extra packages: \$_extra_packages"
	{
	  apk add \$_extra_packages >> /chroot.log 2>&1
	}
	EOF
}


#
# Mount the ramdisk
#
mount_ramdisk() {
  cat <<-EOF >> "$run_script"
	write_log "Setting up ramdisk"
	{
	  mkdir -p \$ramdisk_dir
	  mount -t tmpfs -o size=${CONSTANT_RAMDISK_SIZE} tmpfs \$ramdisk_dir >> \$logfile
	}
	EOF
}


#
# Mount special filesystems from host inside chroot
#
mount_host_special_fs_in_chroot() {
  cat <<-'EOF' >> "$run_script"
	
	write_log "Mounting /proc, /sys, and /dev special filesystems in chroot"
	{
	  mount -v -t proc none $chroot_dir/proc
	  mount -v -t none -o rbind /sys $chroot_dir/sys
	  mount -v --make-rprivate $chroot_dir/sys
	  mount -v -t none -o rbind /dev $chroot_dir/dev
	  mount -v --make-rprivate $chroot_dir/dev
	} >> $logfile 2>&1
	EOF
}


#
# Display the help for an individual option, wrapped to 70 chars width
#
option_help() {
  local _option_format="$1"
  local _option_description="$2"

  local _remaining_desc _temp_chunk _this_line
  local _desc_len=76

  echo "  $_option_format"
  echo
  if [ "${#_option_description}" -le 70 ]; then
    echo "    $_option_description"
  else
    # Chop the description into appropriate line portions based on spaces
    _remaining_desc="$_option_description"
    while [ ${#_remaining_desc} -gt 0 ]; do
      if [ ${#_remaining_desc} -le $_desc_len ]; then
        _this_line=$_remaining_desc
        _remaining_desc=''
      else
        _temp_chunk="$(printf '%s' "$_remaining_desc" | cut -c -$_desc_len)"
        _this_line=${_temp_chunk% *}
        _remaining_desc=${_remaining_desc##$_this_line}
        # Remove any leading space
        _remaining_desc=${_remaining_desc# }
      fi
      echo "    $_this_line"
    done
  fi
  echo
}


#
# In the script, setup the loop device for the disk image
#
setup_loop_device() {
  cat <<-'EOF' >> "$run_script"
	
	write_log "Setting up loop device for disk image"
	{
	  loop_device=$(losetup -P --show -f $image_full_filename 2>> $logfile)
	  if [ -z "${loop_device+x}" ]; then
	    echo
	    echo "There was a problem creating the loop device. Aborting!"
	    echo
	    exit 1
	  fi
	}
	EOF
}


#
# Upgrade Alpine packages
#
update_upgrade_packages() {
  cat <<-'EOF' >> "$run_script"
	
	{
	  write_log "Updating package list"
	  apk update >> /chroot.log
	
	  write_log "Upgrading base packages if necessary"
	  apk -a upgrade >> /chroot.log
	EOF

  if [ -n "${debug_enabled+x}" ]; then
    cat <<-'EOF' >> "$run_script"
	
	  # Debug
	  apk info -v | sort > /base-packages.list
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	}
	EOF
}
