#!/bin/sh
# shellcheck disable=SC1117,SC2039
#
#############################################################################
##
##  create-alpine-disk-image
##
##  Copyright 2021-2023 Dermot Bradley <dermot_bradley@yahoo.com>
##
##  Licensed via GPL version 2.0
##
#############################################################################
##
##  This script can be run as any (i.e. unprivileged) user as it only creates
##  another shell script.
##
##  However the resultant script must be run as "root" user as it performs
##  operations that require privileges (such as setting up lookback devices,
##  mounting LUKS filesystems, etc).
##
#############################################################################

readonly TMPDIR="/var/tmp"

readonly script_version="0.3-DEV"
readonly script_type="creator"
readonly script_name="create-alpine-disk-image"
readonly script_dir="$(dirname "$0")"


# Source read-only variables
. "${script_dir}"/lib/common-defines
. "${script_dir}"/lib/disk-image-defines
. "${script_dir}"/lib/kernel-module-defines
. "${script_dir}"/lib/ntp-defines

# Source functions, some shared with create-alpine-disk-installer
. "${script_dir}"/lib/cli-functions
. "${script_dir}"/lib/common-functions
. "${script_dir}"/lib/disk-image-functions
. "${script_dir}"/lib/filesystems-functions
. "${script_dir}"/lib/fscrypt-encryption-functions
. "${script_dir}"/lib/kernel-module-functions
. "${script_dir}"/lib/luks-encryption-functions
. "${script_dir}"/lib/lvm-functions
. "${script_dir}"/lib/ntp-functions
. "${script_dir}"/lib/partitions-functions
. "${script_dir}"/lib/services-functions

. "${script_dir}"/lib/initramfs-functions
. "${script_dir}"/lib/mkinitfs-functions

. "${script_dir}"/lib/bootloader-general-functions
. "${script_dir}"/lib/grub-functions
. "${script_dir}"/lib/limine-functions
. "${script_dir}"/lib/rpi-bootloader-functions
. "${script_dir}"/lib/syslinux-functions
. "${script_dir}"/lib/uki-functions

. "${script_dir}"/lib/cloud-init-functions
. "${script_dir}"/lib/non-cloud-functions
. "${script_dir}"/lib/tiny-cloud-functions

. "${script_dir}"/lib/cloud-functions
. "${script_dir}"/lib/physical-functions
. "${script_dir}"/lib/vm-functions

#############################################################################
##		Main Section
#############################################################################

full_command_options="$*"

printf '\n%s version %s\n' "$script_name" "$script_version"

parse_cli_options "$@"
validate_cli_options

printf '\nUsing the following settings:\n\n'
printf '  Image arch: %s\n' "$image_arch"
printf '  Image class: %s' "$image_class"
case $image_class in
  cloud )
    printf ', Cloud type: %s\n' "$image_cloud_type" ;;
  physical )
    printf ', Physical machine type: %s\n' "$image_physical_type" ;;
  virtual )
    printf ', VM type: %s\n' "$image_vm_type" ;;
esac
printf '  Config software type: %s\n\n' "$image_cloud_software"
printf '  Alpine release: %s\n\n' "$image_alpine_release"
printf '  OS device type: %s\t\tOS device media: %s\n' \
  "$image_os_device_type" "$image_os_device_media"
printf '  OS device sector size: %s bytes\n\n' "$image_os_device_sector_size"
case $image_boot_type in
  secure-uefi | uefi )
    printf '  ESP fs type: %s\t\t\tESP partition size: %s MiB\n' \
      "$image_esp_type" "$image_uefi_part_size"
    ;;
  * )
    : ;;
esac
printf '  Boot type: %s\t\t\tBootloader: %s\n' \
  "$image_boot_type" "$image_bootloader"
printf '  Root filesystem type: %s\n' "$image_fs_type"
if [ "$image_swap_file_size" != "0" ]; then
  printf '  Swapfile size: %s\n' "$image_swap_file_size"
fi
if [ "$image_swap_partition_size" != "0" ]; then
  printf '  Swap partition size: %s\n' "$image_swap_partition_size"
fi
if { [ "$image_encryption_type" = "both" ] || \
     [ "$image_encryption_type" = "luks" ]; }; then
  printf '\n  Using LUKS encryption\n'
  if [ -n "$image_lvm_rootfs" ]; then
    printf '  Using LVM\n'
  fi
elif [ -n "$image_lvm_rootfs" ]; then
  printf '\n  Using LVM\n'
elif [ -n "$image_root_part_size" ]; then
  printf '  Image root filesystem size: %s MiB\n' "$image_root_part_size"
fi
printf '\n  Console device type: %s\tConsole output type: %s\n' \
  "$image_console_device_type" "$image_console_output_type"
printf '  Keyboard type: %s\n' "$image_keyboard_type"
printf '  Enable graphics: %s' "$image_enable_graphics"
if [ "$image_enable_graphics" = "true" ]; then
  printf '\t\tGraphics driver: %s\n' "$image_graphics_driver"
else
  printf '\n'
fi
printf '\n  Cron daemon: %s\t\tDHCP client: %s\n' \
  "$image_cron_daemon" "$image_dhcp_client"
printf '  Login package: %s\tNTP daemon: %s\n' \
  "$image_login_package" "$image_ntp_daemon"
printf '  SSH daemon: %s\t\tSyslog server: %s\n' \
  "$image_ssh_server" "$image_syslog_server"
printf '  User management: %s\n' "$image_user_management"

#############################################################################
##		Prepare the run script
#############################################################################

create_runscript_header
insert_runscript_functions
prep_runscript_main_section

if [ -n "$use_ramdisk" ]; then
  mount_ramdisk
fi

disk_image_size=$(calculate_image_size)

cat <<-EOF >> "$run_script"
	
	write_log "Creating sparse disk image of ${disk_image_size}MiB"
	truncate -s ${disk_image_size}M \$image_full_filename >> \$logfile
	EOF

if [ "$image_os_partitioning_type" != "unpartitioned" ]; then
  case $image_boot_type in
    bios )
      partition_bios ;;
    rpi )
      partition_rpi ;;
    secure-uefi | uefi )
      partition_uefi ;;
  esac

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	
	# Debug
	{
	  write_debug_log "Resultant partition layout:" 2
	  parted --machine --script --align=optimal $image_full_filename \
	    unit s print >> $logfile
	  parted --machine --script --align=optimal $image_full_filename \
	    unit MiB print >> $logfile
	}
	EOF
  fi
fi

setup_loop_device

case $image_encryption_type in
  both | luks )
    setup_luks_device ;;
esac
if [ -n "$image_lvm_rootfs" ]; then
  setup_lvm_device
fi

format_and_mount_fs

case $image_encryption_type in
  both | fscrypt )
    setup_fscrypt_device ;;
esac

case $image_bootloader in
  grub )
    case $image_encryption_type in
      both | luks )
        if { [ -z "$image_experimental" ] || \
             [ -z "$remote_luks_unlock_enabled" ]; } && \
           [ -z "$image_no_grub_luks_fde_encryption" ] && \
           [ -z "$needs_boot_partition" ]; then
          # LUKS keyfile is used to unlock LUKS rootfs without 2nd password prompt.
          # It applies only when:
          #  - bootloader is Grub, AND
          #  - disk image is LUKS encrypted, AND
          #  - remote unlock is not enabled (otherwise /boot is not encrypted), AND
          #  - Grub LUKS encryption support is not disabled, AND
          #  - /boot is not a separate partition.
          copy_luks_keyfile_into_place
        fi
        ;;
    esac
    ;;
esac

setup_alpine_base
mount_host_special_fs_in_chroot

if [ -n "$extra_files_directory" ]; then
  install_extra_files
fi


_chroot_cmd="cat <<EOT"
if [ "$image_output_chroot_script" = "true" ]; then
  _chroot_script_filename="debug-chroot-$(change_filename_extension "$filename_for_image" "sh")"
  _chroot_cmd="$_chroot_cmd | tee ${_chroot_script_filename}"
fi
_chroot_cmd="$_chroot_cmd | chroot \$chroot_dir /bin/sh -eu"

cat <<-EOF >> "$run_script"
	
	#############################################################################
	##		Start of Chroot section
	#############################################################################
	
	${_chroot_cmd}
	#!/bin/sh -eu
	
	EOF

if [ -n "$image_short_hostname" ]; then
  cat <<-EOF >> "$run_script"
	short_hostname="${image_short_hostname}"
	
	EOF
elif [ -n "$image_full_hostname" ]; then
  cat <<-EOF >> "$run_script"
	full_hostname="${image_full_hostname}"
	
	EOF
fi
cat <<-EOF >> "$run_script"
	keymap="${image_keymap}"
	locale="${image_locale}"
	umask="077"
	EOF

case $image_class in
  physical )
    cat <<-EOF >> "$run_script"
	timezone="${image_timezone}"
	EOF
    ;;
esac

insert_chroot_functions

cat <<-'EOF' >> "$run_script"
	
	############################################################################
	##		Chroot Main Section
	############################################################################
	EOF

configure_base_cmdline_values
configure_fstab
add_additional_repos
update_upgrade_packages
basic_os_configuration
setup_etc_modules
add_base_init_d
install_additional_packages
additional_os_configuration
configure_autoconfiguration_software

if [ -n "$image_optimise" ]; then
  disable_kernel_modules
fi
if [ -n "$image_harden" ]; then
  create_module_blocking_initd
  delete_users_groups
fi

if [ -n "$remote_unlock_enabled" ] && [ -n "$ssh_public_key" ]; then
  setup_dropbear_authorized_keys
fi

case $image_alpine_release in
  v3.13 | v3.14 | v3.15 | v3.16 )
    case $image_device_management_type in
      mdev | mdevd )
        # Hack/kludge for grub-probe problems - it will use "udevadm info" to
        # determine info related to the boot device/fs if eudev package is
        # installed, if not then it falls back to its own way of figuring stuff out
        # which does not work for filesystems on a loopback device, so let's
        # temporarily install eudev to let it use udevadm.
        cat <<-'EOF' >> "$run_script"
	
	write_log "Temporarily installing eudev so that grub-probe can use it"
	apk add eudev >> /chroot.log 2>&1
	EOF
        ;;
    esac
    ;;
  * )
    # No longer needed as patch added to Grub to work without udevadm
    : ;;
esac

install_kernel
configure_initramfs_tool

case $image_arch in
  x86 | x86_64 )
    if [ "$image_class" = "physical" ]; then
      install_microcode
    fi
    ;;
esac
install_firmware

show_initramfs_contents

case $image_bootloader in
  grub )
    configure_bootloader_grub ;;
  limine )
    configure_bootloader_limine ;;
  rpi )
    configure_bootloader_rpi ;;
  syslinux )
    configure_bootloader_syslinux ;;
  uki )
    configure_bootloader_uki ;;
esac

case $image_boot_type in
  unpartitioned )
    : ;;
  * )
    case $image_bootloader in
      grub )
        install_grub ;;
      limine )
        install_limine ;;
      syslinux )
        install_syslinux ;;
    esac
    ;;
esac

configure_services

if [ -n "$extra_packages_list" ]; then
  install_extra_packages
fi

cat <<-'EOF' >> "$run_script"
	
	apk info -v | sort > /final-packages.list
	
	write_log "Clearing APK cache"
	rm /var/cache/apk/*
	
	write_debug_log "Final disk space usage:"
	busybox df -k >> /chroot.log
	EOF

if [ -n "$debug_enabled" ]; then
  cat <<-'EOF' >> "$run_script"
	
	# Debug
	{
	  write_debug_log "Final installed packages list:"
	  cat /final-packages.list >> /chroot.log
	
	  write_debug_log "/boot size:"
	  du -k /boot/ |sort -n >> /chroot.log
	EOF

  cat <<-'EOF' >> "$run_script"
	  write_debug_log "general boot files disk space usage:"
	  du -k -c /boot/System.map* /boot/config-* /boot/vmlinuz-* >> /chroot.log
	
	  write_debug_log "initramfs boot file disk space usage:"
	  du -k -c /boot/initramfs-* >> /chroot.log
	
	EOF

  if [ "$image_class" = "physical" ]; then
    case $image_physical_type in
      rpi* )
        : ;;
      * )
        cat <<-'EOF' >> "$run_script"
	  if [ "$(find /boot/*-ucode.img 2>/dev/null)" ]; then
	    write_debug_log "microcode boot files disk space usage:"
	    du -k -c /boot/*-ucode.img >> /chroot.log
	  fi
	
	EOF
        ;;
    esac
  fi

  case $image_bootloader in
    grub )
      cat <<-'EOF' >> "$run_script"
	  write_debug_log "Grub-specfic boot files disk space usage:"
	  du -k -c /boot/grub >> /chroot.log
	EOF
      ;;
    limine )
      cat <<-'EOF' >> "$run_script"
	  write_debug_log "Limine-specific boot files disk space usage:"
	  du -k -c /boot/limine* >> /chroot.log
	EOF
      ;;
    rpi )
      cat <<-'EOF' >> "$run_script"
	  write_debug_log "RPI-specific boot files disk space usage:"
	  du -k -c /boot/* >> /chroot.log
	EOF
      ;;
    syslinux )
      cat <<-'EOF' >> "$run_script"
	  write_debug_log "Syslinux-specific boot files disk space usage:"
	  du -k -c /boot/extlinux.conf* /boot/ldlinux.sys /boot/*.c32 >> /chroot.log
	EOF
      ;;
  esac

  cat <<-'EOF' >> "$run_script"
	  write_debug_log "/boot contents:"
	  # Remove date/time from "ls" output
	  busybox ls -laR /boot/ \
	    | sed -E -e 's| [A-Z][a-z]{2} [ ]*[0-9]{1,2} [0-9]{2}:[0-9]{2}||g' \
	     -e 's| Jan [ ]*1 1970||g' \
	    >> /chroot.log
	EOF

  case $image_boot_type in
    secure-uefi | uefi )
      cat <<-'EOF' >> "$run_script"
	
	  write_debug_log "/boot/efi size:"
	  du -k /boot/efi/ |sort -n >> /chroot.log
	  write_debug_log "Contents of /boot/efi directory:"
	  # Remove date/time from "ls" output
	  busybox ls -lR /boot/efi | \
	    sed -E -e 's| [A-Z][a-z]{2} [ ]*[0-9]{1,2} [0-9]{2}:[0-9]{2}||g' \
	    -e 's| Jan [ ]*1 1970||g' \
	    >> /chroot.log
	EOF
      ;;
  esac

  cat <<-'EOF' >> "$run_script"
	}
	EOF
fi

cat <<-EOF >> "$run_script"
	
	EOT
	
	#############################################################################
	##		End of Chroot section
	#############################################################################
	
	cat "\$chroot_dir"/chroot.log >> "\$logfile"
	rm "\$chroot_dir"/chroot.log
	
	write_log "Finished chroot section"
	
	write_log "Removing temporary /etc/resolv.conf from chroot filesystem"
	rm "\$chroot_dir"/etc/resolv.conf
	
	mv "\$chroot_dir"/final-packages.list \\
	  ./"\$(basename -s .log \$logfile)".final-packages
	EOF

if [ -n "$debug_enabled" ]; then
  cat <<-EOF >> "$run_script"
	
	# Debug
	mv "\$chroot_dir"/base-packages.list \\
	  ./"\$(basename -s .log \$logfile)".base-packages
	_kernel_config_file="\$(basename "\$(ls \$chroot_dir/kernel-config_*)")"
	mv "\$chroot_dir"/"\$_kernel_config_file" \\
	  ./"\$(basename -s .log \$logfile)"."\$_kernel_config_file"
	EOF
fi

cat <<-'EOF' >> "$run_script"
	
	write_log "Cleaning up"
	normal_cleanup
	EOF

if [ -n "$use_ramdisk" ]; then
  cat <<-'EOF' >> "$run_script"
	
	write_log "Copying image from ramdisk to final location"
	cp "$image_full_filename" "$images_dir/"
	sync "$images_dir"/"$image_filename"
	rm "$image_full_filename"
	sync -f "$ramdisk_dir"
	unmount_ramdisk
	EOF
fi

if [ -z "$image_do_not_convert_format" ]; then
  convert_raw_disk_image
fi

cat <<-'EOF' >> "$run_script"
	
	exit
	EOF

if [ -n "$debug_enabled" ] && \
  command -v shellcheck >/dev/null 2>&1; then
  shellcheck -s ash -e SC1117 "$run_script"
  # shellcheck disable=SC2034
  _rc=$?
  #if [ $_rc -ne 0 ]; then
  #  exit 2
  #fi
fi

chmod +x "$run_script"

echo
echo "Created tailored script '$run_script'."
echo "This script must be run as user 'root'."
echo

exit
