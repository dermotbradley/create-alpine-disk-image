#!/bin/sh
# shellcheck disable=SC2039

#############################################################################
##
##  cli-functions
##
##  Copyright 2021-2023 Dermot Bradley <dermot_bradley@yahoo.com>
##
##  Licensed via GPL version 2.0
##
#############################################################################


#
# Parse options given on the command line
#
parse_cli_options() {
  local _cli _help_requested

  if ! _cli=$(getopt -s sh \
    -o h \
    -l \
acpi-power-method:,\
add-directory-contents:,\
add-packages:,\
apk-static-checksum:,\
apk-static-url:,\
apk-static-version:,\
arch:,\
auth-control:,\
barebones,\
boot-by-device,\
boot-part-size:,\
bootchart,\
bootloader:,\
bootloader-password:,\
bootloader-username:,\
boottype:,\
chroot-directory:,\
cloud:,\
cloud-configuration-type:,\
cloud-init-datasources:,\
cloud-init-seed-define:,\
cloud-init-seed-url:,\
console-device-type:,\
console-graphics-driver:,\
console-user:,\
console-user-password:,\
cpu-governor:,\
cpu-vendor:,\
create-boot-partition,\
create-sbom,\
cron:,\
debug,\
debug-sizing,\
device-management:,\
dhcp-client:,\
disable-cloud-provider-cli,\
disable-hypervisor-agent,\
disable-optimisation,\
disk-resize-free-percent:,\
do-not-convert-image,\
enable-graphics,\
enable-watchdog,\
enable-wol,\
enable-zswap,\
encryption-type:,\
esp-part-size:,\
esp-part-type:,\
ethernet-module:,\
ethernet-vendor:,\
experimental,\
extra-cmdline-options:,\
extra-modules:,\
firewall:,\
fs-type:,\
full-hostname:,\
harden,\
hwrng,\
ifupdown-package:,\
image-filename:,\
images-directory:,\
initramfs-compress:,\
initramfs-tool:,\
insecure,\
ipv4only,\
ipv6only,\
ipv6-type,\
kernel-type:,\
keyboard-type:,\
keymap:,\
local-repo:,\
local-repo-sig-file:,\
locale:,\
login-package:,\
luks-cipher:,\
luks-passphrase:,\
luks-remote-unlock,\
luks-remote-unlock-network-module:,\
luks-remote-unlock-ssh-port:,\
luks-remote-unlock-static-gateway:,\
luks-remote-unlock-static-interface:,\
luks-remote-unlock-static-ip:,\
luks-remote-unlock-static-netmask:,\
lvm,\
mirror:,\
no-console-user,\
no-grub-encryption,\
ntp-pools:,\
ntp-servers:,\
ntp-use:,\
os-device-media:,\
os-device-sector-size:,\
os-device-type:,\
output-chroot-script,\
pam,\
partitioning:,\
password:,\
physical:,\
ramdisk-directory:,\
release:,\
rootfs-size:,\
rpi-poe-hat,\
rpi-rtc,\
script-filename:,\
script-host-os:,\
script-host-arch:,\
serial-console-speed:,\
short-hostname:,\
ssh-key-types:,\
ssh-public-key:,\
ssh-server:,\
swap-file-size:,\
swap-partition-size:,\
syslogd:,\
timezone:,\
use-ramdisk,\
user-management:,\
username:,\
utmp,\
virtual:,\
help\
    -n "$0" -- "$@"); then
    error_message "Terminating..."
  fi

  _help_requested=false

  eval set -- "$_cli"

  while true; do
    case "$1" in
      --acpi-power-method )
        case $2 in
          button | tiny-power-button )
            image_acpi_power_method="$2" ;;
          * )
            cli_option_unknown_value "ACPI power method '$2'" ;;
        esac
        shift 2
        ;;
      --add-directory-contents )
        extra_files_directory="$2"
        shift 2
        ;;
      --add-packages )
        extra_packages_list="$(echo "$2" | sed -e 's|,| |g')"
        shift 2
        ;;
      --apk-static-checksum )
        apk_static_checksum="$2"
        shift 2
        ;;
      --apk-static-url )
        apk_static_url="$2"
        shift 2
        ;;
      --apk-static-version )
        apk_static_version="$2"
        shift 2
        ;;
      --arch )
        case $2 in
          aarch64 | armv7 | x86 | x86_64 )
            image_arch=$2 ;;
          * )
            cli_option_unknown_value "arch '$2'" ;;
        esac
        shift 2
        ;;
      --auth-control )
        case $2 in
          doas | sudo | both )
            image_auth_control=$2 ;;
          * )
            cli_option_unknown_value "auth control mechanism '$2'" ;;
        esac
        shift 2
        ;;
      --barebones )
        if [ "$script_type" = "creator" ]; then
          image_barebones=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --boot-by-device )
        image_boot_reference="device"
        shift
        ;;
      --boot-part-size )
        if [ "$script_type" = "creator" ]; then
          boot_part_size=$2
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --bootchart )
        if [ "$script_type" = "creator" ]; then
          image_bootchart=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --bootloader )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            grub | limine | none | rpi | syslinux )
              image_bootloader=$2 ;;
            * )
              cli_option_unknown_value "bootloader '$2', valid values are 'grub', 'limine', 'none', 'rpi', and 'syslinux'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --bootloader-password )
        if [ "$script_type" = "creator" ]; then
          image_bootloader_password="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
       --bootloader-username )
        if [ "$script_type" = "creator" ]; then
          image_bootloader_username="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --boottype )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            bios | rpi | uefi )
              image_boot_type=$2 ;;
            * )
              cli_option_unknown_value "boot type '$2', valid values are 'bios', 'rpi', and 'uefi'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --chroot-directory )
        chroot_directory="$2"
        shift 2
        ;;
      --cloud )
        if [ "$script_type" = "creator" ]; then
          image_class="cloud"
          if [ -d "${script_dir}/definitions/cloud/$2" ] && \
             [ -e "${script_dir}/definitions/cloud/$2/defines" ]; then
            image_cloud_type=$2
          else
            cli_option_unknown_value "cloud machine type '$2'"
          fi
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --cloud-configuration-type )
        if [ "$script_type" = "creator" ]; then
          image_class="cloud"
          case $2 in
            cloud-init | none )
              image_cloud_software=$2 ;;
            * )
              cli_option_unknown_value "cloud configuration type '$2'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --cloud-init-datasources )
        if [ "$script_type" = "creator" ]; then
          image_cloud_init_datasources=$2
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --cloud-init-seed-define )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            cmdline | config | dhcp )
              image_cloud_init_seed_define="$2" ;;
            * )
              cli_option_unknown_value "cloud-init seed define '$2'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --cloud-init-seed-url )
        if [ "$script_type" = "creator" ]; then
          image_cloud_init_seed_url="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --console-device-type )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            hypervisor | normal | normal_and_serial | serial )
              image_console_device_type="$2" ;;
            * )
              cli_option_unknown_value "console device type '$2'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --console-graphics-driver )
        if [ "$script_type" = "creator" ]; then
          image_graphics_driver="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --console-user )
        image_console_user="$2"
        shift 2
        ;;
      --console-user-password )
        image_console_user_password="$2"
        shift 2
        ;;
      --cpu-governor )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            ondemand | powersave | schedutil )
              image_cpu_governor="$2" ;;
            * )
              cli_option_unknown_value "CPU governor type '$2'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --cpu-vendor )
        if [ "$script_type" = "creator" ]; then
          image_cpu_vendor="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --create-boot-partition )
        if [ "$script_type" = "creator" ]; then
          image_create_boot_partition=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --create-sbom )
        image_sbom=true
        shift
        ;;
      --cron )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            busybox )
              image_cron_daemon=$2 ;;
            * )
              cli_option_unknown_value "Cron '$2', must be one of 'busybox', or '???'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --debug )
        debug_enabled=true
        shift
        ;;
      --debug-sizing )
        debug_sizing_enabled=true
        shift
        ;;
      --device-management )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            mdev | mdevd | udev )
              image_device_management_type="$2" ;;
            * )
              cli_option_unknown_value "device management type '$2'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --dhcp-client )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            dhclient | dhcpcd | udhcpc )
              image_dhcp_client="$2" ;;
            * )
              cli_option_unknown_value "DHCP client '$2'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --disable-cloud-provider-cli )
        if [ "$script_type" = "creator" ]; then
          image_disable_cloud_provider_cli=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --disable-hypervisor-agent )
        if [ "$script_type" = "creator" ]; then
          image_disable_hypervisor_agent=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --disable-optimisation )
        if [ "$script_type" = "creator" ]; then
         image_disable_optimisation=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --disk-resize-free-percent )
        if [ "$script_type" = "creator" ]; then
          image_resize_free_percent=$2
          if [ "$image_resize_free_percent" -gt 0 ] 2>/dev/null && \
             [ "$image_resize_free_percent" -lt 100 ] 2>/dev/null; then
            :
          else
            cli_option_unknown_value "Invalid percentage value '$2', it must be within the range 1-99"
          fi
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --do-not-convert-image )
        image_do_not_convert_format=true
        shift
        ;;
      --enable-graphics )
        if [ "$script_type" = "creator" ]; then
          image_enable_graphics=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --enable-watchdog )
        if [ "$script_type" = "creator" ]; then
          image_enable_watchdog="true"
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --enable-wol )
        if [ "$script_type" = "creator" ]; then
          image_enable_wol="true"
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --enable-zswap )
        if [ "$script_type" = "creator" ]; then
          image_enable_zswap="true"
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --encryption-type )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            both | fscrypt | luks )
              image_encryption_type=$2 ;;
            * )
              cli_option_unknown_value "or unsupported encryption type '$2'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --esp-part-size )
        if [ "$script_type" = "creator" ]; then
          esp_part_size=$2
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --esp-part-type )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            fat12 | fat16 | fat32 )
              image_esp_type=$2 ;;
            * )
              cli_option_unknown_value "or unsupported ESP partition FAT type '$2'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --ethernet-module )
        if [ "$script_type" = "creator" ]; then
          image_ethernet_module="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --ethernet-vendor )
        if [ "$script_type" = "creator" ]; then
          image_ethernet_vendor="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --experimental )
        if [ "$script_type" = "creator" ]; then
          image_experimental=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --extra-cmdline-options )
        image_extra_cmdline_options="$2"
        shift 2
        ;;
      --extra-modules )
        if [ "$script_type" = "creator" ]; then
          image_extra_modules="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --firewall )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            iptables | nftables )
              image_firewall=$2 ;;
            * )
              cli_option_unknown_value "or unsupported firewall '$2'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --fs-type )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            btrfs | ext4 | f2fs | xfs )
              image_fs_type="$2" ;;
            * )
              cli_option_unknown_value "or unsupported filesystem type '$2'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --full-hostname )
        if [ "$script_type" = "creator" ]; then
          image_full_hostname="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      -h | --help )
        _help_requested=true
        shift
        ;;
      --harden )
        if [ "$script_type" = "creator" ]; then
          image_harden=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --hwrng )
        image_hwrng=true
        shift
        ;;
      --ifupdown-package )
        case $2 in
          busybox | ifupdown | ifupdown-ng )
            image_ifupdown_package=$2 ;;
          * )
            cli_option_unknown_value "unknown ifupdown package!'" ;;
        esac
        shift 2
        ;;
      --image-filename )
        filename_for_image="$2"
        shift 2
        ;;
      --images-directory )
        images_directory="$2"
        shift 2
        ;;
      --initramfs-compress )
        case $2 in
          gzip | zstd )
            image_initramfs_compress=$2 ;;
          * )
            cli_option_unknown_value "unknown initramfs compression value!'" ;;
        esac
        shift 2
        ;;
      --initramfs-tool )
        case $2 in
          mkinitfs )
            image_initramfs_tool=$2 ;;
          * )
            cli_option_unknown_value "unknown initramfs tool!'" ;;
        esac
        shift 2
        ;;
      --insecure )
        if [ "$script_type" = "creator" ]; then
          image_insecure=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --ipv4only )
        if [ "$script_type" = "creator" ]; then
          image_disable_ipv6=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --ipv6only )
        if [ "$script_type" = "creator" ]; then
          image_disable_ipv4=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --ipv6-type )
        case $2 in
          dhcp | slaac | static )
            image_ipv6_type=$2 ;;
          * )
            cli_option_unknown_value "kernel type '$2', can only be 'dhcp', 'slaac', or 'static'" ;;
        esac
        shift 2
        ;;
      --kernel-type )
        case $2 in
          normal | edge )
            image_kernel_type=$2 ;;
          * )
            cli_option_unknown_value "kernel type '$2', can only be 'edge' or 'normal'" ;;
        esac
        shift 2
        ;;
      --keyboard-type )
        case $2 in
          generic | hyperv | ps2 | usb )
            image_keyboard_type="$2" ;;
          * )
            cli_option_unknown_value "keyboard type '$2', can only be 'generic', 'hyperv', 'ps2', or 'usb'" ;;
        esac
        shift 2
        ;;
      --keymap )
        image_keymap="$2"
        shift 2
        ;;
      --local-repo )
        local_alpine_repository="$2"
        shift 2
        ;;
      --local-repo-sig-file )
        local_repo_signature_file="$2"
        shift 2
        ;;
      --locale )
        image_locale="$2"
        if [ "${image_locale%%.UTF-8}" = "$image_locale" ]; then
          # Append ".UTF-8" if not present
          image_locale="${image_locale}.UTF-8"
        fi
        shift 2
        ;;
      --login-package )
        case $2 in
          busybox | shadow | util-linux )
            image_login_package="$2" ;;
          * )
            cli_option_unknown_value "login package '$2', can only be 'busybox', 'shadow', or 'util-linux'" ;;
        esac
        shift 2
        ;;
      --luks-cipher )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            adiantum )
              image_luks_cipher=$2 ;;
            typical )
              image_luks_cipher="$CADI_DEFAULT_LUKS_CIPHER" ;;
            * )
              cli_option_unknown_value "or unsupported LUKS cipher type '$2'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --luks-passphrase )
        if [ "$script_type" = "creator" ]; then
          image_luks_passphrase="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --luks-remote-unlock )
        if [ "$script_type" = "creator" ]; then
          image_encryption_type="luks"
          luks_remote_unlock_enabled=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --luks-remote-unlock-network-module )
        if [ "$script_type" = "creator" ]; then
          luks_remote_unlock_network_module="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --luks-remote-unlock-ssh-port )
        if [ "$script_type" = "creator" ]; then
          luks_remote_unlock_ssh_port="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --luks-remote-unlock-static-gateway )
        if [ "$script_type" = "creator" ]; then
          luks_remote_unlock_static_gateway="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --luks-remote-unlock-static-interface )
        if [ "$script_type" = "creator" ]; then
          luks_remote_unlock_static_interface="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --luks-remote-unlock-static-ip )
        if [ "$script_type" = "creator" ]; then
          luks_remote_unlock_static_ip="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --luks-remote-unlock-static-netmask )
        if [ "$script_type" = "creator" ]; then
          luks_remote_unlock_static_netmask="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --lvm )
        if [ "$script_type" = "creator" ]; then
          image_lvm_rootfs=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --mirror )
        alpine_mirror_site="$2"
        shift 2
        ;;
      --no-console-user )
        if [ "$script_type" = "creator" ]; then
         image_no_console_user=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --no-grub-luks-encryption )
        if [ "$script_type" = "creator" ]; then
          image_no_grub_luks_fde_encryption=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --ntp-pools )
        image_ntp_pools="$2"
        shift 2
        ;;
      --ntp-servers )
        image_ntp_servers="$2"
        shift 2
        ;;
      --ntp-use )
        case $2 in
          none | pools | ptp | servers | servers_and_pools )
            image_ntp_use=$2 ;;
          * )
            cli_option_unknown_value "NTP use '$2'" ;;
        esac
        shift 2
        ;;
      --os-device-media )
        case $2 in
          disk | flash | sdcard | ssd )
            image_os_device_media=$2 ;;
          * )
            cli_option_unknown_value "os device media '$2'" ;;
        esac
        shift 2
        ;;
      --os-device-sector-size )
        case $2 in
          512 | 4096 )
            image_os_device_sector_size=$2 ;;
          * )
            cli_option_unknown_value "os device sector size '$2'" ;;
        esac
        shift 2
        ;;
      --os-device-type )
        case $2 in
          generic | nvme | sata | scsi | sd | usb | virtio-blk | virtio-scsi )
            image_os_device_type=$2 ;;
          * )
            cli_option_unknown_value "os device type '$2'" ;;
        esac
        shift 2
        ;;
      --output-chroot-script )
        image_output_chroot_script=true
        shift
        ;;
      --pam )
        image_enable_pam=true
        shift
        ;;
      --partitioning )
        case $2 in
          gpt | mbr | unpartitioned )
            image_os_partitioning_type=$2 ;;
          * )
            cli_option_unknown_value "partitioning type '$2'" ;;
        esac
        shift 2
        ;;
      --password )
        image_default_user_password="$2"
        shift 2
        ;;
      --physical )
        if [ "$script_type" = "creator" ]; then
          image_class="physical"
          if [ -d "${script_dir}/definitions/physical/$2" ] && \
             [ -e "${script_dir}/definitions/physical/$2/defines" ]; then
            image_physical_type=$2
          else
            cli_option_unknown_value "physical machine type '$2'"
          fi
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --ramdisk-directory )
        ramdisk_directory="$2"
        shift 2
        ;;
      --release )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            3.13 | 3.14 | 3.15 | 3.16 | 3.17 | 3.18 )
              image_alpine_release=v$2 ;;
            edge | edge-special )
              image_alpine_release=$2 ;;
            * )
              cli_option_unknown_value "or unsupported Alpine release '$2'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --rootfs-size )
        override_rootfs_size="$2"
        shift 2
        ;;
      --rpi-poe-hat )
        if [ "$script_type" = "creator" ]; then
          rpi_use_poe_hat=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --rpi-rtc )
        if [ "$script_type" = "creator" ]; then
          rpi_use_rtc=true
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --script-filename )
        generated_script_filename="$2"
        shift 2
        ;;
      --script-host-arch )
        case $2 in
          aarch64 | armv7 | x86 | x86_64 | all )
              image_script_host_arch="$2" ;;
            * )
              cli_option_unknown_value "script host OS '$2', must be either 'aarch64', 'armv7', 'x86', or 'x86_64'" ;;
        esac
        shift 2
        ;;
      --script-host-os )
        case $2 in
          alpine | debian | ubuntu | all )
              image_script_host_os="$2" ;;
            * )
              cli_option_unknown_value "script host OS '$2', must be either 'alpine', 'debian', or 'ubuntu'" ;;
        esac
        shift 2
        ;;

      --serial-console-speed )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            '9600' | '19200' | '38400' | '57600' | '115200' )
              image_serial_console_port_speed="$2" ;;
            * )
              cli_option_unknown_value "serial console speed '$2', must be either '9600', '19200', '38400', '57600' or '115200'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --short-hostname )
        if [ "$script_type" = "creator" ]; then
          image_short_hostname="$2"
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --ssh-key-types )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            'ed25519' | 'ed25519+rsa' )
              image_ssh_keytypes="$2" ;;
            * )
              cli_option_unknown_value "SSH host key type '$2', must be either 'ed25519' or 'ed25519+rsa'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --ssh-public-key )
        if [ "$script_type" = "creator" ]; then
          if [ -f "$2" ]; then
            ssh_public_key=$(cat "$2")
          else
            error_message "SSH keyfile '$2' not found"
          fi
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --ssh-server )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            dropbear | openssh | tinyssh )
              image_ssh_server=$2 ;;
            * )
              cli_option_unknown_value "SSH server software '$2', must be one of 'dropbear', 'openssh', or 'tinyssh'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --swap-file-size )
        if [ "$script_type" = "creator" ]; then
          image_swap_file_size=$2
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --swap-partition-size )
        if [ "$script_type" = "creator" ]; then
          image_swap_partition_size=$2
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --syslogd )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            busybox | rsyslog )
              image_syslog_server=$2 ;;
            * )
              cli_option_unknown_value "Syslog server software '$2', must be one of 'busybox', or 'rsyslog'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --timezone )
        image_timezone=$2
        shift 2
        ;;
      --use-ramdisk )
        use_ramdisk=true
        shift
        ;;
      --user-management )
        if [ "$script_type" = "creator" ]; then
          case $2 in
            busybox | shadow )
              image_user_management=$2 ;;
            * )
              echo
              cli_option_unknown_value "user management by '$2'" ;;
          esac
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --username )
        if [ "$script_type" = "creator" ]; then
          image_admin_username=$2
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      --utmp )
        if [ "$script_type" = "creator" ]; then
          image_enable_utmp="true"
        else
          cli_option_not_handled
        fi
        shift
        ;;
      --virtual )
        if [ "$script_type" = "creator" ]; then
          image_class="virtual"
          if [ -d "${script_dir}/definitions/virtual/$2" ] && \
             [ -e "${script_dir}/definitions/virtual/$2/defines" ]; then
            image_vm_type=$2
          else
            cli_option_unknown_value "virtual machine type '$2'"
          fi
        else
          cli_option_not_handled
        fi
        shift 2
        ;;
      -- )
        shift
        break
        ;;
      * )
        error_message "Unknown option '$1'!"
        ;;
    esac
  done

  if [ $_help_requested = true ]; then
    usage
    exit 0
  fi
}


#
# Help text
#
usage() {
  printf '\nUsage: %s [ options ]\n' "$0"
  printf '\nWhen called with no options is equivalent to:\n'
  printf '\n  %s \\\n' "$0"
  printf '    --arch x86_64 \\\n'
  printf '    --release edge \\\n'
  printf '    --bootloader syslinux \\\n'
  printf '    --virtual qemu\n'
  printf '\nOptions:\n\n'
  option_help "--acpi-power-method < button | tiny-power-button >" "Whether to use the typical 'button' kernel module together with acpid or 'tiny-power-button' kernel module only for powering off machines."
  if [ -n "$image_experimental" ]; then
    option_help "--add-directory-contents < directory-path >" "Experimental. Directory from which to recursively copy all files from into the generated disk image."
  fi
  option_help "--add-packages '< packages list >'" "A space or comma separated list of additional packages to install."
  option_help "--apk-static-url < url >" "Base url to download statically compiled APK tool from. Defaults to $CADI_APK_STATIC_URL"
  option_help "--apk-static-version < version >" "Version of the statically compiled APK tool to download/use. Defaults to v$CADI_APK_STATIC_VERSION"
  option_help "--arch < aarch64 | armv7 | x86 | x86_64 >" "The default value is selected based on particular cloud/physical/virtual machine type."
  option_help "--auth-control < doas | sudo | both >" "The method used by normal users to run privileged commands. Defaults to 'sudo' for Alpine releases prior to v3.15, and to '$CADI_DEFAULT_AUTH_CONTROL' for v3.15 onwards."
  option_help "--barebones" "Disk image with no bells and whistles."
  if [ -n "$image_experimental" ]; then
    option_help "--boot-by-device" "Experimental. Use device/partition names rather than UUIDs in /etc/fstab and bootloader to refer to filesystems."
  fi
  option_help "--boot-part-size < size in MiB >" "Specify the size of a separate boot partition."
  if [ -n "$image_experimental" ]; then
    option_help "--bootchart" "Experimental. Enables bootchart creation during boot."
  fi
  option_help "--bootloader < grub | limine | syslinux >" "Not relevant for RPI physical machines."
  option_help "--bootloader-password < password >" "Specify password to lock GRUB or Syslinux menu with. Not relevant for RPI physical machines."
  option_help "--boottype < bios | uefi >" "The default value depends on the CPU arch and the machine type. Not relevant for RPI physical machines."
  option_help "--chroot-directory < directory >" "Temporary directory to use for building the Alpine image. Defaults to './chroot'."
  if [ -z "$image_class" ] || [ "$image_class" = "cloud" ]; then
    _help_text="Valid values are: <"
    for _cloud in "${script_dir}"/definitions/cloud/*/defines; do
      _help_text="$_help_text $(basename "$(echo "$_cloud" | sed -Ee 's|(.*)/defines|\1|')") |"
    done
    _help_text="$(echo "$_help_text" | sed -Ee 's/^(.*) \|$/\1/')"
    option_help "--cloud <cloud type>" "$_help_text >"
  fi
  option_help "--cloud-configuration-type < cloud-init | none >" "Which method to use for configuring machines."
  if [ -n "$image_experimental" ]; then
    option_help "--cloud-init-datasources" "Comma separate list of Data Sources to enable."
  fi
  if [ -n "$image_experimental" ] && \
     { [ -z "$image_class" ] || [ "$image_class" = "cloud" ] || [ "$image_class" = "virtual" ]; }; then
    option_help "--cloud-init-seed-define < cmdline | config | dhcp >" "Whether to add a reference to a seed Url to the kernel cmdline, add a reference to a seed Url to the cloud-init config.cfg file, or create a cloud-init NoCloud 'seed' file specifying DHCP networking."
    option_help "--cloud-init-seed-url < url >" "Base url for cloud-init NoCloud DataSource to download meta-data/user-data YAML configuration from."
  fi
  option_help "--console-device-type < hypervisor | normal | normal_and_serial | serial >" "The type of device used for the console."
  option_help "--console-graphics-driver < name of driver >" "For a graphics-based console the driver to use. Defaults to 'simpledrm'."
  option_help "--console-user < username >" "Username for the console-only (non-SSH) user account created unless '--no-console-user' is specified. Defaults to '$CADI_DEFAULT_CONSOLE_USER_ACCOUNT'"
  option_help "--console-user-password < password >" "Password for console-only (non-SSH) user account. If this option is not specified then the account password is locked."
  option_help "--cpu-governor < ondemand | powersave | schedutil >" "Select which CPU governor to use."
  option_help "--cpu-vendor < amd | intel >" "Used to decide if only AMD or Intel relevant microcode is installed and whether vendor-specific CPU kernel modules are included in the initramfs."
  option_help "--create-boot-partition" "Create a separate /boot partition, even if not required."
  option_help "--create-sbom" "Create a Software Bill Of Materials (SBOM) for the disk image."
  if [ -n "$image_experimental" ]; then
    option_help "--cron < busybox | ??? >" "Cron daemon software to use."
  fi
  option_help "--debug" "Enable debug-specific logging."
  option_help "--device-management < mdev | mdevd | udev >" "Select whether to use mdev, mdevd, or udev. If option not specified then default to '$CADI_DEFAULT_DEVICE_MANAGEMENT_TYPE'"
  option_help "--dhcp-client < dhclient | dhcpcd | udhcpc >" "Specify the DHCP Client software to use."
  if [ -z "$image_class" ] || [ "$image_class" = "cloud" ]; then
    option_help "--disable-cloud-provider-cli" "When creating cloud images do not install Cloud Provider specific CLI package(s) such as aws-cli."
  fi
  if [ -z "$image_class" ] || [ "$image_class" = "virtual" ]; then
    option_help "--disable-hypervisor-agent" "When creating virtual machine images for which agent software is available (i.e. Qemu, VirtualBox, and VMware) do not install and enable the agent."
  fi
  option_help "--disable-optimisation" "Disable optimisation of the image."
  if [ -n "$image_experimental" ]; then
    option_help "--disk-resize-free-percent < percent >" "Only for physical machines. For Flash/SSDs/SDcard devices the percent of disk to leave unallocated when root is resized. '10' is a reasonable value."
  fi
  option_help "--do-not-convert-image" "No not convert disk image from RAW format to another format."
  option_help "--enable-graphics" "Enable graphics - on BIOS this will use graphics mode (and load FB/DRM KMS kernel modules) rather then VGA text mode. Does not apply for UEFI (as it has no VGA text mode)."
  if [ -z "$image_class" ] || [ "$image_class" = "physical" ]; then
    option_help "--enable-watchdog" "Enable hardware watchdog support."
  fi
  option_help "--enable-zswap" "Enable ZSWAP support."
  option_help "--encryption-type < both | fscrypt | luks >" "Enable the specified encryption for the rootfs."
  option_help "--esp-part-size < size in MiB >" "For UEFI / Secure UEFI only. Specify the size of the ESP partition."
  option_help "--esp-part-type < fat12 | fat16 | fat32 >" "For UEFI / Secure UEFI only. Specify the type of FAT partition to use (which affects the default size of the partition)."
  option_help "--ethernet-module < module-name >" "Indicated the ethernet module to be loaded/used by the machine. When remote unlocking of encrypted filesystem is enabled this parameter is also required to specific the relevant kernel module for the ethernet device as the driver must be included in the initramfs as (obviously) it cannot be loaded from the (still encrypted at that point) rootfs."
  option_help "--ethernet-vendor < vendor name >" "Indicated the vendor of the ethernet module soo that the relevant firmware package can be installed."
  option_help "--experimental" "Enable experimental options."
  option_help "--extra-cmdline-options '< options >'" "Extra entries to add to the /proc/cmdline passed by bootloader to the initramfs and kernel."
  option_help "--extra-modules '< module ( < module > )'" "Space-separated list of extra kernel modules to load."
  if [ -n "$image_experimental" ]; then
    option_help "--firewall < iptables | nftables >" "Experimental. Selects the firewall software to use."
  fi
  if [ -n "$image_experimental" ]; then
    option_help "--fs-type < btrfs | ext4 | f2fs | xfs >" "Selects the filesystem type to use for the rootfs."
  else
    option_help "--fs-type < ext4 | xfs >" "Selects the filesystem type to use for the rootfs."
  fi
  if [ -z "$image_class" ] || [ "$image_class" = "physical" ]; then
    option_help "--full-hostname < hostname >" "Only for physical machines. The hostname, including domain, to place in the generated cloud-init user-data YAML file."
  fi
  option_help "--harden" "Disables kernel module loading, delete unnecessary users & groups, disables unnecessary kernel modules, sets up basic firewall rules."
  option_help "--hwrng" "Machine has a hardware RNG."
  option_help "--ifupdown-package < busybox | ifupdown | ifupdown-ng" "Which Alpine package used to provide ifup and ipdown utilities."
  option_help "--image-filename < filename >" "Filename to use for the created Alpine disk image."
  option_help "--images-directory < directory >" "The directory where to store the created disk image. Defaults to '$CADI_DEFAULT_IMAGES_DIRECTORY'."
  option_help "--initramfs-compress '< gzip | zstd >'" "Chooses which method is used to compress the initramfs file. Defaults to gzip."
  if [ -n "$image_experimental" ]; then
    option_help "--initramfs-tool '< mkinitfs >'" "Experimental. Chooses which tool is used to create and run the initramfs. Defaults to mkinitfs."
  fi
  if [ -n "$image_experimental" ]; then
    option_help "--insecure" "Experimental. Permit password-based access via SSH."
  fi
  option_help "--ipv4only" "Do not enable IPv6 in the created disk image."
  option_help "--ipv6only" "Do not enable IPv4 in the created disk image."
  if [ -n "$image_experimental" ]; then
    option_help "--ipv6-type '< dhcp | slaac | static >'" "Experimental. Indicates how an IPv6 address should be obtained. Defaults to 'dhcp'."
  fi
  if [ -n "$image_experimental" ]; then
    option_help "--kernel-type '< normal | edge >'" "Experimental. For Alpine Edge images selects whether to use linux-lts/linux-virt kernel or linux-edge/linux-edge4virt kernel."
  fi
  if [ -z "$image_class" ] || [ "$image_class" != "physical" ] || \
     [ "$image_physical_type" = "pc" ]; then
    option_help "--keyboard-type '< generic | hyperv | ps2 | usb >'" "Indicate the type of physical console keyboard. Defaults to 'generic' for x86/x86_64 machines in many cases, however for aarch64 machines defaults to 'usb'."
  fi
  option_help "--keymap '< keymap >'" "Defaults to '$CADI_DEFAULT_KEYMAP'."
  option_help "--local-repo < url >" "Local Alpine repository for unofficial Alpine packages."
  option_help "--local-repo-sig-file < filename >" "Signature file used to sign packages in local Alpine repository."
  option_help "--locale < locale >" "Defaults to '$CADI_DEFAULT_LOCALE'."
  option_help "--login-package '< busybox | shadow | util-linux >'" "Select which version of the login program to use. Defaults to '$CADI_DEFAULT_LOGIN_PACKAGE'."
  option_help "--luks-cipher < adiantum | typical >" "The cipher to use for LUKS encrypted filesystem. Adiantum may be more suitable for Arm systems. Defaults to 'typical' (actual value is $CADI_DEFAULT_LUKS_CIPHER) if not specified."
  option_help "--luks-passphrase < passphrase >" "The passphrase to use for LUKS encrypted filesystem. Defaults to '$CADI_DEFAULT_LUKS_PASSPHRASE' if not specified."
  if [ -n "$image_experimental" ]; then
    option_help "--luks-remote-unlock" "Experimental. Enable functionality for the remote-unlocking of LUKS encrypted root filesystem at boot time via SSH."
    option_help "--luks-remote-unlock-network-module < kernel module name >" "Experimental. Specifies the name of the network device kernel module to be loaded."
    option_help "--luks-remote-unlock-ssh-port < port number >" "Experimental. Specifies the TCP port that the temporary SSH daemon should listen on. If not specified then defaults to '22'."
    option_help "--luks-remote-unlock-static-gateway < IP address >" "Experimental. Specifies the IP address of the local router. Only applicable when '--luks-unlock-static-ip' has also been specified."
    option_help "--luks-remote-unlock-static-interface < interface name >" "Experimental. Specifies the network interface name. Only applicable when '--luks-remote-unlock-static-ip' has also been specified."
    option_help "--luks-remote-unlock-static-ip < IP address >" "Experimental. Specifies the (temporary) IP address for the machine to use for remote unlock functionality. If not specified then DHCP is used instead."
    option_help "--luks-remote-unlock-static-netmask < netmask >" "Experimental. Specifies the network netmask to use. Only applicable when '--luks-remote-unlock-static-ip' has also been specified."
  fi
  option_help "--lvm" "Use LVM for root filesystem. If '--encrypt' is also specified then create LVM-on-LUKS filesystem."
  option_help "--mirror < mirror url >" "URL of the Alpine mirror site to use. Defaults to $CADI_DEFAULT_MIRROR_SITE"
  option_help "--no-console-user" "Do not create a user account for console-only (non-SSH) access."
  option_help "--no-grub-luks-encryption" "Do not enable GRUB's own LUKS handling (distinct from whether LUKS is in use in general) which means that /boot must then be unencrypted and so /boot will be created as a separate partition from the rootfs."
  option_help "--ntp-pools < comma separated list of NTP pool machines >" "Synch with these NTP pool machines."
  option_help "--ntp-servers < comma separated list of NTP servers >" "Synch with these NTP servers."
  option_help "--ntp-use < none | pools | servers | servers_and_pools >" "Which form of NTP sync to use."
  option_help "--os-device-media < disk | flash | sd | ssd >" "The storage media type of the device that disk image will be installed on."
  if [ -n "$image_experimental" ]; then
    option_help "--os-device-sector-size < 512 | 4096 >" "The sector size, in bytes, of the device that disk image will be installed on. This should reflect the logical sector size, rather than physical sector size, of the device (some devices are 512/512, some 512/4097, others 4096/4096). Defaults to 512."
  fi
  option_help "--os-device-type < nvme | sata | scsi | sd | usb | virtio-blk | virtio-scsi >" "The interface type of the device that disk image will be installed on."
  if [ -n "$image_experimental" ]; then
    option_help "--pam" "Experimental. Enable PAM support."
  fi
  option_help "--password < password >" "Password for default user created upon 1st boot. If this option is not specified then the account password is locked (but SSH access via SSH key, if configured using '--ssh-public-key', is still possible)."
  if [ -z "$image_class" ] || [ "$image_class" = "physical" ]; then
    _help_text="Valid values are: <"
    for _physical in "${script_dir}"/definitions/physical/*/defines; do
      _help_text="$_help_text $(basename "$(echo "$_physical" | sed -Ee 's|(.*)/defines|\1|')") |"
    done
    _help_text="$(echo "$_help_text" | sed -Ee 's/^(.*) \|$/\1/')"
    option_help "--physical <physical type>" "$_help_text >"
  fi
  option_help "--ramdisk-directory < directory >" "When '--use-ramdisk' is also specified this value indicates the directory in which to store the ramdisk file."
  option_help "--release < 3.13 | 3.14 | 3.15 | 3.16 | 3.17 | 3.18 | edge >" "Which Alpine Release to use for the disk image. If not specified then defaults to 'edge'."
  option_help "--rootfs-size < size in MiB >" "Specify the size of the root partition, override the scripts' built-in rootfs sizing logic. Useful in conjunction with '--add-packages' where more space is needed."
  if [ -z "$image_class" ] || \
     { [ "$image_class" = "physical" ] && [ "$(expr "$image_physical_type" : '.*rpi.*')" -gt 0 ]; }; then
    option_help "--rpi-poe-hat" "When creating an image for a Raspberry Pi (i.e. '--physical rpi2') indicates that the RPI has a Raspberry Pi official PoE HAT fitted."
    option_help "--rpi-rtc" "When creating an image for a Raspberry Pi (i.e. '--physical rpi2') indicates that the RPI has a hardware RTC fitted."
  fi
  option_help "--script-filename < filename >" "MANDATORY. The filename of the script to be created."
  option_help "--script-host-arch < aarch64 | armv7 | x86 | x86_64 >" "Generated script is intended to be run on this type of CPU architecture."
  option_help "--script-host-os < alpine | debian | ubuntu >" "Generated script is intended to be run on this type of Linux distro."
  option_help "--serial-console-speed < speed >" "The speed of the serial port used as console."
  if [ -z "$image_class" ] || [ "$image_class" = "physical" ]; then
    option_help "--short-hostname < hostname >" "Only for physical machines. The hostname, without domain, to place in the generated cloud-init user-data YAML file."
  fi
  option_help "--ssh-key-types < key types >" "SSH host key types to be used. Valid values are 'ed25519' or 'ed25519+rsa'."
  if [ -z "$image_class" ] || [ "$image_class" = "physical" ]; then
    option_help "--ssh-public-key < filename >" "Only for physical machines. File containing the SSH public key that is permitted to log in as the default user and also, when remote LUKS encryption unlocking is enabled, to connect to the temporary SSH server used for unlocking of disk encryption."
  fi
  if [ -n "$image_experimental" ]; then
    option_help "--ssh-server < dropbear | openssh | tinyssh >" "Experimental. SSH server software to use."
  fi
  option_help "--swap-file-size < MB >" "Create a swap file of the specified size."
  option_help "--swap-partition-size < MB >" "Create a swap partition of the specified size."
  option_help "--syslogd < busybox | rsyslog >" "Syslog server software to use."
  if [ -z "$image_class" ] || [ "$image_class" = "physical" ]; then
    option_help "--timezone < zonename >" "Only for physical machines. Timezone to place in the generated cloud-init user-data YAML file. Example value: 'Europe/London'."
  fi
  option_help "--use-ramdisk" "Indicates to use a (temporary) ramdisk when creating the disk image to speed up creation and/or to reduce disk writes (i.e. on SSD)."
  option_help "--user-management < busybox | shadow >" "Which package for cloud-init to use for creating/deleting users and groups. Defaults to '$CADI_DEFAULT_USER_MANAGEMENT_PACKAGE'."
  option_help "--username <username>" "Name of the default account to create upon 1st boot. Defaults to '$CADI_DEFAULT_ADMIN_USERNAME'."
  option_help "--utmp" "Enable UTMP support."
  if [ -z "$image_class" ] || [ "$image_class" = "virtual" ]; then
    _help_text="Valid values are: <"
    for _virtual in "${script_dir}"/definitions/virtual/*/defines; do
      _help_text="$_help_text $(basename "$(echo "$_virtual" | sed -Ee 's|(.*)/defines|\1|')") |"
    done
    _help_text="$(echo "$_help_text" | sed -Ee 's/^(.*) \|$/\1/')"
    option_help "--virtual <virtual type>" "$_help_text >"
  fi
}


#
# Check that the combination of CLI options make sense
#
validate_cli_options() {
  local _script_directory

  image_additional_packages_size=0

  case $image_class in
    cloud )
      class_type_description="cloud provider $image_cloud_type"
      image_class_subtype=$image_cloud_type
      ;;
    physical )
      class_type_description="machine $image_physical_type"
      image_class_subtype=$image_physical_type
      ;;
    virtual )
      class_type_description="hypervisor $image_vm_type"
      image_class_subtype=$image_vm_type
      ;;
  esac
  image_env_ref="${image_class}-${image_class_subtype}"


  if [ -z "$generated_script_filename" ]; then
    error_message "You must specify a filename for the script to be created!"
  fi

  : "${image_script_host_arch:=all}"
  : "${image_script_host_os:=$(detect_host_os)}"

  : "${image_output_chroot_script:=false}"

  run_script="$generated_script_filename"
  # Create the directory for script if it doesn't already exist
  _script_directory="$(dirname "$generated_script_filename")"
  if [ ! -d "$_script_directory" ]; then
    mkdir -p "$_script_directory"
  fi

  if [ -n "$debug_sizing_enabled" ]; then
    # Initialise disk sizing debug file
    sizing_debug="./$(basename -s .sh "$run_script").sizing-debug"
    :> "$sizing_debug"
  fi

  basic_settings

  default_settings


  # Partition sizing
  #------------------

  # ESP partition
  case $image_boot_type in
    secure-uefi | uefi )
      # Set if not already defined in cloud/physical/virtual defaults
      : "${general_uefi_part_size:=$(general_uefi_part_sizing)}" ;;
  esac

  # Set ESP partition size
  case $image_boot_type in
    secure-uefi | uefi )
      image_uefi_part_size=$(calculate_uefi_part_size) ;;
  esac


  # Console
  #---------

  case $image_console_device_type in
    normal | normal_and_serial )
      case $image_arch in
        aarch64 )
          # aarch64 machines have USB keyboard
          : "${image_keyboard_type:=usb}" ;;
        * )
          : "${image_keyboard_type:=generic}" ;;
      esac
      ;;
  esac

  # Set default serial console speed
  case $image_console_device_type in
    serial | normal_and_serial | generic )
      : "${image_serial_console_port_speed:=$CADI_DEFAULT_SERIAL_CONSOLE_PORT_SPEED}" ;;
  esac


  # User accounts
  #---------------

  # Admin username
  : "${image_admin_username:=$CADI_DEFAULT_ADMIN_USERNAME}"

  # Console-only user
  : "${image_no_console_user:=false}"
  if [ "$image_no_console_user" = "false" ]; then
    : "${image_console_user:=$CADI_DEFAULT_CONSOLE_USER_ACCOUNT}"
    : "${image_console_only_group:=$CADI_DEFAULT_CONSOLE_ONLY_GROUP}"
  fi

  # Whether to enable Bootchart
  if [ -n "$image_bootchart" ] && [ -z "$image_experimental" ]; then
    error_message "Bootchart support is an experimental option!"
  fi

  # DHCP client
  if [ -z "$image_dhcp_client" ]; then
    if [ -n "$CADI_DEFAULT_DHCP_CLIENT" ] && \
       [ -n "$CADI_SUPPORTED_DHCP_CLIENTS" ] && \
       is_in_comma_list "$CADI_SUPPORTED_DHCP_CLIENTS" "$CADI_DEFAULT_DHCP_CLIENT"; then
      image_dhcp_client="$CADI_DEFAULT_DHCP_CLIENT"
    elif [ -n "$CADI_SUPPORTED_DHCP_CLIENTS" ]; then
      if is_in_comma_list "$CADI_SUPPORTED_DHCP_CLIENTS" "$CADI_DEFAULT_DHCP_SOFTWARE"; then
        image_dhcp_client="$CADI_DEFAULT_DHCP_SOFTWARE"
      else
        image_dhcp_client="$(first_entry_in_comma_list "$CADI_SUPPORTED_DHCP_CLIENTS")"
      fi
    else
      error_message "Unable to decide which DHCP client to use!"
    fi
  elif ! is_in_comma_list "$CADI_SUPPORTED_DHCP_CLIENTS" "$image_dhcp_client"; then
    error_message "DHCP client is not supported by $image_class!"
  fi

  # Doas
  if [ -z "$image_auth_control" ]; then
    case $image_alpine_release in
      v3.13 | v3.14 )
        image_auth_control="sudo" ;;
      * )
        image_auth_control="$CADI_DEFAULT_AUTH_CONTROL" ;;
    esac
  elif [ "$image_auth_control" = "doas" ] || [ "$image_auth_control" = "both" ]; then
    case $image_alpine_release in
      v3.13 | v3.14 )
        error_message "Alpine v3.13 and v3.14 do not work correctly with doas and cloud-init. Please use sudo only." ;;
    esac
  fi

  # Firewall software
  : "${image_firewall:=$CADI_DEFAULT_FIREWALL}"

  # Tools for creating/updating initramfs
  if [ -z "$image_initramfs_tool" ]; then
    image_initramfs_tool="mkinitfs"
  else
    case $image_initramfs_tool in
      booster )
        case $image_alpine_release in
          v3.13 | v3.14 | v3.15 | v3.16 )
            error_message "Booster is not available for this version of Alpine." ;;
          * )
            : ;;
        esac
        ;;
      dracut )
        case $image_alpine_release in
          edge | edge-special )
            : ;;
          * )
            error_message "Dracut is not available for this version of Alpine." ;;
        esac
        ;;
    esac
  fi

  # IPv6 type (DHCPv6 / SLAAC)
  : "${image_ipv6_type:=$CADI_DEFAULT_IPV6_TYPE}"

  # Keymap
  : "${image_keymap:=$CADI_DEFAULT_KEYMAP}"

  # Locale
  : "${image_locale:=$CADI_DEFAULT_LOCALE}"

  # If mdev/mdevd/udev not specified, use default.
  : "${image_device_management_type:=$CADI_DEFAULT_DEVICE_MANAGEMENT_TYPE}"
  case $image_device_management in
    mdevd )
      case $image_alpine_release in
        v3.13 | v3.14 | v3.15 | v3.16 )
          error_message "mdevd is not supported on this Alpine release!" ;;
        * )
          : ;;
      esac
      ;;
  esac
  case $image_device_management in
    mdev | mdevd )
      case $image_initramfs_tool in
        booster | dracut )
          error_message "$image_initramfs_tool uses 'udev' and cannot be used with '$image_device_management'!" ;;
      esac
      ;;
  esac

  #
  : "${image_resize_free_percent:=$CADI_DEFAULT_DISK_RESIZE_FREE_PERCENT}"

  # If SSH host key types not specified then assume default
  : "${image_ssh_keytypes:=$CADI_DEFAULT_SSH_KEYTYPES}"

  # Log filename is based on image filename
  logs_output_file="$(change_filename_extension "$filename_for_image" "log")"

  # Encryption
  case $image_encryption_type in
    both | luks )
      : "${image_luks_cipher:=$CADI_DEFAULT_LUKS_CIPHER}"
      : "${image_luks_passphrase:=$CADI_DEFAULT_LUKS_PASSPHRASE}"
      ;;
  esac

  # Vendor of the ethernet NIC
  : "${image_ethernet_vendor:=all}"
}
