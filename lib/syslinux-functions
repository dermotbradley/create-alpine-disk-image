#!/bin/sh
# shellcheck disable=SC2039

#############################################################################
##
##  syslinux-functions
##
##  Copyright 2021-2023 Dermot Bradley <dermot_bradley@yahoo.com>
##
##  Licensed via GPL version 2.0
##
#############################################################################


#
# Check if Syslinux supports booting from the selected filesystem type.
#
check_syslinux_supports_fs() {
  case $image_boot_type in
    bios )
      case $image_fs_type in
        btrfs | ext4 | xfs )
          : ;;
        * )
          error_message \
            "Syslinux bootloader does not support booting from $image_fs_type filesystem!"
          ;;
      esac
      ;;
  esac
}


#
# Check if Syslinux supports booting from LUKS.
#
check_syslinux_supports_luks() {
  error_message "Syslinux bootloader does not support booting from LUKS!"
}


#
# Check if Syslinux supports booting from LVM.
#
check_syslinux_supports_lvm() {
  # Syslinux does support booting from LVM
  :
}


#
# Configure Syslinux.
#
configure_bootloader_syslinux() {
  local _cmdline _modules_list

  _cmdline="$base_cmdline"
 
  case $image_alpine_release in
    v3.13 | v3.14 | v3.15 | v3.16 )
      # Ensure that USB keyboard works when in initramfs
      case $image_keyboard_type in
        usb | generic )
          # It is important to load EHCI before OHCI/UHCI as otherwise
          # a kernel warning will appear in 'dmesg' output:
          #   Warning! ehci_hcd should always be loaded before uhci_hcd and ohci_hcd, not after
          _modules_list="xhci-pci,ehci-pci"
          if [ -z "$image_cpu_vendor" ] || \
             [ "$image_cpu_vendor" = "amd" ]; then
            _modules_list="${_modules_list},ohci-pci"
          fi
          if [ -z "$image_cpu_vendor" ] || \
             [ "$image_cpu_vendor" = "intel" ]; then
            _modules_list="${_modules_list},uhci-hcd"
          fi
          _modules_list="${_modules_list},usbhid,hid-generic"
          ;;
      esac
      ;;
    * )
      # mkinitfs' init takes care of USB keyboards
      : ;;
  esac

  cat <<-'EOF' >> "$run_script"
	
	write_log "Configuring Syslinux"
	{
	  mkdir -p /boot
	EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	
	  # Debug
	  cp /etc/update-extlinux.conf /etc/update-extlinux.conf-orig
	EOF
  fi

  cat <<-EOF >> "$run_script"
	
	  write_log "Updating update-extlinux.conf" 2
	  {
	    kernel_opts="${_cmdline}"
	EOF

  if { [ "$image_encryption_type" = "both" ] || \
       [ "$image_encryption_type" = "luks" ]; }; then
    cat <<-EOF >> "$run_script"
	    fs_reference="/dev/mapper/${CADI_LUKS_DEVICE_NAME}"
	EOF
  elif [ "$image_boot_reference" = "label" ]; then
    # Use LABELs to refer to filesystems
    cat <<-EOF >> "$run_script"
	    fs_reference="LABEL=${CADI_ROOTFS_LABEL}"
	EOF
  else
    # Use UUIDs to refer to filesystems
    cat <<-'EOF' >> "$run_script"
	    fs_reference="UUID=$root_fs_uuid"
	EOF
  fi

  cat <<-EOF >> "$run_script"
	    modules="${_modules_list}"
	EOF

  cat <<-'EOF' >> "$run_script"
	    sed -i \
	      -e 's|^overwrite=(.*)$|overwrite=1|g' \
	      -e 's|^hidden=.*$|hidden=0|g' \
	      -e 's|^timeout=.*$|timeout=3|g' \
	      -e "s|^default_kernel_opts=.*$|default_kernel_opts=\"\$kernel_opts\"|g" \
	      -e "s|^root=.*$|root=\$fs_reference|g" \
	      /etc/update-extlinux.conf
	    if [ -n "\$modules" ]; then
	      sed -i -e "s|^modules=.*$|modules=\$modules|g" /etc/update-extlinux.conf
	    fi
	EOF


  case $image_console_device_type in
    serial | normal_and_serial )
      enable_syslinux_serial_console ;;
  esac

  cat <<-'EOF' >> "$run_script"
	  }
	EOF


  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	
	  # Debug
	  write_debug_log "diff update-extlinux.conf" 2
	  diff /etc/update-extlinux.conf-orig /etc/update-extlinux.conf \\
	    >> /chroot.log || true
	  rm /etc/update-extlinux.conf-orig
	  write_debug_log "update-extlinux.conf contents:" 2
	  cat /etc/update-extlinux.conf >> /chroot.log
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	}
	EOF
}


#
# Enable serial console for Syslinux.
#
enable_syslinux_serial_console() {
  cat <<-EOF >> "$run_script"
	
	    write_log "Configure Syslinux serial port and speed" 4
	    sed -i -e "s|^serial_port=.*|serial_port=${image_serial_console_port_number}|g" \\
	      -e "s|^serial_baud=.*|serial_baud=${image_serial_console_port_speed}|g" \\
	      /etc/update-extlinux.conf
	EOF

  case $image_console_device_type in
    serial )
      cat <<-'EOF' >> "$run_script"
	
	    write_log "Disable normal Syslinux console" 4
	    sed -i -e "s|^console=.*|console=0|g" /etc/update-extlinux.conf
	EOF
      ;;
  esac
}


#
# Install Syslinux onto disk.
#
install_syslinux() {
  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	
	# Debug
	cp /boot/extlinux.conf /boot/extlinux.conf-orig
	write_debug_log "/boot/extlinux.conf contents at start:"
	cat /boot/extlinux.conf >> /chroot.log
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	
	write_log "Installing Syslinux"
	{
	EOF

  case $image_boot_type in
    bios )
      cat <<-'EOF' >> "$run_script"
	  write_log "Installing BIOS MBR" 2
	  dd bs=440 count=1 conv=notrunc if=/usr/share/syslinux/mbr.bin \
	    of="$loop_device" >> /chroot.log 2>&1
	  write_log "Installing Syslinux files in /boot directory" 2
	  extlinux --install /boot/ >> /chroot.log 2>&1
	EOF

      if [ -n "$debug_enabled" ]; then
        cat <<-'EOF' >> "$run_script"
	
	  # Debug
	  write_debug_log "/boot/extlinux.conf contents after extlinux --install:"
	  cat /boot/extlinux.conf >> /chroot.log
	EOF
      fi
      ;;
  esac

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	
	  # Debug
	  write_debug_log "Before update-extlinux" 2
	  busybox ls -ltrR /boot/ >> /chroot.log
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	
	  write_log "Updating extlinux.conf file" 2
	  update-extlinux --verbose --warn-only >> /chroot.log 2>&1
	EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	
	  # Debug
	  write_debug_log "/boot/extlinux.conf contents after update-extlinux:"
	  cat /boot/extlinux.conf >> /chroot.log
	
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	  write_log "Fix permissions on extlinux.conf files" 2
	  chmod g=,o= /boot/extlinux.conf*
	EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	
	  # Debug
	  diff /boot/extlinux.conf-orig /boot/extlinux.conf >> /chroot.log || true
	  rm /boot/extlinux.conf-orig
	  write_debug_log "extlinux.conf contents:" 2
	  cat /boot/extlinux.conf >> /chroot.log
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	}
	EOF
}
