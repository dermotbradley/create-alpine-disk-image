#!/bin/sh
# shellcheck disable=SC2039

#############################################################################
##
##  kernel-module-functions
##
##  Copyright 2022-2023 Dermot Bradley <dermot_bradley@yahoo.com>
##
##  Licensed via GPL version 2.0
##
#############################################################################


#
# Disable a set of specified kernel modules
#
blacklist_list_of_kernel_modules() {
  local _modules_section=$1
  local _modules_blacklist="$2"

  cat <<-EOF >> "$run_script"
	  write_log "Blacklisting ${_modules_section} kernel modules" 2
	  {
	    cat <<-_SCRIPT_ > /etc/modprobe.d/blacklist-${_modules_section}-modules.conf
	EOF

  for MODULE_NAME in $_modules_blacklist; do
    cat <<EOF >> "$run_script"
	blacklist ${MODULE_NAME}
EOF
  done

  cat <<'EOF' >> "$run_script"
	_SCRIPT_
EOF

  cat <<-EOF >> "$run_script"
	
	    sort -u -o /etc/modprobe.d/blacklist-${_modules_section}-modules.conf \\
	      /etc/modprobe.d/blacklist-${_modules_section}-modules.conf
	EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-EOF >> "$run_script"
	
	    # Debug
	    write_debug_log "Contents of blacklist-${_modules_section}-modules.conf:" 4
	    cat /etc/modprobe.d/blacklist-${_modules_section}-modules.conf >> /chroot.log
	EOF
  fi

  cat <<-EOF >> "$run_script"
	  }
	EOF
}


#
# For the specified network driver return the actual
# name of its associated kernel module.
#
convert_network_name_to_module() {
  _driver_name="$1"

  local _network_module_name

  case $_driver_name in
    generic )
      # Add all the supported drivers
      _network_module_name="$(all_entries_in_comma_list_except "$CADI_SUPPORTED_NETWORK_DRIVERS" "generic")" ;;
    hyperv )
      _network_module_name="hv_netvsc" ;;
    virtio-net )
      _network_module_name="virtio_net" ;;
    * )
      _network_module_name="$_driver_name" ;;
  esac

  echo "$_network_module_name"
}


#
# For the specified network drivers return the actual
# name of their associated kernel modules.
#
convert_network_names_to_modules() {
  _driver_names="$1"

  local _list _list_item _network_module_names

  if [ "$_driver_names" = "generic" ]; then
    _list="$(all_entries_in_comma_list_except "$CADI_SUPPORTED_NETWORK_DRIVERS" "generic")"
  else
    _list="$_driver_names"
  fi
  while true; do
    _list_item="$(first_entry_in_comma_list "$_list")"
    case $_list_item in
      generic )
        : ;;
      * )
        if [ -n "$_network_module_names" ]; then
          _network_module_names="${_network_module_names},$(convert_network_name_to_module "${_list_item}")"
        else
          _network_module_names="$(convert_network_name_to_module "${_list_item}")"
        fi
        ;;
    esac
    if [ "${_list%,*}" = "$_list" ]; then
      # No more entries
      break
    else
      _list="${_list#$_list_item,}"
    fi
  done

  echo "$_network_module_names"
}


#
# For the specified PTP hypervisor driver return the actual
# name of its associated kernel module.
#
convert_ptp_name_to_module() {
  _driver_name="$1"

  local _ptp_module_name

  case $_driver_name in
    hyperv )
      _ptp_module_name="hv_utils" ;;
    kvm )
      _ptp_module_name="ptp_kvm" ;;
    vmware )
      _ptp_module_name="ptp_vmw" ;;
  esac

  echo "$_ptp_module_name"
}


#
# For the specified storage driver return the actual
# name of its associated kernel module.
#
convert_storage_name_to_module() {
  _driver_name="$1"

  local _storage_module_name

  case $_driver_name in
    generic )
      # Add all the supported drivers
      _storage_module_name="$(all_entries_in_comma_list_except "$CADI_SUPPORTED_STORAGE_DRIVERS" "generic")" ;;
    hyperv )
      _storage_module_name="hv_storvsc" ;;
    virtio-blk )
      _storage_module_name="virtio_blk" ;;
    virtio-scsi )
      _storage_module_name="virtio_scsi" ;;
    * )
      _storage_module_name="$_driver_name" ;;
  esac

  echo "$_storage_module_name"
}


#
# For the specified storage drivers return the actual
# name of their associated kernel modules.
#
convert_storage_names_to_modules() {
  _driver_names="$1"

  local _list _list_item _storage_module_names

  if [ "$_driver_names" = "generic" ]; then
    _list="$(all_entries_in_comma_list_except "$CADI_SUPPORTED_STORAGE_DRIVERS" "generic")"
  else
    _list="$_driver_names"
  fi
  while true; do
    _list_item="$(first_entry_in_comma_list "$_list")"
    case $_list_item in
      generic )
        : ;;
      * )
        if [ -n "$_storage_module_names" ]; then
          _storage_module_names="${_storage_module_names},$(convert_storage_name_to_module "${_list_item}")"
        else
          _storage_module_names="$(convert_storage_name_to_module "${_list_item}")"
        fi
        ;;
    esac
    if [ "${_list%,*}" = "$_list" ]; then
      # No more entries
      break
    else
      _list="${_list#$_list_item,}"
    fi
  done

  echo "$_storage_module_names"
}


#
# Create an init.d script for preventing the loading of kernel modules
#
create_module_blocking_initd() {
  cat <<'EOF' >> "$run_script"

write_log "Creating init.d script for disabling kernel module loading" 2
{
  cat <<-_SCRIPT_ > /etc/init.d/block-modules-loading
	#!/sbin/openrc-run
	
	description="Disable loading of kernel modules"
	
	depend() {
		after *
		keyword -openvz -prefix -uml -vserver -xenu -lxc
	}
	
	start() {
		ebegin "Disabling loading of kernel modules"
		sysctl -q -w kernel.modules_disabled=1
		eend $?
	}
	_SCRIPT_
  chmod a+x /etc/init.d/block-modules-loading

  write_log "Enabling init.d script" 4
  {
EOF

  add_init_d_service "block-modules-loading" "default" 4

  cat <<-'EOF' >> "$run_script"
	  } >> /chroot.log 2>&1
	EOF

  case $image_class in
    virtual )
      case $image_vm_type in
        virtualbox )
          if [ -z "$image_barebones" ]; then
            if [ -n "$debug_enabled" ]; then
              cat <<-'EOF' >> "$run_script"
	
	  # Debug
	  cp /etc/init.d/virtualbox-guest-additions \
	    /etc/init.d/virtualbox-guest-additions-orig
	EOF
            fi

            cat <<-'EOF' >> "$run_script"
	
	  # Disable the module removal upon stop as otherwise this will give an error
	  sed -i -E -e 's|^(.*/sbin/modprobe -r .*)$|#\1|g' \
	    /etc/init.d/virtualbox-guest-additions
	EOF

            if [ -n "$debug_enabled" ]; then
              cat <<-'EOF' >> "$run_script"
	
	  # Debug
	  write_debug_log "/etc/init.d/virtualbox-guest-additions differences:" 2
	  diff /etc/init.d/virtualbox-guest-additions-orig \
	    /etc/init.d/virtualbox-guest-additions >> /chroot.log || true
	  rm /etc/init.d/virtualbox-guest-additions-orig
	EOF
            fi
          fi
          ;;
      esac
      ;;
  esac

  cat <<-'EOF' >> "$run_script"
	}
	EOF
}


#
# Disable non-server specific kernel modules
#
disable_kernel_modules() {
  local _disable_modules="" _graphics_driver

  cat <<-'EOF' >> "$run_script"
	
	write_log "Disable non-server kernel modules"
	{
	EOF

  # Arch
  #------


  # Block
  #-------


  # Crypto
  #--------


  # Drivers
  #---------

  # KMS/DRM modules
  case $image_console_output_type in
    generic )
      case $image_class in
        cloud | virtual )
          # Disable all physical KMS/DRM modules
          _disable_modules="$CADI_PHYSICAL_KMS_MODULES"
          _disable_modules="$_disable_modules $CADI_PHYSICAL_GENERAL_KMS_MODULES"
          case $image_arch in
            aarch64 | armv7 )
              _disable_modules="$_disable_modules $CADI_PHYSICAL_ARM_KMS_MODULES" ;;
            x86 | x86_64 )
              _disable_modules="$_disable_modules $CADI_PHYSICAL_X86_KMS_MODULES" ;;
          esac
          ;;
        physical )
          # Disable all virtual KMS/DRM modules
          _disable_modules="$CADI_VIRTUAL_KMS_MODULES" ;;
      esac

      if [ -z "$image_enable_graphics" ] || \
         [ "$image_enable_graphics" != "true" ]; then
        # Disable all remaining KMS/DRM modules
        _disable_modules="$_disable_modules $CADI_COMMON_KMS_MODULES"
        _disable_modules="$_disable_modules $CADI_GENERAL_KMS_MODULES"
        case $image_class in
          cloud | virtual )
            # Disable all virtual KMS/DRM modules
            _disable_modules="$_disable_modules $CADI_VIRTUAL_KMS_MODULES" ;;
          physical )
            # Disable all physical KMS/DRM modules
            _disable_modules="$_disable_modules $CADI_PHYSICAL_KMS_MODULES"
            _disable_modules="$_disable_modules $CADI_PHYSICAL_GENERAL_KMS_MODULES"
            case $image_arch in
              aarch64 | armv7 )
                _disable_modules="$_disable_modules $CADI_PHYSICAL_ARM_KMS_MODULES" ;;
              x86 | x86_64 )
                _disable_modules="$_disable_modules $CADI_PHYSICAL_X86_KMS_MODULES" ;;
            esac
            ;;
        esac
      fi
      ;;

    graphics )
      if [ -n "$image_graphics_driver" ]; then
        _graphics_driver="$image_graphics_driver"
      elif [ -n "$CADI_DEFAULT_CONSOLE_GRAPHICS_DRIVER" ]; then
        _graphics_driver="$CADI_DEFAULT_CONSOLE_GRAPHICS_DRIVER"
      fi

      if [ -n "$_graphics_driver" ]; then
        case $_graphics_driver in
          bochs | simpledrm )
            # If using either Bochs or Simpledrm DRM then disable
            # all other general KMS/DRM modules
            _disable_modules="$(all_entries_in_space_list_except "$CADI_GENERAL_KMS_MODULES" "$_graphics_driver")"
            # Whether cloud/physical/virtual machine, disable all
            # virtual KMS/DRM modules
            _disable_modules="$_disable_modules $CADI_VIRTUAL_KMS_MODULES"
            ;;

          generic )
            # Don't disable any general KMS/DRM modules
            : ;;

          qxl )
            # Disable all general KMS/DRM modules
            _disable_modules="$CADI_GENERAL_KMS_MODULES"
            # Disable all virtual KMS/DRM modules except for QXL
            _disable_modules="$_disable_modules $(all_entries_in_space_list_except "$CADI_VIRTUAL_KMS_MODULES" "qxl")"
            ;;

          * )
            # Disable all general KMS/DRM modules
            _disable_modules="$CADI_GENERAL_KMS_MODULES"
            ;;
        esac

        case $image_class in
          cloud | virtual )
            # Disable all physical KMS/DRM modules
            _disable_modules="$_disable_modules $CADI_PHYSICAL_KMS_MODULES"
            _disable_modules="$_disable_modules $CADI_PHYSICAL_GENERAL_KMS_MODULES"
            case $image_arch in
              aarch64 | armv7 )
                _disable_modules="$_disable_modules $CADI_PHYSICAL_ARM_KMS_MODULES" ;;
              x86 | x86_64 )
                _disable_modules="$_disable_modules $CADI_PHYSICAL_X86_KMS_MODULES" ;;
            esac
            ;;
          physical )
            # Disable all virtual KMS/DRM modules
            _disable_modules="$_disable_modules $CADI_VIRTUAL_KMS_MODULES" ;;
        esac
      fi
      ;;

    none | text )
      # Disable all KMS/DRM modules
      _disable_modules="$CADI_COMMON_KMS_MODULES"
      _disable_modules="$_disable_modules $CADI_GENERAL_KMS_MODULES"
      _disable_modules="$_disable_modules $CADI_PHYSICAL_KMS_MODULES"
      _disable_modules="$_disable_modules $CADI_PHYSICAL_GENERAL_KMS_MODULES"
      case $image_arch in
        aarch64 | armv7 )
          _disable_modules="$_disable_modules $CADI_PHYSICAL_ARM_KMS_MODULES" ;;
        x86 | x86_64 )
           _disable_modules="$_disable_modules $CADI_PHYSICAL_X86_KMS_MODULES" ;;
      esac
      _disable_modules="$_disable_modules $CADI_VIRTUAL_KMS_MODULES"
      ;;
  esac

  # UEFI-related
  #
  # The "efivars" interface in sysfs has been deprecated since 2012;
  # in Linux 6.0 it will be removed entirely.
  _disable_modules="$_disable_modules efivars"
  case $image_boot_type in
    secure-uefi | uefi )
      : ;;
    * )
      # Disable all UEFI modules on non-UEFI machine
      _disable_modules="$_disable_modules $CADI_UEFI_KERNEL_MODULES" ;;
  esac


  # Non server related modules
  _disable_modules="$_disable_modules $CADI_GENERAL_KERNEL_MODULES"
  _disable_modules="$_disable_modules $CADI_DESKTOP_KERNEL_MODULES"
  if [ "$image_class" != "physical" ] || \
     [ "$(expr "$image_physical_type" : '.*rpi.*')" -eq 0 ]; then
    _disable_modules="$_disable_modules $CADI_VIRTUAL_XEN_KERNEL_MODULES"
  fi

  # USB
  case $image_console_device_type in
    normal | normal_and_serial | generic )
      # Disable Azure/Hyper-V keyboard-related module
      case $image_keyboard_type in
        hyperv )
          : ;;
        generic )
          if ! is_in_comma_list "$CADI_SUPPORTED_CONSOLE_KEYBOARD_TYPES" \
                                "hyperv"; then
            _disable_modules="$_disable_modules $CADI_AZURE_HYPERV_KEYBOARD_KERNEL_MODULE"
          fi
          ;;
        * )
          _disable_modules="$_disable_modules $CADI_AZURE_HYPERV_KEYBOARD_KERNEL_MODULE" ;;
      esac

      # Disable USB keyboard-related modules
      case $image_keyboard_type in
        usb )
          : ;;
        generic )
          if ! is_in_comma_list "$CADI_SUPPORTED_CONSOLE_KEYBOARD_TYPES" \
                                "usb"; then
            _disable_modules="$_disable_modules $CADI_USB_KEYBOARD_KERNEL_MODULES"
            case $image_os_device_type in
              usb )
                : ;;
              * )
                # Disable USB controller modules
                _disable_modules="$_disable_modules $CADI_USB_CONTROLLER_KERNEL_MODULES" ;;
            esac
          fi
          ;;
        * )
          _disable_modules="$_disable_modules $CADI_USB_KEYBOARD_KERNEL_MODULES"
          case $image_os_device_type in
            usb )
              : ;;
            * )
              # Disable USB controller modules
              _disable_modules="$_disable_modules $CADI_USB_CONTROLLER_KERNEL_MODULES" ;;
          esac
          ;;
      esac
      ;;

    * )
      # Disable USB keyboard-related modules
      _disable_modules="$_disable_modules $CADI_USB_KEYBOARD_KERNEL_MODULES"
      case $image_os_device_type in
        usb )
          : ;;
        * )
          # Disable USB controller modules
          _disable_modules="$_disable_modules $CADI_USB_CONTROLLER_KERNEL_MODULES" ;;
      esac
      # Disable Azure/Hyper-V keyboard-related module
      _disable_modules="$_disable_modules $CADI_AZURE_HYPERV_KEYBOARD_KERNEL_MODULE"
      ;;
  esac

  # ACPI
  case $image_acpi_power_method in
    none )
      _disable_modules="$_disable_modules button tiny-power-button"
      case $image_arch in
        aarch64 )
          _disable_modules="$_disable_modules gpio-pl061" ;;
      esac
      ;;
    button )
      _disable_modules="$_disable_modules tiny-power-button"
      case $image_arch in
        aarch64 )
          _disable_modules="$_disable_modules gpio-pl061" ;;
      esac
      ;;
    generic )
      : ;;
    gpio )
      _disable_modules="$_disable_modules button tiny-power-button" ;;
    tiny-power-button )
      _disable_modules="$_disable_modules button"
      case $image_arch in
        aarch64 )
          _disable_modules="$_disable_modules gpio-pl061" ;;
      esac
      ;;
  esac

  # Virtio RNG
  if ! is_in_comma_list "$CADI_DEFAULT_RNG" "virtio" && \
     ! is_in_comma_list "$CADI_SUPPORTED_RNGS" "virtio"; then
    _disable_modules="$_disable_modules virtio_rng"
  fi

  case $image_class in
    cloud )
      _disable_modules="$_disable_modules $(disable_kernel_drivers_modules_on_cloud)" ;;
    physical )
      _disable_modules="$_disable_modules $(disable_kernel_drivers_modules_on_physical)" ;;
    virtual )
      _disable_modules="$_disable_modules $(disable_kernel_drivers_modules_on_virtual)" ;;
  esac

  # PTP-related
  if ! is_in_comma_list "$CADI_SUPPORTED_NTP_METHODS" "ptp"; then
    _disable_modules="$_disable_modules ptp ptp_kvm ptp_vmw"
  fi

  blacklist_list_of_kernel_modules "drivers" "$_disable_modules"
  disable_list_of_kernel_modules "drivers" "$_disable_modules"


  # FS
  #----

  _disable_modules="$CADI_UNUSED_FS_KERNEL_MODULES"
  case $image_class in

    cloud )
      _disable_modules="$_disable_modules $CADI_CLOUD_UNUSED_FS_KERNEL_MODULES" ;;

    virtual )
      case $image_vm_type in
        virtualbox | generic )
          # Don't disable for Virtualbox or generic
          : ;;
        * )
          _disable_modules="$_disable_modules $CADI_VIRTUAL_FS_VIRTUALBOX_KERNEL_MODULES" ;;
      esac
      ;;

  esac

  cat <<-EOF >> "$run_script"
	
	EOF
  blacklist_list_of_kernel_modules "fs" "$_disable_modules"
  disable_list_of_kernel_modules "fs" "$_disable_modules"


  # Kernel
  #--------


  # Lib
  #-----


  # Net
  #-----

  _disable_modules="$CADI_UNUSED_NET_KERNEL_MODULES"
  # Disable Application-Level Gateway (ALG) modules
  _disable_modules="$_disable_modules $CADI_NET_ALG_KERNEL_MODULES"
  case $image_class in
    cloud )
      _disable_modules="$_disable_modules $CADI_CLOUD_UNUSED_NET_KERNEL_MODULES" ;;

    virtual )
      case $image_vm_type in
        vmware | generic )
          # Don't disable for VMware or generic
          : ;;
        * )
          _disable_modules="$_disable_modules $CADI_NET_VMWARE_KERNEL_MODULES" ;;
      esac
      ;;
  esac
  if [ -n "$image_disable_ipv6" ]; then
    _disable_modules="$_disable_modules ipv6"
  fi

  cat <<-EOF >> "$run_script"
	
	EOF
  blacklist_list_of_kernel_modules "net" "$_disable_modules"
  disable_list_of_kernel_modules "net" "$_disable_modules"


  # Security
  #----------


  # Virt
  #------


  cat <<-'EOF' >> "$run_script"
	}
	EOF
}


#
# Disable a set of specified kernel modules
#
disable_list_of_kernel_modules() {
  local _modules_section=$1
  local _disable_list="$2"

  local _module_name

  cat <<-EOF >> "$run_script"
	
	  write_log "Disabling ${_modules_section} kernel modules" 2
	  {
	    cat <<-_SCRIPT_ > /etc/modprobe.d/disable-${_modules_section}-modules.conf
	EOF

  for _module_name in $_disable_list; do
    cat <<EOF >> "$run_script"
	install ${_module_name} /bin/true
EOF
  done

  cat <<EOF >> "$run_script"
	_SCRIPT_
EOF

  cat <<-EOF >> "$run_script"
	    sort -u -o /etc/modprobe.d/disable-${_modules_section}-modules.conf \\
	      /etc/modprobe.d/disable-${_modules_section}-modules.conf
	EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-EOF >> "$run_script"
	
	    # Debug
	    write_debug_log "Contents of disable-${_modules_section}-modules.conf:" 4
	    cat /etc/modprobe.d/disable-${_modules_section}-modules.conf >> /chroot.log
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Configure modules to be loaded upon boot
#
setup_etc_modules() {
  local _network_module _ptp_module _storage_module

  cat <<-EOF >> "$run_script"
	
	write_log "Setup /etc/modules-load.d/$image_env_ref.conf"
	{
	EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-EOF >> "$run_script"
	  # Debug
	  cp /etc/modules /etc/modules-orig
	
	EOF
  fi

  # af_packet
  cat <<EOF >> "$run_script"
  if ! grep -q af_packet /etc/modules; then
    cat <<-_SCRIPT_ > /etc/modules-load.d/$image_env_ref.conf
	af_packet
	_SCRIPT_
  fi

EOF

  # ipv6
  if [ -z "$image_disable_ipv6" ]; then
    cat <<EOF >> "$run_script"
  if ! grep -q ipv6 /etc/modules; then
    cat <<-_SCRIPT_ >> /etc/modules-load.d/$image_env_ref.conf
	ipv6
	_SCRIPT_
  fi
EOF
  else
    cat <<-EOF >> "$run_script"
	  if grep -q ipv6 /etc/modules; then
	    # Disable it in /etc/modules
	    sed -i -e 's/^ipv6$/#ipv6/g' /etc/modules
	  fi
	EOF
  fi

    cat <<EOF >> "$run_script"

  cat <<-_SCRIPT_ >> /etc/modules-load.d/$image_env_ref.conf
EOF


  # Network
  if [ -n "$image_ethernet_module" ]; then
    _network_module="$(convert_network_names_to_modules "$(basename "$image_ethernet_module")")"
  elif [ -n "$CADI_DEFAULT_NETWORK_DRIVER" ]; then
    if [ -n "$CADI_SUPPORTED_NETWORK_DRIVERS" ]; then
      if is_in_comma_list "$CADI_SUPPORTED_NETWORK_DRIVERS" \
                          "$CADI_DEFAULT_NETWORK_DRIVER"; then
        _network_module="$(convert_network_names_to_modules "$CADI_DEFAULT_NETWORK_DRIVER")"
      else
        error_message \
          "'$CADI_DEFAULT_NETWORK_DRIVER' is not defined in CADI_SUPPORTED_NETWORK_DRIVERS for '$class_type_description'!"
      fi
    else
      error_message \
        "CADI_SUPPORTED_NETWORK_DRIVERS is not defined for '$class_type_description'!"
    fi
  elif [ -n "$CADI_SUPPORTED_NETWORK_DRIVERS" ]; then
    if is_single_entry_in_comma_list "$CADI_SUPPORTED_NETWORK_DRIVERS"; then
      _network_module="$(convert_network_name_to_module "$CADI_SUPPORTED_NETWORK_DRIVERS")"
    elif is_in_comma_list "$CADI_SUPPORTED_NETWORK_DRIVERS" "generic"; then
      # Add all the supported drivers
      _network_module="$(convert_network_names_to_modules "generic")"
    else
      error_message \
        "Unable to decide which network driver to use for '$class_type_description'!"
    fi
  elif [ "$image_class" = "cloud" ] || [ "$image_class" = "virtual" ]; then
    # For VMs/Cloud machines assume virtio-net
    _network_module="$(convert_network_name_to_module "virtio-net")"
  else
    error_message \
      "CADI_DEFAULT_NETWORK_DRIVER is not defined for '$class_type_description'!"
  fi
  if [ -n "$_network_module" ] && [ "$_network_module" != "none" ]; then
    cat <<EOF >> "$run_script"
	
	# Network
$(echo_lines_from_comma_list "\t%s" "$_network_module")
EOF
  fi


  # PTP
  if [ -n "$CADI_SUPPORTED_NTP_METHODS" ] && \
     is_in_comma_list "$CADI_SUPPORTED_NTP_METHODS" "ptp" && \
     [ -n "$CADI_PTP_DEVICE_TYPE" ]; then
    if [ -n "$CADI_DEFAULT_NTP_METHOD" ] && \
       [ "$CADI_DEFAULT_NTP_METHOD" = "ptp" ]; then
      _ptp_module="$(convert_ptp_name_to_module "$CADI_PTP_DEVICE_TYPE")"
    fi
  fi
  if [ -n "$_ptp_module" ]; then
    cat <<EOF >> "$run_script"
	
	# PTP
	$_ptp_module
EOF
  fi


  # Storage
  if [ -n "$CADI_DEFAULT_STORAGE_DRIVER" ]; then
    if [ -n "$CADI_SUPPORTED_STORAGE_DRIVERS" ]; then
      if is_in_comma_list "$CADI_SUPPORTED_STORAGE_DRIVERS" \
                          "$CADI_DEFAULT_STORAGE_DRIVER"; then
        _storage_module="$(convert_storage_names_to_modules "$CADI_DEFAULT_STORAGE_DRIVER")"
      else
        error_message \
          "'$CADI_DEFAULT_STORAGE_DRIVER' is not defined in CADI_SUPPORTED_STORAGE_DRIVERS for '$class_type_description'!"
      fi
    else
      error_message "CADI_SUPPORTED_STORAGE_DRIVERS is not defined for '$class_type_description'!"
    fi
  elif [ -n "$CADI_SUPPORTED_STORAGE_DRIVERS" ]; then
    if is_single_entry_in_comma_list "$CADI_SUPPORTED_STORAGE_DRIVERS"; then
      _storage_module="$(convert_storage_name_to_module "$CADI_SUPPORTED_STORAGE_DRIVERS")"
    elif is_in_comma_list "$CADI_SUPPORTED_STORAGE_DRIVERS" "generic"; then
      # Add all the supported drivers
      _storage_module="$(convert_storage_names_to_modules "generic")"
    else
      error_message \
        "Unable to decide which storage driver to use for '$class_type_description'!"
    fi
  else
    error_message \
      "CADI_DEFAULT_STORAGE_DRIVER is not defined for '$class_type_description'!"
  fi
  if [ -n "$_storage_module" ]; then
    cat <<EOF >> "$run_script"
	
	# Storage
$(echo_lines_from_comma_list "\t%s" "$_storage_module")
EOF
  fi


  # Extra modules specific to type of machine
  if [ -n "$CADI_ADDITIONAL_NON_INITRAMFS_MODULES" ]; then
    cat <<EOF >> "$run_script"
	
	# Machine-specific
$(echo_lines_from_comma_list "\t%s" "$CADI_ADDITIONAL_NON_INITRAMFS_MODULES")
EOF
  fi


  if [ -n "$image_extra_modules" ]; then
    # Add any manually specified extra modules to the list
    cat <<'EOF' >> "$run_script"
	
	# Extra modules
$(echo_lines_from_comma_list "\t%s" "$image_extra_modules")
EOF
  fi


  cat <<'EOF' >> "$run_script"
	_SCRIPT_
EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-EOF >> "$run_script"
	
	  # Debug
	  diff /etc/modules-orig /etc/modules >> /chroot.log | true
	  rm /etc/modules-orig
	  write_debug_log "Contents of /etc/modules:" 2
	  cat /etc/modules >> /chroot.log
	  write_debug_log "Contents of /etc/modules-load.d/$image_env_ref.conf:" 2
	  cat /etc/modules-load.d/$image_env_ref.conf >> /chroot.log
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	}
	EOF
}
