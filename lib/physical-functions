#!/bin/sh
# shellcheck disable=SC1117,SC2039

#############################################################################
##
##  physical-functions
##
##  Copyright 2021-2023 Dermot Bradley <dermot_bradley@yahoo.com>
##
##  Licensed via GPL version 2.0
##
#############################################################################


#
# Add RPI-specific /boot fstab entries
#
add_rpi_boot_fstab_entries() {
  local _mount_options="$1"

  cat <<-EOF >> "$run_script"
	  mkdir /media/sdcard
	  add_fstab_entry LABEL "RPIBOOT" "/media/sdcard" "vfat" "${_mount_options}" "/media/sdcard"
	  add_fstab_entry BIND "/media/sdcard" "/boot" "none" "${_mount_options}" "/boot bind-mount"
	EOF
}


#
# For physical machines create the cloud-init YAML config files
#
create_physical_machine_cloud_init_yaml_files() {
  local _grow_device _grow_device_short _grow_part_num _part_grow_message
  local _part_grow_size _resize_command _resize_logs_fs_part
  local _resize_luks_device _resize_pv_device _resize_pv_part
  local _resize_root_fs_part

  cat <<'EOF' >> "$run_script"

  write_log "Creating cloud-init YAML files for physical machine"
  {
    write_log "Create example YAML files" 2
    mkdir /cidata/examples

    cat <<-_SCRIPT_ > /cidata/examples/meta-data
	instance-id: iid-local0
	_SCRIPT_

    cat <<-_SCRIPT_ > /cidata/examples/network-dhcp
	version: 2
	ethernets:
	  eth0:
	    dhcp4: yes
	    dhcp6: yes
	_SCRIPT_

    cat <<-_SCRIPT_ > /cidata/examples/network-static
	version: 2
	ethernets:
	  eth0:
	    addresses:
	      - 192.168.0.2/24
	    routes:
	      - to: 0.0.0.0
	        via: 192.168.0.1
EOF

  case $image_physical_type in
    rpi* )
      : ;;
    * )
  cat <<'EOF' >> "$run_script"
	    mtu: 1500
	    wakeonlan: false
EOF
      ;;
  esac

  cat <<'EOF' >> "$run_script"
	_SCRIPT_

    cat <<-_SCRIPT_ > /cidata/examples/user-data
	#cloud-config
	
	apk_repos:
	  preserve_repositories: false
	  alpine_repo:
EOF

  cat <<EOF >> "$run_script"
	    version: '$image_alpine_release'
	    base_url: $alpine_mirror_site
	    community_enabled: true
EOF

  case $image_alpine_release in
    edge | edge-version )
      cat <<'EOF' >> "$run_script"
	    testing_enabled: true
EOF
      ;;
    * )
      cat <<'EOF' >> "$run_script"
	    testing_enabled: false
EOF
      ;;
  esac

  if [ -n "$local_alpine_repository" ]; then
    cat <<EOF >> "$run_script"
	  local_repo_base_url: $local_alpine_repository
EOF
  fi

  cat <<'EOF' >> "$run_script"
	
	package_reboot_if_required: false
	package_update: false
	package_upgrade: false
EOF

  case $image_alpine_release in
    v3.13 | v3.14 | v3.15 | v3.16 )
      cat <<'EOF' >> "$run_script"
	
	debug:
EOF
      if [ -n "$debug_enabled" ]; then
        cat <<'EOF' >> "$run_script"
	  verbose: true
EOF
      else
        cat <<'EOF' >> "$run_script"
	  verbose: false
EOF
      fi
      ;;
    * )
      # cloud-init cc_debug module is not present in Alpine v3.17+
      : ;;
  esac

  if [ -n "$image_full_hostname" ]; then
    cat <<'EOF' >> "$run_script"
	
	# Hostname including domain
	fqdn: $full_hostname
EOF
  elif [ -n "$image_short_hostname" ]; then
    cat <<'EOF' >> "$run_script"
	
	# Hostname without domain
	hostname: \$short_hostname
EOF
  fi

  cat <<'EOF' >> "$run_script"
	
	locale: \$locale
	timezone: \$timezone
	
	ntp:
	  enabled: true
	  servers:
	    - pool.ntp.org
EOF

  if { [ "$image_encryption_type" = "both" ] || \
       [ "$image_encryption_type" = "luks" ]; } || \
     [ -n "$image_lvm_rootfs" ] || \
     { [ "$image_os_device_media" = "flash" ] || \
       [ "$image_os_device_media" = "sdcard" ] || \
       [ "$image_os_device_media" = "ssd" ]; }; then

    # Cannot use cloud-init's growpart and resize_rootfs

    case $image_os_device_media in
      flash | sdcard | ssd )
        # Leave a percentage of disk unallocated for "overprovisioning"
        _disk_leave_free_percent=$image_resize_free_percent
        _part_grow_message=" leaving ${_disk_leave_free_percent}% of device unused"
        ;;
      *)
        _disk_leave_free_percent="0" ;;
    esac
    _part_grow_size="$(( 100 - _disk_leave_free_percent ))%"

    cat <<EOF >> "$run_script"
	
	# Growpart & resize does not work for LUKS or LVM or LVM-on-LUKS
	# currently and also do not handle overprovisioning for flash-based
	# devices so this will be handled via runcmd instead.
	#
	growpart:
	  mode: off
	resize_rootfs: false
EOF

    if { [ "$image_encryption_type" = "both" ] || \
         [ "$image_encryption_type" = "luks" ]; }; then
      # LUKS or LVM-on-LUKS
      _grow_part_num="$luks_part_num"
    elif [ -n "$image_lvm_rootfs" ]; then
      # LVM
      _grow_part_num="$lvm_part_num"
    else
      # Neither LUKS nor LVM
      _grow_part_num="$root_part_num"
    fi

    case $image_os_device_type in
      nvme )
        _grow_device_short="nvme0n1" ;;
      sd )
        _grow_device_short="mmcblk0" ;;
      * )
        # SATA, SCSI, or USB boot device
        _grow_device_short="sda" ;;
    esac
    _grow_device="/dev/${_grow_device_short}"


    if { [ "$image_encryption_type" = "both" ] || \
         [ "$image_encryption_type" = "luks" ]; }; then
      # LUKS or LVM-on-LUKS

      _resize_luks_device="$CADI_LUKS_DEVICE_NAME"
      _resize_root_fs_part="/dev/mapper/$CADI_LUKS_DEVICE_NAME"

      if [ $_disk_leave_free_percent != 0 ]; then
        # Overprovisioning required

        case $image_alpine_release in
          v3.13 | v3.14 | v3.15 )
            # growpart with no overprovisioning support, so use parted
            cat <<EOF >> "$run_script"
	
	runcmd:
	  # Grow LUKS partition${_part_grow_message:-}
	  - parted --machine --script --align=optimal $_grow_device resizepart $_grow_part_num $_part_grow_size >>/var/log/resize-storage.log 2>&1
EOF
            ;;
          * )
            # growpart with overprovisioning support
            cat <<EOF >> "$run_script"
	
	runcmd:
	  # Grow LUKS partition${_part_grow_message:-}
	  - growpart --free-percent=$_disk_leave_free_percent $_grow_device $_grow_part_num >>/var/log/resize-storage.log 2>&1
EOF
            ;;
        esac
      else
        # No overprovisioning required

        cat <<EOF >> "$run_script"
	
	runcmd:
	  # Grow LUKS partition
	  - growpart $_grow_device $_grow_part_num >>/var/log/resize-storage.log 2>&1
EOF
      fi

      cat <<EOF >> "$run_script"
	  #
	  # Grow LUKS to fill partition
	  - cryptsetup resize ${_resize_luks_device} >>/var/log/resize-storage.log 2>&1
EOF

      if [ -n "$image_lvm_rootfs" ]; then
        # LVM-on-LUKS
        _resize_pv_device="/dev/mapper/$CADI_LUKS_DEVICE_NAME"
        _resize_logs_fs_part="/dev/mapper/$CADI_LVM_VG_NAME-$CADI_LVM_LOGS_LV_NAME"
        _resize_root_fs_part="/dev/mapper/$CADI_LVM_VG_NAME-$CADI_LVM_ROOT_LV_NAME"
        cat <<EOF >> "$run_script"
	  #
	  # Grow LVM PV to fill LUKS partition
	  - pvresize resize ${_resize_pv_device} >>/var/log/resize-storage.log 2>&1
	  #
	  # Don't resize root LV at all
	  #
	  # Grow logs LV by 8M
	  - lvextend -L +8m $_resize_logs_fs_part >>/var/log/resize-storage.log 2>&1
EOF
      fi

    elif [ -n "$image_lvm_rootfs" ]; then
      # LVM

      _resize_logs_fs_part="/dev/mapper/$CADI_LVM_VG_NAME-$CADI_LVM_LOGS_LV_NAME"
      _resize_root_fs_part="/dev/mapper/$CADI_LVM_VG_NAME-$CADI_LVM_ROOT_LV_NAME"
      case $image_os_device_type in
        nvme )
          _resize_pv_part="/dev/${_grow_device_short}p${lvm_part_num}" ;;
        sd )
          _resize_pv_part="/dev/${_grow_device_short}p${lvm_part_num}" ;;
        * )
          # SATA, SCSI, or USB boot device
          _resize_pv_part="/dev/${_grow_device_short}${lvm_part_num}" ;;
      esac

      if [ $_disk_leave_free_percent != 0 ]; then
        # Overprovisioning required

        case $image_alpine_release in
          v3.13 | v3.14 | v3.15 )
            # growpart with no overprovisioning support
            cat <<EOF >> "$run_script"
	
	runcmd:
	  # Grow LVM partition${_part_grow_message:-}
	  - parted --machine --script --align=optimal $_grow_device resizepart $_grow_part_num $_part_grow_size >>/var/log/resize-storage.log 2>&1
	  #
	  # Grow LVM PV to fill partition
	  - pvresize $_resize_pv_part >>/var/log/resize-storage.log 2>&1
EOF
            ;;
          * )
            # growpart version that does support overprovisioning

            cat <<EOF >> "$run_script"
	
	runcmd:
	  # Grow LVM partition${_part_grow_message:-} and grow LVM PV to fill partition
	  - growpart --free-percent=$_disk_leave_free_percent $_grow_device $_grow_part_num >>/var/log/resize-storage.log 2>&1
EOF
            ;;
        esac
      else
        # No overprovisioning required

        cat <<EOF >> "$run_script"
	
	runcmd:
	  # Grow LVM partition and grow LVM PV to fill partition
	  - growpart $_grow_device $_grow_part_num >>/var/log/resize-storage.log 2>&1
EOF
      fi

      cat <<EOF >> "$run_script"
	  #
	  # Don't resize root LV at all
	  #
	  # Grow logs LV by 8M
	  - lvextend -L +8m $_resize_logs_fs_part >>/var/log/resize-storage.log 2>&1
EOF
    else
      # Neither LUKS nor LVM

      case $image_os_device_type in
        nvme )
          _resize_root_fs_part="/dev/${_grow_device_short}p${root_part_num}" ;;
        sd )
          _resize_root_fs_part="/dev/${_grow_device_short}p${root_part_num}" ;;
        * )
          # SATA, SCSI, or USB boot device
          _resize_root_fs_part="/dev/${_grow_device_short}${root_part_num}" ;;
      esac

      if [ $_disk_leave_free_percent != 0 ]; then
        # Overprovisioning required
        case $image_alpine_release in
          v3.13 | v3.14 | v3.15 )
            # growpart with no overprovisioning support
            cat <<EOF >> "$run_script"
	
	runcmd:
	  # Grow root partition${_part_grow_message:-}
	  - parted --machine --script --align=optimal $_grow_device resizepart $_grow_part_num $_part_grow_size >>/var/log/resize-storage.log 2>&1
EOF
            ;;
          * )
            # growpart version that does support overprovisioning
            cat <<EOF >> "$run_script"
	
	runcmd:
	  # Grow root partition${_part_grow_message:-}
	  - growpart --free-percent=$_disk_leave_free_percent $_grow_device $_grow_part_num >>/var/log/resize-storage.log 2>&1
EOF
            ;;
        esac
      else
        # No overprovisioning required
        cat <<EOF >> "$run_script"
	
	runcmd:
	  # Grow root partition
	  - growpart $_grow_device $_grow_part_num >>/var/log/resize-storage.log 2>&1
EOF
      fi
    fi


    if [ -z "$image_lvm_rootfs" ]; then
      # root is not on LVM so resize it

      cat <<EOF >> "$run_script"
	  #
	  # Resize underlying root filesystem
EOF

      case $image_fs_type in
        btrfs )
          _resize_command="btrfs filesystem resize max $_resize_root_fs_part" ;;
        ext4 )
          _resize_command="resize2fs $_resize_root_fs_part" ;;
        f2fs )
          _resize_command="resize.f2fs $_resize_root_fs_part" ;;
        xfs )
          _resize_command="xfs_growfs $_resize_root_fs_part" ;;
      esac

      cat <<EOF >> "$run_script"
	  - $_resize_command >>/var/log/resize-storage.log 2>&1
EOF
    fi

    if [ -n "$image_lvm_rootfs" ]; then
      cat <<EOF >> "$run_script"
	  #
	  # Resize underlying logs filesystem
EOF
      case $image_fs_type in
        btrfs )
          _resize_command="btrfs filesystem resize max $_resize_logs_fs_part" ;;
        ext4 )
          _resize_command="resize2fs $_resize_logs_fs_part" ;;
        f2fs )
          _resize_command="resize.f2fs $_resize_logs_fs_part" ;;
        xfs )
          _resize_command="xfs_growfs $_resize_logs_fs_part" ;;
      esac
      cat <<EOF >> "$run_script"
	  - $_resize_command >>/var/log/resize-storage.log 2>&1
EOF
    fi
  else
    cat <<'EOF' >> "$run_script"
	
	# Grow root partition and resize rootfs to fill it
	growpart:
	  mode: auto
	resize_rootfs: true
EOF
  fi

  cat <<'EOF' >> "$run_script"
	
	ssh:
	  # Whether to show either host keys or their fingerprints on console
	  emit_keys_to_console: false
EOF

  if [ -n "$ssh_public_key" ]; then
    cat <<EOF >> "$run_script"
	
	users:
	  - default
	  - name: $image_admin_username
	    ssh_authorized_keys:
EOF
    # shellcheck disable=SC2028
    echo "\t      - '$ssh_public_key'" >> "$run_script"
  fi

  cat <<'EOF' >> "$run_script"
	
	_SCRIPT_

    write_log "Creating meta-data" 2
    cp /cidata/examples/meta-data /cidata/meta-data

    write_log "Creating network-config" 2
    cp /cidata/examples/network-dhcp /cidata/network-config

    write_log "Creating user-data" 2
    cp /cidata/examples/user-data /cidata/user-data
EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "meta-data contents:" 2
	      cat /cidata/meta-data >> /chroot.log
	
	      write_debug_log "network-config contents:" 2
	      cat /cidata/network-config >> /chroot.log
	
	      write_debug_log "user-data contents:" 2
	      cat /cidata/user-data >> /chroot.log
	    }
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Define physical machine specific packages
#
define_physical_machine_packages() {
  local _physical_pkgs

  _physical_pkgs="cpufrequtils ethtool irqbalance"

  case $image_os_device_type in
    sd )
      case $image_alpine_release in
        v3.13 | v3.14 )
          # These releases do not have the mmc-utils package
          : ;;
        * )
          _physical_pkgs="${_physical_pkgs} mmc-utils" ;;
      esac
      ;;
  esac

  if [ -z "$image_barebones" ]; then
    _physical_pkgs="${_physical_pkgs} lm-sensors"

    case $image_os_device_type in 
      sata | scsi )
        _physical_pkgs="${_physical_pkgs} smartmontools" ;;
    esac
    case $image_os_device_media in
      disk )
        case $image_alpine_release in
          v3.13 | v3.14 | v3.15 )
            # These releases do not have the hd-idle package
            : ;;
          * )
            _physical_pkgs="$_physical_pkgs hd-idle" ;;
        esac
        _physical_pkgs="${_physical_pkgs} hdparm"
        ;;
      sdcard | ssd )
        # Require fstrim command, so install relevant package
        case $image_alpine_release in
          v3.13 | v3.14 )
            _physical_pkgs="$_physical_pkgs util-linux" ;;
          v3.15 )
            _physical_pkgs="$_physical_pkgs util-linux-misc" ;;
          * )
            _physical_pkgs="$_physical_pkgs fstrim" ;;
        esac
        ;;
    esac

    case $image_physical_type in
      pc )
        _physical_pkgs="${_physical_pkgs} acpid fwupd" ;;
      rpi* )
        _physical_pkgs="${_physical_pkgs} raspberrypi"
        case $image_alpine_release in
          v3.13 | v3.14 | v3.15 | v3.16 )
            # These releases do not have the uhubctl package
            : ;;
          * )
            _physical_pkgs="${_physical_pkgs} uhubctl" ;;
        esac
        ;;
    esac
  fi

  echo "$_physical_pkgs"
}


#
# Disable unrequired kernel drivers modules on a physical machine
#
disable_kernel_drivers_modules_on_physical() {
  local _disable_list=""

  case $image_physical_type in
    arm-server )
      # Disable all cloud provider and virtual modules
      _disable_list="$_disable_list $CADI_CLOUD_KERNEL_MODULES"
      _disable_list="$_disable_list $CADI_VIRTUAL_KERNEL_MODULES"
      _disable_list="$_disable_list $CADI_AZURE_HYPERV_COMMON_KERNEL_MODULES"
      ;;

    ovh-baremetal )
      # Disable all cloud provider and virtual modules
      _disable_list="$_disable_list $CADI_CLOUD_KERNEL_MODULES"
      _disable_list="$_disable_list $CADI_VIRTUAL_KERNEL_MODULES"
      _disable_list="$_disable_list $CADI_AZURE_HYPERV_COMMON_KERNEL_MODULES"
      ;;

    rpi* )
      # RPI as server does not need HDMI-related modules
      _disable_list="$_disable_list backlight cec drm drm_kms_helper"
      _disable_list="$_disable_list drm_panel_orientiation_quirks fb_sys_fops"
      _disable_list="$_disable_list syscopyarea sysfillrect sysimgblt vc4"

      # RPI as server does not need multimedia-related modules
      _disable_list="$_disable_list bcm2835_codec bcm2835_isp"
      _disable_list="$_disable_list bcm2835_v4l2 mc"
      _disable_list="$_disable_list snd snd-pcm snd-pcm-dmaengine snd-soc-core snd-timer"
      _disable_list="$_disable_list videobuf2_common videobuf2_dma_contig"
      _disable_list="$_disable_list videobuf2_memops videobuf2_vmalloc"
      _disable_list="$_disable_list videobuf2_v4l2 videodev v4l2_mem2mem"

      # Devices
      _disable_list="$_disable_list uio uio_pdrv_genirq"

      # Misc
      _disable_list="$_disable_list input_leds joydev"
      ;;

    pc )
      if [ -z "$image_enable_graphics" ] || \
         [ "$image_console_type" = "hypervisor" ] || \
         [ "$image_console_type" = "serial" ]; then
        # Disable all KMS/DRM modules
        _disable_list="$_disable_list $CADI_PHYSICAL_GENERAL_KMS_MODULES"
        _disable_list="$_disable_list $CADI_PHYSICAL_X86_KMS_MODULES"
      fi
      _disable_list="$_disable_list $CADI_VIRTUAL_KMS_MODULES"

      # Disable all cloud provider and virtual modules
      _disable_list="$_disable_list $CADI_CLOUD_KERNEL_MODULES"
      _disable_list="$_disable_list $CADI_VIRTUAL_KERNEL_MODULES"
      _disable_list="$_disable_list $CADI_AZURE_HYPERV_COMMON_KERNEL_MODULES"
      ;;
  esac

  echo "$_disable_list"
}


#
# Determine firmware packages for physical machine
#
firmware_list_for_physical() {
  local _firmware_list=""

  case $image_physical_type in
    arm-server )
      _firmware_list="linux-firmware-mellanox"
      ;;

    ovh-baremetal )
      _firmware_list=""
      ;;

    pc )
      if [ -n "$image_graphics_vendor" ]; then
        case $image_graphics_vendor in
          amd )
            cat <<-'EOF' >> "$run_script"
	  write_log "Selecting AMD graphics firmware" 2
	EOF
            if [ -n "$image_graphics_vendor_driver" ]; then
              case $image_graphics_vendor_driver in
                amdgpu )
                  _firmware_list="linux-firmware-amdgpu" ;;
                radeon )
                  _firmware_list="linux-firmware-radeon" ;;
              esac
            else
              _firmware_list="linux-firmware-amdgpu linux-firmware-radeon"
            fi
            ;;
          intel )
            cat <<-'EOF' >> "$run_script"
	  write_log "Selecting Intel graphics firmware" 2
	EOF
            _firmware_list="linux-firmware-i915"
            ;;
        esac
      else
        cat <<-'EOF' >> "$run_script"
	  write_log "Selecting AMD and Intel graphics firmware" 2
	EOF
        _firmware_list="linux-firmware-amdgpu linux-firmware-radeon linux-firmware-i915"
      fi


      case $image_ethernet_vendor in
          broadcom )
            cat <<-'EOF' >> "$run_script"
	  write_log "Selecting Broadcom NIC firmware" 2
	EOF
            _firmware_list="${_firmware_list} linux-firmware-tigon"
            ;;
          mellanox )
            cat <<-'EOF' >> "$run_script"
	  write_log "Selecting Mellanox NIC firmware" 2
	EOF
            _firmware_list="${_firmware_list} linux-firmware-mellanox"
            ;;
          realtek )
            cat <<-'EOF' >> "$run_script"
	  write_log "Selecting Realtek NIC firmware" 2
	EOF
            _firmware_list="${_firmware_list} linux-firmware-rtl_nic"
            ;;
          * )
            cat <<-'EOF' >> "$run_script"
	  write_log "Selecting all NIC firmware" 2
	EOF
            _firmware_list="${_firmware_list} linux-firmware-rtl_nic linux-firmware-tigon"
            ;;
        esac
      ;;

    rpi* )
      # No RPI firmware used currently
      : ;;
  esac

  echo "$_firmware_list"
}


#
# Determine microcode packages for physical machine
#
install_microcode_for_physical() {
  local _microcode_list=""

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	  # Debug
	  {
	    cp /etc/modprobe.d/blacklist.conf /etc/modprobe.d/blacklist.conf-orig
	  }
	
EOF
  fi

  if [ -n "$image_cpu_vendor" ]; then
    case $image_cpu_vendor in
      amd )
        cat <<-'EOF' >> "$run_script"
	  write_log "Selecting AMD CPU microcode" 2
	EOF
        _microcode_list="amd-ucode"
        ;;
      intel )
        cat <<-'EOF' >> "$run_script"
	  write_log "Selecting Intel CPU microcode" 2
	EOF
        _microcode_list="intel-ucode"
        ;;
    esac
  else
    cat <<-'EOF' >> "$run_script"
	  write_log "Selecting AMD and Intel microcode" 2
	EOF
    _microcode_list="amd-ucode intel-ucode"
  fi

  cat <<-EOF >> "$run_script"
	  write_log "Installing microcode" 2
	  apk add ${_microcode_list} >> /chroot.log 2>&1
	
	  write_log "Removing microcode module from modprobe blacklist" 2
	  sed -i -E -e 's/^(blacklist microcode)$/#\1/' \\
	    /etc/modprobe.d/blacklist.conf
	EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	
	  # Debug
	  {
	    diff /etc/modprobe.d/blacklist.conf-orig /etc/modprobe.d/blacklist.conf \
	      >> /chroot.log || true
	    rm /etc/modprobe.d/blacklist.conf-orig
	  }
	EOF
  fi
}
