#!/bin/sh
# shellcheck disable=SC1117,SC2039

#############################################################################
##
##  services-functions
##
##  Copyright 2021-2023 Dermot Bradley <dermot_bradley@yahoo.com>
##
##  Licensed via GPL version 2.0
##
#############################################################################


#
# Add a crontab entry to run fstrim
#
add_fstrim_cronjob() {
  cat <<'EOF' >> "$run_script"

    write_log "Setting up weekly fstrim cronjob" 4
    {
      cat <<-'_SCRIPT_' >> /etc/periodic/weekly/fstrim
	#!/bin/sh
	
	# Trim all suitable fs listed in /etc/fstab
	_trim_options="-A -v"
	
	fstrim \$_trim_options >> /var/log/trim.log
	
	_SCRIPT_
    }

    write_log "Setting up logrotate for fstrim logfile" 4
    {
cat <<-'_SCRIPT_' >> /etc/logrotate.d/fstrim
	/var/log/trim.log {
		compress
		delaycompress
		missingok
		monthly
		notifempty
		rotate 6
	}
	_SCRIPT_
    }
EOF
}


#
# Configure acct
#
configure_acct() {
  cat <<-'EOF' >> "$run_script"
	
	  write_log "Configuring acct" 2
	  {
	    write_log "Enable acct init.d service" 4
	    {
	EOF

  add_init_d_service "acct" "default" 6

  cat <<-'EOF' >> "$run_script"
	    } >> /chroot.log 2>&1
	EOF

  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Configure ACPI including acpid daemon
#
configure_acpid() {
  cat <<-'EOF' >> "$run_script"
	
	  write_log "Configuring ACPI" 2
	  {
	    write_log "Adjusting modprobe blacklist for button" 4
	    {
	EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	      # Debug
	      {
	        cp /etc/modprobe.d/blacklist.conf /etc/modprobe.d/blacklist.conf-orig
	      }
	
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	      write_log "Removing ACPI button module from modprobe blacklist" 4
	      sed -i -E -e 's/^(blacklist button)$/#\1/' \\
	        /etc/modprobe.d/blacklist.conf
	
	      write_log "Adding tiny_power_button module to modprobe blacklist" 4
	      sed -i -E -e 's/^[#](blacklist tiny_power_button)$/\1/' \\
	        /etc/modprobe.d/blacklist.conf
	EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	
	      # Debug
	      {
	        diff /etc/modprobe.d/blacklist.conf-orig /etc/modprobe.d/blacklist.conf \
	          >> /chroot.log || true
	        rm /etc/modprobe.d/blacklist.conf-orig
	      }
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	    }
	EOF

  case $image_class in
    physical )
      # acpid only runs on physical machines as linux-virt has missing /dev/input/event0
      case $image_physical_type in
        rpi* )
          # No acpid for Raspberry Pis
          : ;;
        * )
          cat <<-'EOF' >> "$run_script"
	
	    write_log "Enable acpid init.d service" 4
	    {
	EOF

          add_init_d_service "acpid" "default" 6

          cat <<-'EOF' >> "$run_script"
	    } >> /chroot.log 2>&1
	EOF
          ;;
      esac
      ;;
  esac

  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Configure Busybox cron daemon
#
configure_busybox_cron() {
  cat <<-'EOF' >> "$run_script"
	    write_log "Configuring Busybox cron daemon" 4
	    {
	EOF

  case $image_cloud_software in
    cloud-init )
      if [ -n "$debug_enabled" ]; then
        cat <<-'EOF' >> "$run_script"
	      # Debug
	      {
	        cp /etc/conf.d/crond /etc/conf.d/crond-orig
	      }
	
	EOF
      fi

      cat <<-'EOF' >> "$run_script"
	      :
	
	EOF
      ;;
  esac


  cat <<-'EOF' >> "$run_script"
	      write_log "Enable Busybox cron init.d service" 6
	      {
	EOF

  add_init_d_service "crond" "default" 8

  cat <<-'EOF' >> "$run_script"
	      } >> /chroot.log 2>&1
	EOF

  case $image_cloud_software in
    cloud-init )
      if [ -n "$debug_enabled" ]; then
        cat <<-'EOF' >> "$run_script"
	
	      # Debug
	      {
	        diff /etc/conf.d/crond-orig /etc/conf.d/crond >> /chroot.log || true
	        rm /etc/conf.d/crond-orig
	      }
	EOF
      fi
      ;;
  esac

  cat <<-'EOF' >> "$run_script"
	    }
	EOF
}


#
# Configure Busybox Syslog server daemon
#
configure_busybox_syslogd() {
  local _num_of_rotated_logs=14
  # Size in KB at which to rotate logfile
  local _rotation_size=51200

  cat <<-'EOF' >> "$run_script"
	    write_log "Configuring Busybox syslogd server" 4
	    {
	EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	      # Debug
	      {
	        cp /etc/conf.d/syslog /etc/conf.d/syslog-orig
	      }
	
	EOF
      fi


  case $image_cloud_software in
    cloud-init )
      : ;;
    * )
      cat <<-EOF >> "$run_script"
	      write_log "Set logfile rotation options" 6
	      sed -i -E -e 's|^(SYSLOGD_OPTS="-t)|\\1 -b $_num_of_rotated_logs -s $_rotation_size|' \\
	        /etc/conf.d/syslog
	
	EOF
      ;;
  esac


  cat <<-'EOF' >> "$run_script"
	      write_log "Enable Busybox syslogd init.d service" 6
	      {
	EOF

  add_init_d_service "syslog" "boot" 8

  cat <<-'EOF' >> "$run_script"
	      } >> /chroot.log 2>&1
	EOF


  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	
	      # Debug
	      {
	        diff /etc/conf.d/syslog-orig /etc/conf.d/syslog >> /chroot.log || true
	        rm /etc/conf.d/syslog-orig
	      }
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	    }
	EOF
}


#
# Configure Busybox udhcpc
#
configure_busybox_udhcpc() {
  cat <<-'EOF' >> "$run_script"
	    write_log "Configuring Busybox udhcpc" 4
	    {
	EOF

  case $image_cloud_software in
    cloud-init )
      if [ -n "$debug_enabled" ]; then
        cat <<-'EOF' >> "$run_script"
	      # Debug
	      {
	        cp /usr/share/udhcpc/default.script /usr/share/udhcpc/default.script-orig
	      }
	
	EOF
      fi

      cat <<-'EOF' >> "$run_script"
	      :
	
	EOF
      ;;
  esac


  cat <<-'EOF' >> "$run_script"
	      :
	EOF


  case $image_cloud_software in
    cloud-init )
      if [ -n "$debug_enabled" ]; then
        cat <<-'EOF' >> "$run_script"
	
	      # Debug
	      {
	        diff /usr/share/udhcpc/default.script-orig \
	          /usr/share/udhcpc/default.script >> /chroot.log || true
	        rm /usr/share/udhcpc/default.script-orig
	      }
	EOF
      fi
      ;;
  esac

  cat <<-'EOF' >> "$run_script"
	    }
	EOF
}


#
# Create a user for local console access
#
configure_console_user() {

  cat <<-EOF >> "$run_script"
	
	  write_log "Configuring console-only user account" 2
	  {
	EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	    # Debug
	    {
	      cp /etc/group /etc/group-orig
	      cp /etc/passwd /etc/passwd-orig
	      cp /etc/shadow /etc/shadow-orig
	EOF

    case $image_ssh_server in
      openssh )
        cat <<-'EOF' >> "$run_script"
	      cp /etc/ssh/sshd_config /etc/ssh/sshd_config-orig
	EOF
        ;;
    esac

    cat <<-'EOF' >> "$run_script"
	    }
	
	EOF
  fi

  cat <<-EOF >> "$run_script"
	    write_log "Creating '$image_console_only_group' group" 4
	    addgroup $image_console_only_group >> /chroot.log
	
	    write_log "Configuring '$image_console_user' user account" 4
	    {
	      write_log "Creating '$image_console_user' user for console-only access" 6
	      adduser -g "User for console-only access" -D $image_console_user >> /chroot.log
	
	EOF

  if [ -n "$image_console_user_password" ]; then
    cat <<-EOF >> "$run_script"
	      write_log "Setting password for '$image_console_user' user" 6
	      echo "${image_console_user}:\$console_user_password" | chpasswd >> /chroot.log
	EOF
  else
    cat <<-EOF >> "$run_script"
	      write_log "Unlocking user account '$image_console_user' (for password access)" 6
	EOF
    case $image_user_management in
      shadow )
    cat <<-EOF >> "$run_script"
	      usermod -p "" $image_console_user >> /chroot.log 2>&1 || true
	EOF
        ;;
      * )
    cat <<-EOF >> "$run_script"
	      passwd -u $image_console_user >> /chroot.log 2>&1 || true
	EOF
        ;;
    esac
  fi

  cat <<-EOF >> "$run_script"
	
	      write_log "Setting up password-less access for '$image_console_only_group' group" 6
	      {
	EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	        # Debug
	        {
	          cp /etc/doas.conf /etc/doas.conf-orig
	        }
	
	EOF
  fi  

  cat <<-EOF >> "$run_script"
	        write_log "Setting up password-less doas access for '$image_console_only_group' group" 8
	        {
	          echo
	          echo "# Enable password-less access for members of group '$image_console_only_group'"
	          echo "permit nopass :$image_console_only_group"
	        } >> /etc/doas.conf
	
	        write_log "Adding '$image_console_user' user to '$image_console_only_group' group" 8
	        addgroup $image_console_user $image_console_only_group >> /chroot.log
	      }
	EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	    
	      # Debug
	      {
	        diff /etc/doas.conf-orig /etc/doas.conf >> /chroot.log || true
	        rm /etc/doas.conf-orig
	      }
	EOF
  fi

  cat <<-EOF >> "$run_script"
	    }
	EOF

  case $image_ssh_server in
    openssh )
      cat <<-EOF >> "$run_script"
	
	    write_log "Disabling SSH-access for users in '$image_console_only_group' group" 4
	    {
	      echo
	      echo "# Deny SSH access for users in '$image_console_only_group' group"
	      echo "DenyGroups $image_console_only_group"
	    } >> /etc/ssh/sshd_config
	EOF
      ;;
  esac

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "/etc/group changes:" 4
	      diff /etc/group-orig /etc/group >> /chroot.log || true
	      rm /etc/group-orig
	
	      write_debug_log "/etc/passwd changes:" 4
	      diff /etc/passwd-orig /etc/passwd >> /chroot.log || true
	      rm /etc/passwd-orig
	
	      write_debug_log "/etc/shadow changes:" 4
	      diff /etc/shadow-orig /etc/shadow >> /chroot.log || true
	      rm /etc/shadow-orig
	EOF

    case $image_ssh_server in
      openssh )
        cat <<-'EOF' >> "$run_script"

	      write_debug_log "/etc/sshd_config changes:" 4
	      diff /etc/ssh/sshd_config-orig /etc/ssh/sshd_config >> /chroot.log || true
	      rm /etc/ssh/sshd_config-orig
	EOF
        ;;
    esac

    cat <<-'EOF' >> "$run_script"
	    }
	EOF
  fi


  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
#
#
configure_cpu_governor() {
  cat <<-'EOF' >> "$run_script"
	
	  write_log "Configuring CPU governor" 2
	  {
	EOF

  cat <<EOF >> "$run_script"
    write_log "Creating init.d script to configure CPU governor" 4
    {
      cat <<-'_SCRIPT_' > /etc/init.d/cpu-governor
	#!/sbin/openrc-run
	
	description="Set CPU Governor"
	
	depend() {
	    after localmount
	    keyword -openvz -prefix -uml -vserver -xenu -lxc
	}
	
	start() {
	    ebegin "Setting CPU governor"
	    echo $image_cpu_governor > /sys/devices/system/cpu/cpufreq/policy0/scaling_governor
	    eend 0
	}
	_SCRIPT_

      chmod a+x /etc/init.d/cpu-governor
    }

EOF

  cat <<-'EOF' >> "$run_script"
	    write_log "Enable CPU governor init.d service" 4
	    {
	EOF

  add_init_d_service "cpu-governor" "default" 6

  cat <<-'EOF' >> "$run_script"
	    } >> /chroot.log 2>&1
	  }
	EOF
}


#
# Configure the relevant Syslog daemon
#
configure_cron() {
  cat <<-'EOF' >> "$run_script"
	
	  write_log "Configuring Cron daemon" 2
	  {
	EOF
  case $image_cron_daemon in
    busybox )
      configure_busybox_cron ;;
  esac

  case $image_os_device_media in
    sdcard | ssd )
      add_fstrim_cronjob ;;
  esac

  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Configure dhclient
#
configure_dhclient() {
  cat <<-'EOF' >> "$run_script"
	    write_log "Configuring dhclient" 4
	    {
	EOF





  cat <<-'EOF' >> "$run_script"
	      :
	EOF





  cat <<-'EOF' >> "$run_script"
	    }
	EOF
}


#
# Configure DHCP client
#
configure_dhcp_client() {
  cat <<-'EOF' >> "$run_script"
	
	  write_log "Configuring DHCP client" 2
	  {
EOF

  case $image_dhcp_client in
    dhclient )
      configure_dhclient ;;
    dhcpcd )
      configure_dhcpcd ;;
    udhcpc )
      configure_busybox_udhcpc ;;
  esac

  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Configure dhcpcd
#
configure_dhcpcd() {
  cat <<-'EOF' >> "$run_script"
	    write_log "Configuring dhcpcd" 4
	    {
	      :
	EOF


  :


  cat <<-'EOF' >> "$run_script"
	    }
	EOF
}


#
# Configure Dropbear server daemon
#
configure_dropbear() {
  cat <<-'EOF' >> "$run_script"
	    write_log "Configuring Dropbear SSH server" 4
	    {
	EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	      # Debug
	      {
	        cp /etc/conf.d/dropbear /etc/conf.d/dropbear-orig
	      }
	
	EOF
  fi


  cat <<-'EOF' >> "$run_script"
	      write_log "Enable Dropbear init.d service" 6
	      {
	EOF

  add_init_d_service "dropbear" "default" 8

  cat <<-'EOF' >> "$run_script"
	      } >> /chroot.log 2>&1
	EOF


  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	
	      # Debug
	      {
	        diff /etc/conf.d/dropbear-orig /etc/conf.d/dropbear >> /chroot.log || true
	        rm /etc/conf.d/dropbear-orig
	      }
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	    }
	EOF
}


#
# Creates a firewall configuration file
#
add_firewall_rules_header() {
  local _ip_version=${1:-4}

  case $_ip_version in
    4 )
      cat <<'EOF' >> "$run_script"

      write_log "Creating IPtables default IPv4 ruleset" 6
      {
        cat <<-_SCRIPT_ >> /etc/iptables/rules-save
EOF
      ;;
    6 )
      cat <<'EOF' >> "$run_script"

      write_log "Creating IPtables default IPv6 ruleset" 6
      {
        cat <<-_SCRIPT_ >> /etc/iptables/rules6-save
EOF
      ;;
  esac

  cat <<'EOF' >> "$run_script"
	# Default ruleset
	*filter
	:INPUT DROP [0:0]
	:FORWARD DROP [0:0]
	:OUTPUT DROP [0:0]
EOF

  # Add sshguard table
  cat <<'EOF' >> "$run_script"
	:sshguard - [0:0]
EOF
}


#
# Finishes creating a firewall configuration file
#
add_firewall_rules_footer() {
  cat <<'EOF' >> "$run_script"
	COMMIT
	_SCRIPT_
      }
EOF
}


#
# Adds a rule to the firewall configuration
#
add_firewall_rule() {
  local _in_out="$1"
	local _action="$2"
	local _interface="${3:-}"
  local _rule="${4:-}"

  local _full_rule

  _full_rule="[0:0]"
  case $_in_out in
    in )
      _full_rule="$_full_rule -A INPUT"
      if [ -n "$_interface" ]; then
        _full_rule="$_full_rule -i $_interface"
      fi
      ;;
    out )
      _full_rule="$_full_rule -A OUTPUT"
      if [ -n "$_interface" ]; then
        _full_rule="$_full_rule -o $_interface"
      fi
      ;;
  esac

  if [ -n "$_rule" ]; then
    _full_rule="$_full_rule $_rule"
  fi

  # shellcheck disable=SC2018,SC2019
  _full_rule="$_full_rule -j $(echo "$_action" | tr 'a-z' 'A-Z')"

  cat <<EOF >> "$run_script"
	$_full_rule
EOF
}


#
# Configure the relevant daemon(s) for specific Cloud Providers
#
configure_cloud_integration() {
  case $image_cloud_type in
    azure )
      cat <<-'EOF' >> "$run_script"
	
	  write_log "Configuring cloud provider integration daemon(s)" 2
	  {
	EOF

      case $image_cloud_type in
        azure )
          add_init_d_service "hv_fcopy_daemon" "default" 4
          add_init_d_service "hv_kvp_daemon" "default" 4
          add_init_d_service "hv_vss_daemon" "default" 4
          ;;
      esac

      cat <<-'EOF' >> "$run_script"
	  } >> /chroot.log 2>&1
	EOF
    ;;
  esac
}


#
# Configure firewall using either iptables or nftables
#
configure_firewall() {
  cat <<-'EOF' >> "$run_script"
	
	  write_log "Configuring firewall" 2
	  {
	EOF

  case $image_firewall in
    iptables )
      configure_firewall_iptables
      ;;
    nftables )
      cat <<-'EOF' >> "$run_script"
	    write_log "Configuring NFtables" 4
	EOF

      :

      cat <<-'EOF' >> "$run_script"
	  }
	EOF
      ;;
  esac

  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Configure firewall using iptables
#
configure_firewall_iptables() {
  cat <<'EOF' >> "$run_script"
    write_log "Configuring IPtables firewall" 4
    {
EOF

  cat <<'EOF' >> "$run_script"
      write_log "Add IPtables kernel modules in /etc/modules-load.d/firewall.conf" 6
      {
        cat <<-_SCRIPT_ > /etc/modules-load.d/firewall.conf
	# Firewall-related modules
	
EOF

  if [ -z "$image_disable_ipv4" ]; then
    cat <<'EOF' >> "$run_script"
	ip_tables
EOF
  fi

  if [ -z "$image_disable_ipv6" ]; then
    cat <<'EOF' >> "$run_script"
	ip6_tables
EOF
  fi

  cat <<'EOF' >> "$run_script"
	nf_conntrack
	xt_tcpudp
	_SCRIPT_
      }
EOF


  if [ -z "$image_disable_ipv4" ]; then
    add_firewall_rules_header

    add_firewall_rule "in" "accept" "lo" "" "Loopback traffic"
    add_firewall_rule "in" "accept" "" "-m conntrack --ctstate RELATED,ESTABLISHED" "Established"
    add_firewall_rule "in" "drop" "" "-m conntrack --ctstate INVALID" "Drop invalid"
    add_firewall_rule "in" "accept" "eth0" "-p udp -m udp --sport 67" "DHCP"
    add_firewall_rule "in" "accept" "" "-p tcp -m tcp --dport 22 -m conntrack --ctstate NEW,ESTABLISHED" "Incoming SSH"
    add_firewall_rule "in" "accept" "eth0" "-p udp -m udp --sport 123" "NTP"
    add_firewall_rule "in" "accept" "eth0" "-p udp -m udp --sport 53" "DNS"
    add_firewall_rule "in" "accept" "" "-p icmp -m icmp --icmp-type 0" "Ping response"

    add_firewall_rule "out" "accept" "lo" "" "Loopback traffic"
    add_firewall_rule "out" "accept" "" "-m conntrack --ctstate ESTABLISHED" "Established"
    add_firewall_rule "out" "accept" "eth0" "-p udp -m udp --dport 67" "DHCP"
    add_firewall_rule "out" "accept" "" "-p tcp -m tcp --sport 22 -m conntrack --ctstate ESTABLISHED" "Existing SSH"
    add_firewall_rule "out" "accept" "" "-p tcp -m tcp --dport 80 -m conntrack --ctstate NEW,ESTABLISHED" "Outgoing HTTP"
    add_firewall_rule "out" "accept" "" "-p tcp -m tcp --dport 443 -m conntrack --ctstate NEW,ESTABLISHED" "Outgoing HTTPS"
    add_firewall_rule "out" "accept" "eth0" "-p udp -m udp --dport 123" "NTP"
    add_firewall_rule "out" "accept" "eth0" "-p udp -m udp --dport 53" "DNS"
    add_firewall_rule "out" "accept" "" "-p icmp -m icmp --icmp-type 8" "Ping request"

    add_firewall_rules_footer
  fi


  if [ -z "$image_disable_ipv6" ]; then
    add_firewall_rules_header 6

    add_firewall_rule "in" "accept" "lo" "" "Loopback traffic"
    add_firewall_rule "in" "accept" "" "-m conntrack --ctstate RELATED,ESTABLISHED" "Established"
    add_firewall_rule "in" "drop" "" "-m conntrack --ctstate INVALID" "Drop invalid"
    add_firewall_rule "in" "accept" "eth0" "-p udp -m udp --sport 547" "DHCPv6"
    add_firewall_rule "in" "accept" "" "-p tcp -m tcp --dport 22 -m conntrack --ctstate NEW,ESTABLISHED" "Incoming SSH"
    add_firewall_rule "in" "accept" "eth0" "-p udp -m udp --sport 53" "DNS"
    add_firewall_rule "in" "accept" "eth0" "-p udp -m udp --sport 123" "NTP"
    add_firewall_rule "in" "accept" "" "-p ipv6-icmp -m icmp6 --icmpv6-type 1" "??"
    add_firewall_rule "in" "accept" "" "-p ipv6-icmp -m icmp6 --icmpv6-type 2" "??"
    add_firewall_rule "in" "accept" "" "-p ipv6-icmp -m icmp6 --icmpv6-type 3" "??"
    add_firewall_rule "in" "accept" "" "-p ipv6-icmp -m icmp6 --icmpv6-type 4" "??"
    add_firewall_rule "in" "accept" "" "-p ipv6-icmp -m icmp6 --icmpv6-type 129" "??"
    case $image_ipv6_type in
      slaac )
        add_firewall_rule "in" "accept" "" "-p ipv6-icmp -m icmp6 --icmpv6-type 134 -m hl --hl-eq 255" "??" ;;
    esac
    add_firewall_rule "in" "accept" "" "-p ipv6-icmp -m icmp6 --icmpv6-type 135 -m hl --hl-eq 255" "??"
    add_firewall_rule "in" "accept" "" "-p ipv6-icmp -m icmp6 --icmpv6-type 136 -m hl --hl-eq 255" "??"

    add_firewall_rule "out" "accept" "lo" "" "Loopback traffic"
    add_firewall_rule "out" "accept" "" "-m conntrack --ctstate ESTABLISHED" "Established"
    add_firewall_rule "out" "accept" "eth0" "-p udp -m udp --dport 547" "DHCPv6"
    add_firewall_rule "out" "accept" "" "-p tcp -m tcp --sport 22 -m conntrack --ctstate ESTABLISHED" "Existing SSH"
    add_firewall_rule "out" "accept" "eth0" "-p udp -m udp --dport 53" "DNS"
    add_firewall_rule "out" "accept" "eth0" "-p udp -m udp --dport 123" "NTP"
    add_firewall_rule "out" "accept" "" "-p tcp -m tcp --dport 80 -m conntrack --ctstate NEW,ESTABLISHED" "HTTP"
    add_firewall_rule "out" "accept" "" "-p tcp -m tcp --dport 443 -m conntrack --ctstate NEW,ESTABLISHED" "HTTPS"
    add_firewall_rule "out" "accept" "" "-p ipv6-icmp -m icmp6 --icmpv6-type 1" "??"
    add_firewall_rule "out" "accept" "" "-p ipv6-icmp -m icmp6 --icmpv6-type 2" "??"
    add_firewall_rule "out" "accept" "" "-p ipv6-icmp -m icmp6 --icmpv6-type 3" "??"
    add_firewall_rule "out" "accept" "" "-p ipv6-icmp -m icmp6 --icmpv6-type 4" "??"
    add_firewall_rule "out" "accept" "" "-p ipv6-icmp -m icmp6 --icmpv6-type 128" "??"
    case $image_ipv6_type in
      slaac )
        add_firewall_rule "out" "accept" "" "-p ipv6-icmp -m icmp6 --icmpv6-type 133 -m hl --hl-eq 255" "??" ;;
    esac
    add_firewall_rule "out" "reject" "" "-p ipv6-icmp -m icmp6 --icmpv6-type 134" "??"
    add_firewall_rule "out" "accept" "" "-p ipv6-icmp -m icmp6 --icmpv6-type 135 -m hl --hl-eq 255" "??"
    add_firewall_rule "out" "accept" "" "-p ipv6-icmp -m icmp6 --icmpv6-type 136 -m hl --hl-eq 255" "??"
    add_firewall_rule "out" "reject" "" "-p ipv6-icmp -m icmp6 --icmpv6-type 137" "??"

    add_firewall_rules_footer
  fi


  cat <<-'EOF' >> "$run_script"
	
	      write_log "Enable IPtables init.d services" 6
	      {
	EOF

  if [ -z "$image_disable_ipv4" ]; then
    add_init_d_service "iptables" "default" 8
  fi
  if [ -z "$image_disable_ipv6" ]; then
    case $image_alpine_release in
      v3.13 | v3.14 | v3.15 | v3.16 | v3.17 | v3.18 )
        add_init_d_service "ip6tables" "default" 8 ;;
      * )
        # There is no ip6tables sub-package anymore
        : ;;
    esac
  fi

  cat <<-'EOF' >> "$run_script"
	      } >> /chroot.log 2>&1
	    }
	EOF
}


#
# Configure getty daemons
#
configure_gettys() {
  cat <<-'EOF' >> "$run_script"
	
	  write_log "Configuring getty daemons" 2
	  {
	EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	    # Debug
	    {
	      cp /etc/inittab /etc/inittab-orig
	    }
	
	EOF
  fi

  case $image_console_type in
    none )
      cat <<-EOF >> "$run_script"
	    write_log "Disable all normal consoles" 4
	    {
	EOF
      ;;
    normal_and_serial )
      cat <<-EOF >> "$run_script"
	    write_log "Enable normal and serial consoles" 4
	    {
	EOF
      ;;
    * )
      cat <<-EOF >> "$run_script"
	    write_log "Enable ${image_console_type} console" 4
	    {
	EOF
      ;;
  esac
  case $image_console_type in
    normal_and_serial )
      _getty_port_name="tty1"
      _getty_options=" 38400 ${_getty_port_name}"

      cat <<-EOF >> "$run_script"
	      write_log "Enabling getty on normal console" 6
	      sed -i -E -e 's|^${_getty_port_name}:.*|${_getty_port_name}::respawn:/sbin/getty${_getty_options}|g' /etc/inittab
	EOF
      
      _getty_port_name="${image_serial_console_name}"
      _getty_options=" -L ${image_serial_console_port_speed} ${image_serial_console_name} vt100"

      cat <<-EOF >> "$run_script"
	
	      write_log "Enabling getty on ${_getty_port_name} for serial console" 6
	      sed -i \\
	        -e 's|^[#]*${_getty_port_name}::.*$|${_getty_port_name}::respawn:/sbin/getty${_getty_options}|g' \\
	        /etc/inittab
	    }
	EOF
      ;;

    normal )
      _getty_port_name="tty1"
      _getty_options=" 38400 ${_getty_port_name}"

      cat <<-EOF >> "$run_script"
	      write_log "Enabling getty on normal console" 6
	      sed -i -E -e 's|^${_getty_port_name}:.*|${_getty_port_name}::respawn:/sbin/getty${_getty_options}|g' /etc/inittab
	    }
	EOF
      ;;

    * )
      _getty_port_name="tty1"

      cat <<-EOF >> "$run_script"
	      write_log "Disabling getty on normal console ${_getty_port_name}" 6
	      sed -i -E -e 's|^${_getty_port_name}:|#${_getty_port_name}:|g' /etc/inittab
	EOF

      case $image_console_type in
        hypervisor )
          _getty_port_name="hvc0"
          _getty_options=" 38400 ${_getty_port_name}"
          ;;
        serial )
          _getty_port_name="${image_serial_console_name}"
          _getty_options=" -L ${image_serial_console_port_speed} ${image_serial_console_name} vt100"
          ;;
      esac

      if [ "$image_console_type" != "none" ]; then
        cat <<-EOF >> "$run_script"
	
	      write_log "Enabling getty on ${_getty_port_name} for ${image_console_type} console" 6
	      sed -i \\
	        -e 's|^[#]*ttyS0::.*$|${_getty_port_name}::respawn:/sbin/getty${_getty_options}|g' \\
	        /etc/inittab
	EOF
      fi

      cat <<-EOF >> "$run_script"
	    }
	EOF
      ;;
  esac

  cat <<-'EOF' >> "$run_script"
	
	    write_log "Disabling unused gettys" 4
	EOF

  if [ "$image_console_type" = "none" ]; then
    # Have no console gettys
    _first_getty_to_disable="2"
  else
    case $image_class in
      cloud | virtual )
        # Only have 1 console getty for cloud/virtual machines
        _first_getty_to_disable="2" ;;
      * )
        # Keep 2 console gettys for physical machines
        _first_getty_to_disable="3" ;;
    esac
  fi

  cat <<-EOF >> "$run_script"
	    sed -i -E -e 's|^tty([${_first_getty_to_disable}-6].*)|#tty\1|g' /etc/inittab
	EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      diff /etc/inittab-orig /etc/inittab >> /chroot.log || true
	      rm /etc/inittab-orig
	    }
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Configure hd-idle
#
configure_hd_idle() {
  cat <<-'EOF' >> "$run_script"
	
	  write_log "Configuring hd-idle daemon" 2
	  {
	    sed -i -e 's|[#]DISK=".*$|DISK="/dev/sda"|g' /etc/conf.d/hd-idle
	EOF

  cat <<-'EOF' >> "$run_script"
	
	    write_log "Enable hd-idle init.d service" 4
	    {
	EOF

  add_init_d_service "hd-idle" "default" 6

  cat <<-'EOF' >> "$run_script"
	    } >> /chroot.log 2>&1
	EOF


  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Configure the relevant daemon(s) for specific hypervisors
#
configure_hypervisor_integration() {
  case $image_vm_type in
    hyperv | libvirtd | proxmox | qemu | utm | virtualbox | vmware )
      cat <<-'EOF' >> "$run_script"
	
	  write_log "Configuring hypervisor integration daemon(s)" 2
	  {
	EOF

      case $image_vm_type in
        hyperv )
          add_init_d_service "hv_fcopy_daemon" "default" 4
          add_init_d_service "hv_kvp_daemon" "default" 4
          add_init_d_service "hv_vss_daemon" "default" 4
          ;;
        libvirtd | proxmox | qemu | utm )
          add_init_d_service "qemu-guest-agent" "default" 4 ;;
        virtualbox )
          add_init_d_service "virtualbox-guest-additions" "default" 4 ;;
        vmware )
          case $image_arch in
            aarch64 | x86_64 )
              add_init_d_service "open-vm-tools" "default" 4 ;;
            * )
              cat <<-'EOF' >> "$run_script"
	    :
	EOF
              ;;
          esac
      esac

      cat <<-'EOF' >> "$run_script"
	  } >> /chroot.log 2>&1
	EOF
    ;;
  esac
}


#
# Configure msmtp
#
configure_msmtp() {
  cat <<-'EOF' >> "$run_script"
	
	  write_log "Configuring msmtp daemon" 2
	  {
	EOF


  :


  cat <<-'EOF' >> "$run_script"
	
	    write_log "Enable msmtp init.d service" 4
	    {
	EOF

  add_init_d_service "msmtp" "default" 6

  cat <<-'EOF' >> "$run_script"
	    } >> /chroot.log 2>&1
	EOF


  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Configure OpenSSH server daemon
#
configure_opensshd() {
  local _dropbear_rsa_key_length=3072
  local _rsa_key_length=4096

  cat <<-'EOF' >> "$run_script"
	    write_log "Configuring OpenSSH server" 4
	    {
	EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	      # Debug
	      {
	        cp /etc/conf.d/sshd /etc/conf.d/sshd-orig
	        cp /etc/ssh/sshd_config /etc/ssh/sshd_config-orig
	      }
	
	EOF
  fi


  if [ -n "$image_harden" ] || [ "$image_ssh_keytypes" = "ed25519" ]; then
    cat <<-'EOF' >> "$run_script"
	      write_log "Only generate ED25519 host key" 6
	      sed -i \
	        -e 's/^[#]*key_types_to_generate=.*$/key_types_to_generate="ed25519"/' \
	        /etc/conf.d/sshd
	EOF
  else
    if [ -n "$luks_remote_unlock_enabled" ]; then
      cat <<-EOF >> "$run_script"
	
	      _rsa_key_length=$_rsa_key_length
	EOF
    else
      # Dropbear has shorter supported length of RSA key
      cat <<-EOF >> "$run_script"
	
	      _rsa_key_length=$_dropbear_rsa_key_length
	EOF
    fi

    cat <<-'EOF' >> "$run_script"
	      write_log "Only generate ED25519 and \${_rsa_key_length}bit RSA host keys" 6
	      sed -i \\
	        -e 's/^[#]*key_types_to_generate=.*$/key_types_to_generate="ed25519 rsa"/' \
	        -e "s/^[#]*rsa_bit_size=.*$/rsa_bit_size=\"\${_rsa_key_length}\"/" \
	        /etc/conf.d/sshd
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	
	      # Configure sshd to:
	EOF

  if [ -n "$image_harden" ] || [ "$image_ssh_keytypes" = "ed25519" ]; then
    cat <<-'EOF' >> "$run_script"
	      # - only use ED25519 host key
	EOF
  else
    cat <<-'EOF' >> "$run_script"
	      # - only use ED25519 & RSA host keys
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	      # - prevent challenge-response logins
	      # - prevent keyboard-interactive logins
	      # - prevent logins to accounts with empty passwords
	      # - prevent root logins
	      # - use built-in SFTP server
	      write_log "Prevent root logins" 6
	      sed -i \
	        -e 's|^#HostKey /etc/ssh/ssh_host_ed25519_key$|HostKey /etc/ssh/ssh_host_ed25519_key|' \
	        -e 's|^[#]*ChallengeResponseAuthentication .*$|ChallengeResponseAuthentication no|' \
	        -e 's|^[#]*KbdInteractiveAuthentication .*$|KbdInteractiveAuthentication no|' \
	        -e 's|^[#]*PermitEmptyPasswords .*$|PermitEmptyPasswords no|' \
	        -e 's|^[#]*PermitRootLogin .*$|PermitRootLogin no|' \
	        -e 's|^[#]*Subsystem[ \t].*sftp[ \t].*$|Subsystem sftp internal-sftp|' \
	        /etc/ssh/sshd_config
	EOF

  if [ -n "$image_insecure" ]; then
    cat <<-'EOF' >> "$run_script"
	      # - permit password-based logins
	      write_log "Permit password-based SSH logins" 6
	      sed -i \
	        -e 's|^[#]*PasswordAuthentication .*$|PasswordAuthentication yes|' \
	        /etc/ssh/sshd_config
	EOF
  else
    cat <<-'EOF' >> "$run_script"
	      # - prevent password-based logins
	      write_log "Prevent password-based SSH logins" 6
	      sed -i \
	        -e 's|^[#]*PasswordAuthentication .*$|PasswordAuthentication no|' \
	        /etc/ssh/sshd_config
	EOF
  fi

  if [ -n "$image_enable_pam" ]; then
    case $image_cloud_software in
      cloud-init )
        cat <<-'EOF' >> "$run_script"
	
	      # - enable PAM
	      write_log "Enable PAM support" 6
	      sed -i -e 's|^[#]*UsePAM .*$|UsePAM yes|' /etc/ssh/sshd_config
	EOF
        ;;
      * )
        cat <<-'EOF' >> "$run_script"
	
	      # - disable PAM
	      write_log "Disabling PAM support" 6
	      sed -i -e 's|^[#]*UsePAM .*$|#UsePAM no|' /etc/ssh/sshd_config
	EOF
        ;;
    esac
  else
    cat <<-'EOF' >> "$run_script"
	
	      # - disable PAM
	      write_log "Disabling PAM support" 6
	      sed -i -e 's|^[#]*UsePAM .*$|#UsePAM no|' /etc/ssh/sshd_config
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	
	      # - ensure only key-based authentication is enabled
	      sed -i -e '/^[#]*AuthenticationMethods .*$/d' /etc/ssh/sshd_config
	      {
	        printf '\n'
	        printf 'AuthenticationMethods "publickey"\n'
	        printf '\n'
	      } >> /etc/ssh/sshd_config
	EOF

  case $image_ssh_keytypes in
    ed25519 )
      : ;;
    * )
      # Enable RSA key use
      cat <<-'EOF' >> "$run_script"
	
	      write_log "Enable RSA key use" 6
	      sed -i \
	        -e 's|^#HostKey /etc/ssh/ssh_host_rsa_key$|HostKey /etc/ssh/ssh_host_rsa_key|' \
	        /etc/ssh/sshd_config
	EOF
      ;;
  esac

  if [ -n "$image_disable_ipv4" ]; then
    cat <<-'EOF' >> "$run_script"
	
	      write_log "Enable only IPv6 access" 6
	      sed -i \
	        -e 's/^[#]*AddressFamily .*$/AddressFamily inet6/g' \
	        -e 's/^ListenAddress 0.0.0.0.*$/#ListenAddress 0.0.0.0/g' \
	        -e 's/^#ListenAddress ::.*$/ListenAddress ::/g' \
	        /etc/ssh/sshd_config
	EOF
  elif [ -n "$image_disable_ipv6" ]; then
    cat <<-'EOF' >> "$run_script"
	
	      write_log "Enable only IPv4 access" 6
	      sed -i \
	        -e 's/^[#]*AddressFamily .*$/AddressFamily inet/g' \
	        -e 's/^#ListenAddress 0.0.0.0.*$/ListenAddress 0.0.0.0/g' \
	        -e 's/^ListenAddress ::.*$/#ListenAddress ::/g' \
	        /etc/ssh/sshd_config
	EOF
  else
    cat <<-'EOF' >> "$run_script"
	
	      write_log "Enable both IPv4 and IPv6 access" 6
	      sed -i \
	        -e 's/^[#]*AddressFamily .*$/AddressFamily any/g' \
	        -e 's/^#ListenAddress 0.0.0.0.*$/ListenAddress 0.0.0.0/g' \
	        -e 's/^#ListenAddress ::.*$/ListenAddress ::/g' \
	        /etc/ssh/sshd_config
	EOF
  fi


  if [ -n "$image_harden" ]; then
    cat <<-'EOF' >> "$run_script"
	
	      write_log "Further harden the configuration" 6
	      # - limit Ciphers to single strong one
	      # - limit KexAlgorithms to curve 25519
	      # - limit MAC to single Encrypt-then-MAC version
	      # - only accept the use of ED25519 public keys
	      {
	        printf 'CASignatureAlgorithms  ssh-ed25519\n'
	        printf 'Ciphers chacha20-poly1305@openssh.com\n'
	        printf 'KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org\n'
	        printf 'MACS hmac-sha2-512-etm@openssh.com\n'
	        printf 'PubkeyAcceptedKeyTypes ssh-ed25519\n'
	        printf '\n'
	      } >> /etc/ssh/sshd_config
	EOF

    cat <<-'EOF' >> "$run_script"
	
	      write_log "Disable RSA key use" 6
	      sed -i \
	        -e 's|^HostKey /etc/ssh/ssh_host_rsa_key$|#HostKey \
	        /etc/ssh/ssh_host_rsa_key|' /etc/ssh/sshd_config
	EOF
  else
    # Basic sensible SSH configuration
    cat <<-'EOF' >> "$run_script"
	
	      write_log "Basic sshd secure configuration" 6
	      # - limit Ciphers to relatively strong ones
	      # - limit KexAlgorithms to curve 25519
	      # - limit MAC to Encrypt-then-MAC versions
	      # - only accept relatively strong public key types
	      {
	        printf 'Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com\n'
	        printf 'KexAlgorithms curve25519-sha256,curve25519-sha256@libssh.org\n'
	        printf 'MACS hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com\n'
	        printf 'PubkeyAcceptedKeyTypes ssh-ed25519,rsa-sha2-512,rsa-sha2-256\n'
	        printf '\n'
	      } >> /etc/ssh/sshd_config
	EOF
  fi


  cat <<-'EOF' >> "$run_script"
	
	      write_log "Enable OpenSSH init.d service" 6
	      {
	EOF

  add_init_d_service "sshd" "default" 8

  cat <<-'EOF' >> "$run_script"
	      } >> /chroot.log 2>&1
	EOF


  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	
	      # Debug
	      {
	        diff /etc/conf.d/sshd-orig /etc/conf.d/sshd >> /chroot.log || true
	        rm /etc/conf.d/sshd-orig
	
	        diff /etc/ssh/sshd_config-orig /etc/ssh/sshd_config >> /chroot.log \
	          || true
	        rm /etc/ssh/sshd_config-orig
	      }
	EOF
  fi


  cat <<-'EOF' >> "$run_script"
	    }
	EOF
}


#
# Configure Rsyslog server daemon
#
configure_rsyslog() {
  cat <<-'EOF' >> "$run_script"
	    write_log "Configuring Rsyslog server" 4
	    {
	EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	      # Debug
	      {
	        cp /etc/rsyslog.conf /etc/rsyslog.conf-orig
	      }
	
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	      # Create empty file as rsyslog's logrotate config expects it
	      :> /var/log/mail.log
	EOF


  case $image_os_device_media in
    flash | sdcard | ssd )
      cat <<-'EOF' >> "$run_script"
	
	      write_log "Disable routine 'mark' message on SSD/flash-based servers" 6
	      {
	        sed -i -e "s/^[#]module(load=\"immark\")/module(load=\"immark\")/g" \
	        /etc/rsyslog.conf
	      }
	EOF
      ;;
  esac


  cat <<-'EOF' >> "$run_script"
	
	      write_log "Enable rsyslog init.d service" 6
	      {
	EOF

  add_init_d_service "rsyslog" "boot" 8

  cat <<-'EOF' >> "$run_script"
	      } >> /chroot.log 2>&1
	EOF


  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	
	      # Debug
	      {
	        diff /etc/rsyslog.conf-orig /etc/rsyslog.conf >> /chroot.log || true
	        rm /etc/rsyslog.conf-orig
	      }
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	    }
	EOF
}


#
# Configure various services that will run on the server
#
configure_services() {
  cat <<-'EOF' >> "$run_script"
	
	write_log "Configuring various system services"
	{
	EOF

  if [ -n "$image_harden" ]; then
    configure_sysctl
    configure_firewall
  fi

  # ACPI - either button/acpid or tiny-button
  case $image_acpi_power_method in
    button )
      configure_acpid ;;
    tiny-power-button )
      modprobe_enable_tiny_power_button ;;
  esac

  configure_cron
  configure_dhcp_client
  configure_gettys
  case $image_console_type in
    none)
      : ;;
    * )
      if [ "$image_no_console_user" = "false" ]; then
        configure_console_user
      fi
  esac
  case $image_ntp_daemon in
    none )
      : ;;
    * )
      configure_ntpd ;;
  esac
  configure_syslogd
  configure_sshd

  if [ -n "$image_cpu_governor" ]; then
    configure_cpu_governor
  fi

  if [ -n "$image_lvm_rootfs" ]; then
    cat <<-'EOF' >> "$run_script"
	
	  write_log "Enable lvm init.d service" 2
	  {
	EOF

    add_init_d_service "lvm" "boot" 4

    cat <<-'EOF' >> "$run_script"
	  } >> /chroot.log 2>&1
	EOF
  fi

  if [ -z "$image_barebones" ]; then
    case $image_alpine_release in
      v3.13 | v3.14 | v3.15 )
        # These releases do not have suitable acct package
        : ;;
      * )
        configure_acct ;;
    esac

    case $image_class in
      physical )
        case $image_os_device_media in
          disk )
            case $image_alpine_release in
              v3.13 | v3.14 | v3.15 )
                # These releases do not have hd-idle package
                : ;;
              * )
                configure_hd_idle ;;
            esac
            ;;
        esac
        case $image_os_device_type in
          sata | scsi )
            configure_smartmontools ;;
        esac
        ;;
    esac

    if [ -n "$image_experimental" ]; then
      configure_sshguard
    fi
    if [ "$image_enable_utmp" = "true" ]; then
      configure_utmps
    fi
    if [ -n "$image_enable_watchdog" ]; then
      configure_watchdog
    fi

    case $image_class in
      cloud )
        configure_cloud_integration ;;
      virtual )
        configure_hypervisor_integration ;;
    esac
  fi

  cat <<-'EOF' >> "$run_script"
	}
	EOF
}


#
# Configure smartmontools
#
configure_smartmontools() {
  cat <<-'EOF' >> "$run_script"
	
	  write_log "Configuring Smartmontools daemon" 2
	  {
	EOF

  # Missing code to modify smartd.conf
  :

  cat <<-'EOF' >> "$run_script"
	    write_log "Enable smartd init.d service" 4
	    {
	EOF

  add_init_d_service "smartd" "default" 6

  cat <<-'EOF' >> "$run_script"
	    } >> /chroot.log 2>&1
	EOF


  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Configure the relevant SSH server
#
configure_sshd() {
  cat <<-'EOF' >> "$run_script"
	
	  write_log "Configuring SSH server" 2
	  {
	EOF

  case $image_ssh_server in
    dropbear )
      configure_dropbear ;;
    openssh )
      configure_opensshd ;;
    tinyssh )
      configure_tinysshd ;;
  esac

  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Configure sysctl file
#
configure_sysctl() {
  cat <<-'EOF' >> "$run_script"
	  write_log "Configuring sysctl" 2
	  {
	EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	    # Debug
	    {
	      cp /etc/sysctl.conf /etc/sysctl.conf-orig
	    }
	
	EOF
  fi


  cat <<'EOF' >> "$run_script"
    write_log "Create /etc/sysctl.d/01-general.conf file" 4
    {
      cat <<-_SCRIPT_ > /etc/sysctl.d/01-general.conf
	# /etc/sysctl.d/01-general.conf
	
	# Restarts computer after 120 seconds after kernel panic
	kernel.panic = 120
	
	# Users should not be able to create soft or hard links to files which they
	# do not own. This mitigates several privilege escalation vulnerabilities.
	fs.protected_hardlinks = 1
	fs.protected_symlinks = 1
	
	# Disable unprivileged use of the bpf(2) syscall. Allowing unprivileged use
	# of the bpf(2) syscall may allow a malicious user to compromise the machine.
	kernel.unprivileged_bpf_disabled = 1
	
	_SCRIPT_
    }
EOF

  cat <<'EOF' >> "$run_script"

    write_log "Create /etc/sysctl.d/01-ip-general.conf file" 4
    {
      cat <<-_SCRIPT_ > /etc/sysctl.d/01-ip-general.conf
	# /etc/sysctl.d/01-ip-general.conf
	
	# Prevents SYN DOS attacks. Applies to ipv6 as well, despite name.
	net.ipv4.tcp_syncookies = 1
	
	_SCRIPT_
    }
EOF


  if [ -z "$image_disable_ipv4" ]; then
    cat <<'EOF' >> "$run_script"

    write_log "Create /etc/sysctl.d/05-ipv4.conf file" 4
    {
      cat <<-_SCRIPT_ > /etc/sysctl.d/05-ipv4.conf
	# /etc/sysctl.d/05-ipv4.conf
	
	# Prevents ip spoofing.
	net.ipv4.conf.default.rp_filter = 1
	net.ipv4.conf.all.rp_filter = 1
	
	# Only groups within this id range can use ping.
	net.ipv4.ping_group_range=999 59999
	
	# Redirects can potentially be used to maliciously alter hosts routing tables.
	net.ipv4.conf.all.accept_redirects = 0
	net.ipv4.conf.all.secure_redirects = 1
	
	# The source routing feature includes some known vulnerabilities.
	net.ipv4.conf.all.accept_source_route = 0
	
	# See RFC 1337
	net.ipv4.tcp_rfc1337 = 1
EOF

    if [ -n "$image_harden" ]; then
      cat <<'EOF' >> "$run_script"
	
EOF
    fi

    cat <<'EOF' >> "$run_script"
	_SCRIPT_
    }
EOF
  fi


  if [ -z "$image_disable_ipv6" ]; then
    cat <<'EOF' >> "$run_script"

    write_log "Create /etc/sysctl.d/05-ipv6.conf file" 4
    {
      cat <<-_SCRIPT_ > /etc/sysctl.d/05-ipv6.conf
	# /etc/sysctl.d/05-ipv6.conf
	
	# Redirects can potentially be used to maliciously alter hosts routing tables.
	net.ipv6.conf.all.accept_redirects = 0
	
	# The source routing feature includes some known vulnerabilities.
	net.ipv6.conf.all.accept_source_route = 0
	
	## Enable IPv6 Privacy Extensions (see RFC4941 and RFC3041)
	net.ipv6.conf.default.use_tempaddr = 2
	net.ipv6.conf.all.use_tempaddr = 2
EOF

    if [ -n "$image_harden" ]; then
      cat <<'EOF' >> "$run_script"
	
EOF
    fi

    cat <<'EOF' >> "$run_script"
	_SCRIPT_
    }
EOF
  fi


  cat <<-'EOF' >> "$run_script"
	
	    write_log "Enable sysctl init.d service" 4
	    {
	EOF

    add_init_d_service "sysctl" "boot" 6

  cat <<-'EOF' >> "$run_script"
	    } >> /chroot.log 2>&1
	EOF


  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      diff /etc/sysctl.conf-orig /etc/sysctl.conf >> /chroot.log || true
	      rm /etc/sysctl.conf-orig
	    }
	EOF

  fi


  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Configure the relevant Syslog daemon
#
configure_syslogd() {
  cat <<-'EOF' >> "$run_script"
	
	  write_log "Configuring Syslog server" 2
	  {
	EOF

  case $image_syslog_server in
    busybox )
      configure_busybox_syslogd ;;
    rsyslog )
      configure_rsyslog ;;
  esac

  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Configure the SSHguard service
#
configure_sshguard() {
  cat <<'EOF' >> "$run_script"

  write_log "Configuring sshguard" 2
  {
    mkdir /etc/sshguard

    write_log "Creating sshguard.conf file" 4
    {
      cat <<-_SCRIPT_ > /etc/sshguard.conf
	# /etc/sshguard.conf
	
	# Full path to backend executable (required, no default)
EOF

  case $image_firewall in
    iptables )
      cat <<'EOF' >> "$run_script"
	BACKEND="/usr/libexec/sshg-fw-iptables"
EOF
      ;;
    nftables )
      cat <<'EOF' >> "$run_script"
	BACKEND="/usr/libexec/sshg-fw-nft-sets"
EOF
      ;;
    * )
      cat <<'EOF' >> "$run_script"
	BACKEND="/usr/libexec/sshg-fw-????"
EOF
      ;;
  esac

  cat <<'EOF' >> "$run_script"
	
	# Space-separated list of log files to monitor. (optional, no default)
	FILES="/var/log/messages"
	
	# Shell command that provides logs on standard output. (optional, no default)
	# Example 1: ssh and sendmail from systemd journal:
	#LOGREADER="LANG=C /usr/bin/journalctl -afb -p info -n1 -t sshd -t sendmail -o cat"
	# Example 2: ssh from os_log (macOS 10.12+)
	#LOGREADER="/usr/bin/log stream --style syslog --predicate '(processImagePath contains \"sshd\")'"
	
	#### OPTIONS ####
	# Block attackers when their cumulative attack score exceeds THRESHOLD.
	# Most attacks have a score of 10. (optional, default 30)
	THRESHOLD=30
	
	# Block attackers for initially BLOCK_TIME seconds after exceeding THRESHOLD.
	# Subsequent blocks increase by a factor of 1.5. (optional, default 120)
	BLOCK_TIME=120
	
	# Remember potential attackers for up to DETECTION_TIME seconds before
	# resetting their score. (optional, default 1800)
	DETECTION_TIME=1800
	
	# Size of IPv6 'subnet to block. Defaults to a single address, CIDR notation. (optional, default to 128)
	IPV6_SUBNET=128
	
	# Size of IPv4 subnet to block. Defaults to a single address, CIDR notation. (optional, default to 32)
	IPV4_SUBNET=32
	
	#### EXTRAS ####
	# !! Warning: These features may not work correctly with sandboxing. !!
	
	# Full path to PID file (optional, no default)
	#PID_FILE=/run/sshguard.pid
	
	# Colon-separated blacklist threshold and full path to blacklist file.
	# (optional, no default)
	#BLACKLIST_FILE=90:/var/lib/sshguard/enemies
	
	# IP addresses listed in the WHITELIST_FILE are considered to be
	# friendlies and will never be blocked.
	WHITELIST_FILE=/etc/sshguard/friends
	
	# If PARSER is unset, SSHGuard will use the installed sshg-parser as its
	# parser. Setting PARSER overrides this, so that you can use your own parser.
	#PARSER=
	
	# Run POST_PARSER as a filter after the parser. POST_PARSER must read as input
	# and produce as output lines in the format used by sshg-parser. This example
	# implements primitive whitelisting, preventing sshg-blocker from seeing
	# attacks from 1.2.3.4. Unlike whitelisting, attacks filtered by POST_PARSER
	# are not logged by SSHGuard.
	#POST_PARSER="grep -v 1.2.3.4"
	
	_SCRIPT_
    }

    write_log "Creating friends file" 4
    {
      cat <<-_SCRIPT_ > /etc/sshguard/friends
	# /etc/sshguard/friends
	
	127.0.0.0/8
	
	_SCRIPT_
    }
EOF


  cat <<-'EOF' >> "$run_script"
	
	    write_log "Enable sshguard init.d service" 4
	    {
	EOF

  add_init_d_service "sshguard" "default" 6

  cat <<-'EOF' >> "$run_script"
	    } >> /chroot.log 2>&1
	EOF


  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Configure TinySSH server daemon
#
configure_tinysshd() {
  cat <<-'EOF' >> "$run_script"
	    write_log "Configuring TinySSH server" 4
	    {
	EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	      # Debug
	      {
	        cp /etc/conf.d/tinysshd /etc/conf.d/tinysshd-orig
	      }
	
	EOF
  fi

  if [ -z "$image_barebones" ]; then
    cat <<-'EOF' >> "$run_script"
	      write_log "Enable SFTP server" 6
	      sed -i \
	        -e 's|^# OPTIONS=.*|OPTIONS="-l -v -x sftp=/usr/lib/ssh/sftp-server"|' \
	        /etc/conf.d/tinysshd
	
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	      write_log "Enable tinyssh init.d service" 6
	      {
	EOF

  add_init_d_service "tinysshd" "default" 6

  cat <<-'EOF' >> "$run_script"
	      } >> /chroot.log 2>&1
	EOF


  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	
	      # Debug
	      {
	        diff /etc/conf.d/tinysshd-orig /etc/conf.d/tinysshd >> /chroot.log || true
	        rm /etc/conf.d/tinysshd-orig
	      }
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	    }
	EOF
}


#
# Configure utmps daemons
#
configure_utmps() {
  cat <<-'EOF' >> "$run_script"
	
	  write_log "Configuring UTMPS daemons" 4
	  {
	    write_log "Enable utmps init.d services" 6
	    {
	EOF

  add_init_d_service "utmp-prepare" "boot" 6
  add_init_d_service "utmp-init" "boot" 6
  add_init_d_service "btmpd" "boot" 6
  add_init_d_service "utmpd" "boot" 6
  add_init_d_service "wtmpd" "boot" 6

  cat <<-'EOF' >> "$run_script"
	    } >> /chroot.log 2>&1
	  }
	EOF
}


#
# Configure Watchdog daemon
#
configure_watchdog() {
  cat <<-'EOF' >> "$run_script"
	
	  write_log "Configuring Watchdog daemon" 2
	  {
	EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	    # Debug
	    {
	      cp /etc/conf.d/watchdog /etc/conf.d/watchdog-orig
	    }
	
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	    write_log "Define watchdog device" 4
	    sed -i \
	      -e 's|^[#]WATCHDOG_DEV=.*|WATCHDOG_DEV="/dev/watchdog"|' \
	      /etc/conf.d/watchdog
	EOF


  cat <<-'EOF' >> "$run_script"
	
	    write_log "Enable watchdog init.d service" 4
	    {
	EOF

  add_init_d_service "watchdog" "default" 6

  cat <<-'EOF' >> "$run_script"
	    } >> /chroot.log 2>&1
	EOF


  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      diff /etc/conf.d/watchdog-orig /etc/conf.d/watchdog >> /chroot.log || true
	      rm /etc/conf.d/watchdog-orig
	    }
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Ensure tiny-power-button is removed from modprobe blacklist and that
# acpi button is blacklisted instead
#
modprobe_enable_tiny_power_button() {
  cat <<-'EOF' >> "$run_script"
	
	  write_log "Adjusting modprobe blacklist for tiny-power-button" 4
	  {
	EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	    # Debug
	    {
	      cp /etc/modprobe.d/blacklist.conf /etc/modprobe.d/blacklist.conf-orig
	    }
	
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	    write_log "Removing tiny_power_button module from modprobe blacklist" 6
	    sed -i -E -e 's/^(blacklist tiny_power_button)$/#\1/' \\
	      /etc/modprobe.d/blacklist.conf
	
	    write_log "Adding ACPI button module to modprobe blacklist" 6
	    printf '\n# Using tiny_power_button instead\nblacklist button\n' \
	      >> /etc/modprobe.d/blacklist.conf
	EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      diff /etc/modprobe.d/blacklist.conf-orig /etc/modprobe.d/blacklist.conf \
	        >> /chroot.log || true
	      rm /etc/modprobe.d/blacklist.conf-orig
	    }
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}
