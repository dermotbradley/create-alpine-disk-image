#!/bin/sh
# shellcheck disable=SC2039

#############################################################################
##
##  grub-functions
##
##  Copyright 2021-2022 Dermot Bradley <dermot_bradley@yahoo.com>
##
##  Licensed via GPL version 2.0
##
#############################################################################


#
# Check if Grub supports booting from the selected filesystem type
#
check_grub_supports_fs() {
  case $image_fs_type in
    btrfs | ext4 | f2fs | xfs )
      : ;;
    * )
      error_message "Grub bootloader does not support booting from $image_fs_type filesystem!"
  esac
}


#
# Check if Grub supports booting from LUKS
#
check_grub_supports_luks() {
  # Grub does support booting from LUKS
  :
}


#
# Check if Grub supports booting from LVM
#
check_grub_supports_lvm() {
  # Grub does support booting from LVM
  :
}


#
# Configure Grub
#
configure_bootloader_grub() {
  local _cmdline _disable_recovery _enable_luks_cryptodisk _menu_timeout

  _cmdline="$base_cmdline"

  case $image_alpine_release in
    v3.13 | v3.14 | v3.15 | v3.16 )
      # Ensure that USB keyboard work when in initramfs
      case $image_keyboard_type in
        usb | generic )
          if is_in_comma_list "$CADI_SUPPORTED_CONSOLE_KEYBOARD_TYPES" \
                              "usb"; then
            # It is important to load EHCI before OHCI/UHCI as otherwise a
            # kernel warning will appear in 'dmesg' output:
            #   Warning! ehci_hcd should always be loaded before uhci_hcd and ohci_pci, not after
            _cmdline="$_cmdline modules=xhci-pci,ehci-pci"
            if [ -z "$image_cpu_vendor" ] || \
               [ "$image_cpu_vendor" = "amd" ]; then
              _cmdline="${_cmdline},ohci-pci"
            fi
            if [ -z "$image_cpu_vendor" ] || \
               [ "$image_cpu_vendor" = "intel" ]; then
              _cmdline="${_cmdline},uhci-hcd"
            fi
            _cmdline="${_cmdline},usbhid,hid-generic"
          fi
          ;;
      esac
      ;;
    * )
      # mkinitfs' init takes care of USB keyboards
      : ;;
  esac

  case $image_encryption_type in
    both | luks )
      if { [ -z "$image_experimental" ] || \
           [ -z "$luks_remote_unlock_enabled" ]; } && \
         [ -z "$image_no_grub_luks_fde_encryption" ] && \
         [ "$image_create_boot_partition" != "true" ]; then
        # Enable Grub LUKS encryption support when:
        #  - disk image is LUKS encrypted, AND
        #  - remote unlock is not enabled (as otherwise /boot is not encrypted), AND
        #  - Grub LUKS encryption support is not disabled, AND
        #  - /boot is not a separate partition.
        _enable_luks_cryptodisk="y"

        # Cryptkey is used for unlock LUKS rootfs without 2nd password prompt when
        # GRUB LUKS encryption support is enabled..
        _cmdline="$_cmdline cryptkey"
      else
        _enable_luks_cryptodisk="n"
      fi
      ;;
    * )
      _enable_luks_cryptodisk="n" ;;
  esac


  cat <<-'EOF' >> "$run_script"
	
	write_log "Configuring Grub"
	{
	  mkdir -p /boot/grub
	EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	
	  # Debug
	EOF
    case $image_os_partitioning_type in
      unpartitioned )
        cat <<-'EOF' >> "$run_script"
	  write_debug_log "Root fs device is $root_device" 2
	EOF
        ;;
      * )
        cat <<-'EOF' >> "$run_script"
	  write_debug_log "Root fs partition device is $root_part_device" 2
	EOF
        ;;
    esac
    cat <<-'EOF' >> "$run_script"
	  write_debug_log "Loopback device is $loop_device" 2
	EOF
  fi

  # Busybox's losetup is not suitable when installing Grub on a loopback
  # device as it may truncate the name of the underlying filename.
  case $image_alpine_release in
    v3.13 | v3.14 )
      losetup_package="util-linux" ;;
    v3.15 )
      losetup_package="util-linux-misc" ;;
    * )
      losetup_package="losetup" ;;
  esac
  cat <<-EOF >> "$run_script"
	
	  # If relevant package is not already installed then install it
	  if [ ! "\\\$(apk info -e ${losetup_package})" ]; then
	    write_log "Installing ${losetup_package} package for losetup" 2
	    apk add ${losetup_package} >> /chroot.log 2>&1
	    losetup_package_installed=true
	  fi
	EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	
	  # Debug
	  cp /etc/default/grub /etc/default/grub-orig
	EOF
  fi

  case $image_console_device_type in
    hypervisor | none )
      _disable_recovery='true'
      _menu_timeout=0
      ;;
    * )
      _disable_recovery='false'
      _menu_timeout=5
      ;;
  esac

  cat <<-EOF >> "$run_script"
	
	  write_log "Updating /etc/default/grub" 2
	  {
	    sed -i \\
	      -e 's|^GRUB_DISABLE_RECOVERY=.*$|GRUB_DISABLE_RECOVERY=$_disable_recovery|g' \\
	      -e 's|^GRUB_TIMEOUT=.*$|GRUB_TIMEOUT=$_menu_timeout|g' \\
	      -e '/^GRUB_CMDLINE_LINUX_DEFAULT=.*$/d' \\
	      /etc/default/grub
	EOF

  cat <<-EOF >> "$run_script"
	
	    cmdline="${_cmdline}"
	    {
	      echo "GRUB_CMDLINE_LINUX_DEFAULT=\"\\\$cmdline\""
	      echo 'GRUB_ENABLE_LINUX_LABEL=false'
	EOF

  case $image_console_output_type in
    none | text )
      # Only want text display
      cat <<-'EOF' >> "$run_script"
	      echo 'GRUB_GFXPAYLOAD_LINUX=text'
	EOF
      case $image_boot_type in
        bios )
          case $image_console_device_type in
            hypervisor | serial )
              : ;;
            * )
              # Use VGA text mode
              cat <<-'EOF' >> "$run_script"
	      echo 'GRUB_VIDEO_BACKEND=vga_text'
	EOF
              ;;
          esac
          ;;
      esac
      ;;

    * )
      if [ -z "$image_enable_graphics" ] || \
         [ "$image_enable_graphics" != "true" ]; then
        # Only want text display
        cat <<-'EOF' >> "$run_script"
	      echo 'GRUB_GFXPAYLOAD_LINUX=text'
	EOF
        case $image_boot_type in
          bios )
            case $image_console_device_type in
              hypervisor | serial )
                : ;;
              * )
                # Use VGA text mode
                cat <<-'EOF' >> "$run_script"
	      echo 'GRUB_VIDEO_BACKEND=vga_text'
	EOF
                ;;
            esac
            ;;
        esac
      else
        # Want graphics display
        case $image_boot_type in
          bios )
            cat <<-'EOF' >> "$run_script"
	      echo 'GRUB_VIDEO_BACKEND=vga'
	EOF
            ;;

          hybrid )
            : ;;

          secure-uefi | uefi )
            cat <<-'EOF' >> "$run_script"
	      echo 'GRUB_VIDEO_BACKEND=efi_gop'
	EOF
            ;;
        esac
      fi
      ;;
  esac

  case $image_encryption_type in
    both | luks )
      cat <<-'EOF' >> "$run_script"
	      echo 'GRUB_DISABLE_LINUX_UUID=true'
	EOF
      ;;
    * )
      case $image_boot_reference in
        device )
          cat <<-'EOF' >> "$run_script"
	      echo 'GRUB_DISABLE_LINUX_UUID=true'
	EOF
        ;;
        * )
          cat <<-'EOF' >> "$run_script"
	      echo 'GRUB_DISABLE_LINUX_UUID=false'
	EOF
        ;;
      esac
      ;;
  esac

  cat <<-EOF >> "$run_script"
	      echo 'GRUB_DISABLE_OS_PROBER=true'
	      echo 'GRUB_RECORDFAIL_TIMEOUT=20'
	    } >> /etc/default/grub
	    if ! grep -q "^GRUB_TERMINAL=" /etc/default/grub; then
	      echo 'GRUB_TERMINAL=console' >> /etc/default/grub
	    fi
	    {
	      echo 'GRUB_ENABLE_CRYPTODISK=$_enable_luks_cryptodisk'
	EOF

  if [ "$_enable_luks_cryptodisk" = "y" ] && \
     [ "$image_luks_version" = "2" ]; then
    cat <<-EOF >> "$run_script"
	      echo 'GRUB_PRELOAD_MODULES="cryptodisk luks2 grcy_rijndael grcy_sha256"'
	EOF
  fi

  cat <<-EOF >> "$run_script"
	    } >> /etc/default/grub
	EOF

  case $image_console_device_type in
    hypervisor )
      # Grub does not support virtio console
      : ;;
    serial | normal_and_serial | generic )
      enable_grub_serial_console ;;
  esac

  # Set Grub menu colours
  cat <<-EOF >> "$run_script"
	
	    write_log "Set Grub menu colours" 4
	    {
	      echo 'GRUB_COLOR_NORMAL=white/blue'
	      echo 'GRUB_COLOR_HIGHLIGHT=blue/white'
	EOF

  cat <<-'EOF' >> "$run_script"
	    } >> /etc/default/grub

	    chmod g=,o= /etc/default/grub
	  }
	EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	
	  # Debug
	  diff /etc/default/grub-orig /etc/default/grub >> /chroot.log || true
	  rm /etc/default/grub-orig
	EOF
  fi

  if [ -n "$image_bootloader_username" ] && \
     [ -n "$image_bootloader_password" ]; then
    cat <<'EOF' >> "$run_script"

  write_log "Adding config file /etc/grub.d/01_users for securing GRUB menu" 2
  {
    cat <<-'_SCRIPT_' > /etc/grub.d/01_users
	#!/bin/sh -e
	
	cat <<"_EOF_"
	set superusers="$bootloader_username"
	export superusers
	password_pbkdf2 $bootloader_username $bootloader_hashed_password
	_EOF_
	_SCRIPT_
  }
EOF
  fi

  cat <<-'EOF' >> "$run_script"
	
	  write_log "Generating GRUB config" 2
	  grub-mkconfig -o /boot/grub/grub.cfg >> /chroot.log 2>&1
	
	  write_log "Checking GRUB config" 2
	  grub-script-check /boot/grub/grub.cfg >> /chroot.log
	
	  chmod g=,o= /boot/grub/grub.cfg
	}
	EOF

  case $image_encryption_type in
    both | luks )
      if { [ -z "$image_experimental" ] || \
           [ -z "$luks_remote_unlock_enabled" ]; } && \
         [ -z "$image_no_grub_luks_fde_encryption" ] && \
         [ -z "$needs_boot_partition" ]; then
        # When using GRUB encryption along with a keyfile (to avoid 2nd prompt),
        # ensure that initramfs is only readable by root as it contains the
        # keyfile to decrypt the root partition.
        _initramfs_filename="$(get_initramfs_filename)"
        cat <<-EOF >> "$run_script"
	
	chmod 600 /boot/${_initramfs_filename}
	EOF
      fi
      ;;
  esac
}


#
# Enable serial console for Grub
#
enable_grub_serial_console() {
  local _console_terminal_value _grub_command_options

  _grub_command_options="--unit=${image_serial_console_port_number} --speed=${image_serial_console_port_speed}"
  if [ -n "$image_serial_console_data_bits" ]; then
    _grub_command_options="$_grub_command_options --word=${image_serial_console_data_bits}"
  fi
  if [ -n "$image_serial_console_parity" ]; then
    case $image_serial_console_parity in
      e )
        _parity="even" ;;
      n )
        _parity="none" ;;
      o )
        _parity="odd" ;;
    esac
    _grub_command_options="$_grub_command_options --parity=${_parity}"
  fi
  if [ -n "$image_serial_console_stop_bits" ]; then
    _grub_command_options="$_grub_command_options --stop=${image_serial_console_stop_bits}"
  fi
  cat <<-EOF >> "$run_script"
	    {
	      write_log "Configure GRUB serial command" 4
	      printf 'GRUB_SERIAL_COMMAND="serial %s"\n' "$_grub_command_options" \\
	        >> /etc/default/grub
	EOF

  case $image_console_device_type in
    normal_and_serial | generic )
      _console_terminal_value="serial console" ;;
    serial )
      _console_terminal_value="serial" ;;
  esac
  cat <<-EOF >> "$run_script"
	      write_log "Configure GRUB for serial console" 4
	      sed -i -e 's/^GRUB_TERMINAL=.*/GRUB_TERMINAL="$_console_terminal_value"/' \\
	        /etc/default/grub
	    }
	EOF
}


#
# Install GRUB onto disk
#
install_grub() {
  local _grub_options _grub_efi_options _grub_modules_list

  _grub_efi_options="--removable --efi-directory=/boot/efi --no-nvram"

  if [ -z "$image_disable_optimisation" ]; then
    _grub_modules_list="acpi disk echo elf gzio linux loadenv minicmd normal search test"

    # Filesystem
    case $image_fs_type in
      ext4 )
        _grub_modules_list="$_grub_modules_list ext2" ;;
      * )
        _grub_modules_list="$_grub_modules_list $image_fs_type" ;;
    esac

    # Encryption
    case $image_encryption_type in
      both | luks )
        if { [ -z "$image_experimental" ] || \
             [ -z "$luks_remote_unlock_enabled" ]; } && \
           [ -z "$image_no_grub_luks_fde_encryption" ] && \
           [ "$image_create_boot_partition" != "true" ]; then
          # Grub LUKS encryption support only applies when:
          #  - disk image is LUKS encrypted, AND
          #  - remote unlock is not enabled (as otherwise /boot is not encrypted), AND
          #  - Grub LUKS encryption support is not disabled AND
          #  - /boot is not a separate partition.
          _grub_modules_list="$_grub_modules_list cryptodisk gcry_rijndael gcry_sha256"
          case $image_luks_version in
            1 )
              _grub_modules_list="$_grub_modules_list luks" ;;
            2 )
              _grub_modules_list="$_grub_modules_list luks2" ;;
          esac
        fi
        ;;
    esac

    # LVM
    if [ -n "$image_lvm_rootfs" ]; then
      _grub_modules_list="$_grub_modules_list lvm"
    fi

    # Bootloader Password
    if [ -n "$image_bootloader_username" ] && \
       [ -n "$image_bootloader_password" ]; then
      _grub_modules_list="$_grub_modules_list password_pbkdf2"
    fi

    # Handle console device type via two separate 'case' statements rather
    # than a single 'case' statement, this is because for console device type
    # "normal_and_serial" the "normal" and "serial" values are additive.
    case $image_console_device_type in
      normal | normal_and_serial | generic )
        case $image_arch in
          aarch64 )
            case $image_keyboard_type in
              hyperv | usb | generic )
                if is_in_comma_list "$CADI_SUPPORTED_CONSOLE_KEYBOARD_TYPES" \
                                    "usb"; then
                  _grub_modules_list="$_grub_modules_list usb_keyboard ehci ohci"
                fi
                ;;
            esac
            ;;
          x86 | x86_64 )
            case $image_keyboard_type in
              hyperv | ps2 | generic )
                _grub_modules_list="$_grub_modules_list at_keyboard" ;;
            esac
            case $image_keyboard_type in
              usb | generic )
                if is_in_comma_list "$CADI_SUPPORTED_CONSOLE_KEYBOARD_TYPES" \
                                    "usb"; then
                  _grub_modules_list="$_grub_modules_list usb_keyboard ehci"
                  if [ -z "$image_cpu_vendor" ] || \
                     [ "$image_cpu_vendor" = "amd" ]; then
                    _grub_modules_list="$_grub_modules_list ohci"
                  fi
                  if [ -z "$image_cpu_vendor" ] || \
                     [ "$image_cpu_vendor" = "intel" ]; then
                    _grub_modules_list="$_grub_modules_list uhci"
                  fi
                fi
                ;;
            esac
            ;;
        esac
        ;;
    esac
    case $image_console_device_type in
      normal_and_serial | serial | generic )
        _grub_modules_list="$_grub_modules_list serial" ;;
    esac

    # Storage
    case $image_class in
      physical )
        case $image_os_device_type in
          nvme | sata )
            _grub_modules_list="$_grub_modules_list ahci" ;;
          usb )
            _grub_modules_list="$_grub_modules_list scsi usb" ;;
          * )
            _grub_modules_list="$_grub_modules_list scsi" ;;
        esac
        ;;
    esac
  fi


  case $image_boot_type in
    bios )
      _grub_options="--target=i386-pc"
      case $image_os_partitioning_type in
        unpartitioned )
          _grub_options="$_grub_options --no-bootsector" ;;
      esac
      if [ -z "$image_disable_optimisation" ]; then
        _grub_modules_list="$_grub_modules_list nativedisk"
        case $image_boot_type in
          bios )
            _grub_modules_list="$_grub_modules_list part_msdos" ;;
        esac
        case $image_console_device_type in
          hypervisor | none | serial )
            # Virtio, serial and "none" consoles do not need VGA support
            : ;;
          * )
            # For non-virtio/non-serial console need some form of VGA module
            case $image_console_output_type in
              text )
                case $image_boot_type in
                  bios )
                    # Use VGA text mode
                    _grub_modules_list="$_grub_modules_list vga_text" ;;
                esac
                ;;
              * )
                # Want graphics display
                _grub_modules_list="$_grub_modules_list vga" ;;
            esac
            ;;
        esac
      fi
      ;;
    
    secure-uefi | uefi )
      case $image_arch in
        aarch64 )
          _grub_options="--target=arm64-efi $_grub_efi_options" ;;
        x86_64 )
          _grub_options="--target=x86_64-efi $_grub_efi_options" ;;
      esac
      if [ -z "$image_disable_optimisation" ]; then
        _grub_modules_list="$_grub_modules_list part_gpt"
        case $image_class in
          cloud )
            : ;;
          physical )
            _grub_modules_list="$_grub_modules_list efifwsetup" ;;
          virtual )
            if [ -n "$debug_enabled" ]; then
              # Only add fwsetup in debug mode for testing
              _grub_modules_list="$_grub_modules_list efifwsetup"
            fi
            ;;
        esac
        case $image_console_device_type in
          hypervisor | serial )
            : ;;
          * )
            # Add graphics modules
            _grub_modules_list="$_grub_modules_list efi_gop gfxterm" ;;
        esac
      fi
      ;;
  esac

  case $image_boot_type in
    secure-uefi | uefi )
      cat <<-'EOF' >> "$run_script"
	
	mkdir -p /boot/efi/EFI
	EOF
      ;;
  esac

  _grub_options="${_grub_options} --no-floppy"
  if [ -n "$debug_enabled" ]; then
    _grub_options="${_grub_options} --verbose"
  fi

  cat <<-'EOF' >> "$run_script"
	
	write_log "Installing GRUB bootloader"
	{
	EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	  # Debug
	  write_debug_log "grub.cfg contents:"
	  cat /boot/grub/grub.cfg >> /chroot.log || true
	
	EOF
  fi

  case $image_alpine_release in
    v3.13 | v3.14 | v3.15 | v3.16 )
      case $image_device_management_type in
        mdev )
          cat <<-'EOF' >> "$run_script"
	  write_log "Temporarily creating a dummy device.map file for GRUB" 2
	  touch /boot/grub/device.map
	
	EOF
          ;;
      esac
      ;;
  esac

  cat <<-EOF >> "$run_script"
	  write_log "Running GRUB installer" 2
	  _grub_install_output=\\\$(grub-install \\
	    ${_grub_options} \\
	EOF

  if [ -z "$image_disable_optimisation" ]; then
    cat <<-EOF >> "$run_script"
	    --install-modules="$_grub_modules_list" \\
	EOF
  fi

  case $image_boot_type in
    bios )
      # Do not need to specify device for UEFI setup
      cat <<-EOF >> "$run_script"
	    \$loop_device \\
	EOF
      ;;
  esac

  cat <<-EOF >> "$run_script"
	    2>&1 \\
	    | sed -e '/^grub-install: info: copying .*$/d' \\
	    | sed -e '/^grub-install: info: cannot open .*No such file or directory.$/d' \\
	    | tee -a /chroot.log )
	  if [ "\\\$(echo "\\\$_grub_install_output" | grep "error:")" != "" ]; then
	    exit 1
	  fi
	
	  write_log "Storing grub-install option for later use" 2
	  {
	    printf "# /etc/grub-install-options.conf\n\n"
	    printf 'GRUB_INSTALL_OPTIONS="%s' \\
	      "${_grub_options}"
	EOF
  if [ -z "$image_disable_optimisation" ]; then
    cat <<-EOF >> "$run_script"
	    printf ' --install-modules=\"%s\"' \\
	      "$_grub_modules_list"
	EOF
  fi
  cat <<-EOF >> "$run_script"
	    printf '"\n\n'
	    printf '# Change this setting to "yes" if you want grub-install to be\n'
	    printf '# automatically run whenever the Alpine Grub package is updated.\n'
	    printf 'GRUB_AUTO_UPDATE="no"\n\n'
	    printf '# The device name used for Grub booting (only needs to be\n'
	    printf '# specified if booting MBR - not needed for UEFI booting\n'
	    printf '#GRUB_BOOT_DEVICE="/dev/sda"\n\n'
	  } > /etc/grub-install-options.conf
	  chown root:root /etc/grub-install-options.conf
	  chmod u=rwx,g=r,o=r /etc/grub-install-options.conf
	
	  write_log "Creating script for later use to re-install GRUB" 2
	  {
	    echo "#!/bin/sh"
	    echo
	    echo "grub-install \\\\\"
	    echo "  ${_grub_options} \\\\\"
	EOF
  if [ -z "$image_disable_optimisation" ]; then
    cat <<-EOF >> "$run_script"
	    echo "  --install-modules=\"$_grub_modules_list\" \\\\\"
	EOF
  fi
  case $image_boot_type in
    bios )
      # Do not need to specify device for UEFI setup
      cat <<-'EOF' >> "$run_script"
	    echo "  /dev/\\\$(readlink /dev/root)"
	EOF
      ;;
  esac
  cat <<-'EOF' >> "$run_script"
	    echo
	    echo "exit"
	  } > /usr/local/bin/reinstall-grub
	  chmod +x /usr/local/bin/reinstall-grub

	  if [ -n "\$losetup_package_installed" ]; then
	EOF

  cat <<-EOF >> "$run_script"
	    write_log "Removing ${losetup_package} package that was temporarily installed" 2
	    apk del ${losetup_package} >> /chroot.log 2>&1
	  fi
	EOF

  if [ -n "$debug_enabled" ]; then
    cat <<-'EOF' >> "$run_script"
	
	  # Debug
	  write_debug_log "/etc/grub-install-options.conf contents:" 2
	  cat /etc/grub-install-options.conf >> /chroot.log
	  write_debug_log "/usr/local/bin/reinstall-grub contents:" 2
	  cat /usr/local/bin/reinstall-grub >> /chroot.log
	EOF
  fi

  case $image_alpine_release in
    v3.13 | v3.14 | v3.15 | v3.16 )
      case $image_device_management_type in
        mdev )
          # Remove the eudev package that was temporarily installed
          # so that grub-probe could use udevadm.
          cat <<-'EOF' >> "$run_script"
	
	  write_log "Deleting temporary Grub device.map file" 2
	  rm /boot/grub/device.map
	
	  write_log "Removing eudev package that was temporarily installed"
	  apk del eudev >> /chroot.log 2>&1
	EOF
          ;;
      esac
      ;;
  esac

  cat <<-'EOF' >> "$run_script"
	}
	EOF
}
