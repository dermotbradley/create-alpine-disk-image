#!/bin/sh
# shellcheck disable=SC2039

#############################################################################
##
##  mkinitfs-functions
##
##  Copyright 2021-2022 Dermot Bradley <dermot_bradley@yahoo.com>
##
##  Licensed via GPL version 2.0
##
#############################################################################


#
# Configure mkinitfs so that only the modules necessary for the relevant
# image type are placed in the initramfs file.
#
configure_mkinitfs() {
  local _optimise

  cat <<-'EOF' >> "$run_script"
	
	write_log "Configuring mkinitfs"
	{
	EOF

  if [ -n "${image_optimise+x}" ]; then
    configure_mkinitfs_conf "optimise-"
  else
    configure_mkinitfs_conf
  fi

  configure_mkinitfs_feature_base
  if [ -n "${image_bootchart+x}" ]; then
    configure_mkinitfs_feature_bootchart
  fi
  configure_mkinitfs_feature_keymap
  configure_mkinitfs_feature_network

  case $image_fs_type in
    btrfs )
      configure_mkinitfs_feature_btrfs ;;
    ext4 )
      configure_mkinitfs_feature_ext4 ;;
    f2fs )
      configure_mkinitfs_feature_f2fs ;;
    xfs )
      configure_mkinitfs_feature_xfs ;;
  esac

  if [ -n "${image_lvm_rootfs+x}" ]; then
    configure_mkinitfs_feature_lvm
  fi

  if [ -n "${image_encrypted+x}" ]; then
    configure_mkinitfs_feature_cryptsetup

    if [ "$image_bootloader" = "grub" ] && \
       { [ -z "${image_experimental+x}" ] || [ -z "${remote_unlock_enabled+x}" ]; } && \
       [ -z "${image_no_grub_encryption+x}" ] && \
       [ -z "${needs_boot_partition+x}" ]; then
      # Cryptkey is used for unlock rootfs without 2nd password prompt.
      # It applies only when:
      #  - disk image is encrypted, AND
      #  - bootloader is Grub, AND
      #  - remote unlock is not enabled (as otherwise /boot is not encrypted), AND
      #  - Grub LUKS encryption support is not disabled, AND
      #  - /boot is not a separate partition.
      configure_mkinitfs_feature_cryptkey
    fi
  fi

  case $image_class in

    cloud )
      case $image_alpine_release in
        v3.13 | v3.14 )
          case $image_console_type in
            hypervisor )
              initramfs_entry_add "kernel/drivers/char/virtio_console.ko*" ;;
          esac
          ;;
        * )
          # virtio_console is built into the linux-virt kernel
          : ;;
      esac

      case $image_cloud_type in
        alibada )
          configure_mkinitfs_feature_cloud_alibaba ;;
        aws )
          configure_mkinitfs_feature_cloud_aws ;;
        azure )
          configure_mkinitfs_feature_cloud_azure ;;
        exoscale )
          configure_mkinitfs_feature_cloud_exoscale ;;
        google )
          configure_mkinitfs_feature_cloud_google ;;
        oracle | ovh | vultr )
          configure_mkinitfs_feature_cloud_virtio ;;
        generic )
          configure_mkinitfs_feature_cloud_alibaba
          configure_mkinitfs_feature_cloud_aws
          configure_mkinitfs_feature_cloud_azure
          configure_mkinitfs_feature_cloud_exoscale
          configure_mkinitfs_feature_cloud_google
          configure_mkinitfs_feature_cloud_virtio
          ;;
      esac
      ;;

    physical )
      configure_mkinitfs_feature_kms

      case $image_physical_type in
        arm-server | pc )
          case $image_os_device_type in
            nvme )
              configure_mkinitfs_feature_nvme ;;
            sata )
              configure_mkinitfs_feature_ata ;;
            scsi )
              configure_mkinitfs_feature_scsi ;;
            sd )
              configure_mkinitfs_feature_mmc ;;
            * )
              configure_mkinitfs_feature_ata ;;
          esac
          ;;
        rpi* )
          configure_mkinitfs_feature_mmc ;;
      esac

      if [ "$image_os_device_type" = "usb" ] || \
         { [ "$image_console_type" = "normal" ] && \
           { [ "$image_keyboard_type" = "usb" ] || [ "$image_keyboard_type" = "both" ]; } }; then
        # USB for keyboard
        configure_mkinitfs_feature_usb
      fi
      ;;

    virtual )
      case $image_vm_type in
        hyperv )
          configure_mkinitfs_feature_vm_hyperv ;;
        libvirtd | lxd | proxmox | qemu | utm )
          configure_mkinitfs_feature_vm_qemu ;;
        qemu-microvm )
          configure_mkinitfs_feature_vm_qemu_microvm ;;
        virtualbox )
          configure_mkinitfs_feature_vm_virtualbox ;;
        vmware )
          configure_mkinitfs_feature_vm_vmware ;;
        generic )
          configure_mkinitfs_feature_vm_hyperv
          configure_mkinitfs_feature_vm_qemu
          configure_mkinitfs_feature_vm_virtio
          configure_mkinitfs_feature_vm_virtualbox
          configure_mkinitfs_feature_vm_vmware
          ;;
      esac
      ;;

  esac

  cat <<-'EOF' >> "$run_script"
	}
	EOF
}


#
# Configure /etc/mkinitfs/mkinitfs.conf
#
configure_mkinitfs_conf() {
  local _optimise=${1:-}

  local _features_list _cloud_features_list _virt_features_list

  cat <<-'EOF' >> "$run_script"
	  write_log "Setting up mkinitfs.conf" 2
	EOF

  if [ -n "${debug_enabled+x}" ]; then
    cat <<-'EOF' >> "$run_script"
	
	  # Debug
	  {
	    cp /etc/mkinitfs/mkinitfs.conf /etc/mkinitfs/mkinitfs.conf-orig
	  }
	EOF
  fi

  _features_list="${_optimise:-}base keymap ${_optimise:-}network"

  if [ "$image_class" = "physical" ] && \
     [ "$(expr "$image_physical_type" : '.*rpi.*')" -eq 0 ]; then
    # For physical except RPIs
    _features_list="$_features_list ${_optimise:-}kms"
  fi

  # Add feature for relevant filesystem type
  case $image_fs_type in
    ext4 | xfs )
      _features_list="$_features_list ${_optimise:-}${image_fs_type}" ;;
    * )
      _features_list="$_features_list ${image_fs_type}" ;;
  esac

  if [ -n "${image_bootchart+x}" ]; then
    _features_list="$_features_list ${_optimise:-}bootchart"
  fi

  if [ -n "${image_lvm_rootfs+x}" ]; then
    _features_list="$_features_list ${_optimise:-}lvm"
  fi

  if [ -n "${image_encrypted+x}" ]; then
    if [ "$image_bootloader" = "grub" ] && \
       { [ -z "${image_experimental+x}" ] || [ -z "${remote_unlock_enabled+x}" ]; } && \
       [ -z "${image_no_grub_encryption+x}" ] && \
       [ -z "${needs_boot_partition+x}" ]; then
      # Cryptkey is used for unlock rootfs without 2nd password prompt.
      # It applies only when:
      #  - disk image is encrypted, AND
      #  - bootloader is Grub, AND
      #  - remote unlock is not enabled (as otherwise /boot is not encrypted), AND
      #  - Grub LUKS encryption support is not disabled AND
      #  - /boot is not a separate partition.
      _features_list="$_features_list cryptkey"
    fi
    # cryptsetup is required in all rootfs encryption situations
    _features_list="$_features_list ${_optimise:-}cryptsetup"
    if [ -n "${image_experimental+x}" ] && [ -n "${remote_unlock_enabled+x}" ]; then
      # enable SSH remote unlock functionality and also dhcp which it uses
      _features_list="$_features_list ${_optimise:-}dhcp ${_optimise:-}remote_unlock_luks"
    fi
  fi

  case $image_class in
    cloud )
      _cloud_features_list=""
      case $image_cloud_type in
        alibaba)
          _cloud_features_list="cloud-alibaba" ;;
        aws )
          _cloud_features_list="cloud-aws" ;;
        azure )
          _cloud_features_list="cloud-azure" ;;
        google )
          _cloud_features_list="cloud-google" ;;
        oracle | ovh | vultr )
          _cloud_features_list="cloud-virtio" ;;
        generic )
          _cloud_features_list="cloud-alibaba cloud-aws cloud-azure cloud-google cloud-virtio ${_optimise:-}nvme" ;;
      esac

      if [ "$_cloud_features_list" != "" ]; then
        _features_list="$_features_list $_cloud_features_list"
      fi
      ;;
    physical )
      case $image_physical_type in
        arm-server | pc )
          case $image_os_device_type in
            nvme )
              _features_list="$_features_list ${_optimise:-}nvme" ;;
            sata )
              _features_list="$_features_list ${_optimise:-}ata" ;;
            scsi )
              _features_list="$_features_list ${_optimise:-}scsi" ;;
            sd )
              _features_list="$_features_list ${_optimise:-}mmc" ;;
            * )
              _features_list="$_features_list ${_optimise:-}ata" ;;
          esac

          if [ "$image_os_device_type" = "usb" ] || \
             { [ "$image_console_type" = "normal" ] && \
               { [ "$image_keyboard_type" = "usb" ] || [ "$image_keyboard_type" = "both" ]; } }; then
            # USB boot and/or USB keyboard
            _features_list="$_features_list ${_optimise:-}usb"
          fi
          ;;
        rpi* )
          # Raspberry Pi - always USB keyboard and possibly USB boot
          _features_list="$_features_list ${_optimise:-}usb"

          case $image_os_device_type in
            sd)
              _features_list="$_features_list ${_optimise:-}mmc" ;;
            usb )
              _features_list="$_features_list ${_optimise:-}scsi" ;;
          esac
          ;;
      esac
      ;;
    virtual )
      _virt_features_list=""

      case $image_vm_type in
        hyperv )
          _virt_features_list="vm-hyperv" ;;
        libvirtd | lxd | proxmox | qemu | utm )
          _virt_features_list="vm-qemu" ;;
        qemu-microvm )
          _virt_features_list="vm-qemu-microvm" ;;
        virtualbox )
          _virt_features_list="vm-virtualbox" ;;
        vmware )
          _virt_features_list="vm-vmware" ;;
        generic )
          _virt_features_list="vm-hyperv vm-qemu vm-virtualbox vm-vmware ${_optimise:-}vm-virtio" ;;
        * )
          _virt_features_list="${_optimise:-}vm-virtio" ;;
      esac

      _features_list="$_features_list $_virt_features_list"
      ;;
  esac

  if [ -n "${debug_enabled+x}" ]; then
    cat <<-EOF >> "$run_script"
	
	  # Debug
	  {
	    write_debug_log "mkinitfs features list is: ${_features_list}" 2
	  }
	EOF
  fi

  cat <<-EOF >> "$run_script"
	
	  sed -i \\
	    -e "s|^features=\".*\"|features=\"${_features_list}\"|" \\
	    /etc/mkinitfs/mkinitfs.conf
	EOF

  if [ -n "${debug_enabled+x}" ]; then
    cat <<-'EOF' >> "$run_script"
	
	  # Debug
	  {
	    diff /etc/mkinitfs/mkinitfs.conf-orig /etc/mkinitfs/mkinitfs.conf \
	      >> /chroot.log || true
	    rm /etc/mkinitfs/mkinitfs.conf-orig
	  }
	EOF
  fi
}


#
# Create/modify ata mkinitfs feature file
#
configure_mkinitfs_feature_ata() {
  cat <<-'EOF' >> "$run_script"
	
	  # ATA
	  {
	EOF

  if [ -n "${image_optimise+x}" ]; then
    # optimise-ata.modules
    cat <<-'EOF' >> "$run_script"
	
	    write_log "Setting up features.d/optimise-ata.modules" 2
	EOF

    initramfs_entry_initialise "optimise-ata"
    case $image_os_device_type in
      pata )
        initramfs_entry_add "kernel/drivers/ata/pata_*.ko*"
        ;;
      sata )
        initramfs_entry_add "kernel/drivers/ata/ahci.ko*"
        initramfs_entry_add "kernel/drivers/ata/ahci_platform.ko*"
        initramfs_entry_add "kernel/drivers/ata/ata_generic.ko*"
        initramfs_entry_add "kernel/drivers/ata/ata_piix.ko*"
        initramfs_entry_add "kernel/drivers/ata/libahci.ko*"
        initramfs_entry_add "kernel/drivers/ata/libahci_platform.ko*"
        ;;
    esac

    ###initramfs_entry_add "kernel/drivers/ata/libata.ko*"

    initramfs_entry_finish

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "optimise-ata.modules contents:" 2
	      cat /etc/mkinitfs/features.d/optimise-ata.modules >> /chroot.log
	    }
	EOF
    fi

  else
    # ata.modules

    cat <<-'EOF' >> "$run_script"
	    :
	EOF

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "ata.modules contents:" 2
	      cat /etc/mkinitfs/features.d/ata.modules >> /chroot.log
	    }
	EOF
    fi
  fi

    cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Create/modify base mkinitfs feature files
#
configure_mkinitfs_feature_base() {
  cat <<-'EOF' >> "$run_script"
	
	  # Base
	  {
	EOF

  if [ -n "${image_optimise+x}" ]; then
    # optimise-base.files

    cat <<-'EOF' >> "$run_script"
	    write_log "Setting up features.d/optimise-base.files" 2
	    {
	      echo "/bin/busybox"
	      echo "/bin/sh"
	      echo "/etc/mdev.conf"
	      echo "/etc/modprobe.d/*.conf"
	      echo "/etc/modules"
	      echo "/lib/mdev"
	      echo "/sbin/apk"
	EOF

    case $image_alpine_release in
      v3.13 | v3.14 | v3.15 | v3.16 | edge )
        # Use kmod/modprobe from kmod package
        cat <<-'EOF' >> "$run_script"
	      echo "/sbin/modprobe"
	EOF
        ;;
      * )
        # Rely on Busybox's modprobe
        : ;;
    esac

    cat <<-'EOF' >> "$run_script"
	      echo "/sbin/nlplug-findfs"
	    } > /etc/mkinitfs/features.d/optimise-base.files
	
	EOF

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	    # Debug
	    {
	      write_debug_log "optimise-base.files contents:" 2
	      cat /etc/mkinitfs/features.d/optimise-base.files >> /chroot.log
	    }
	
	EOF
    fi

    # optimise-base.modules

    cat <<-'EOF' >> "$run_script"
	    write_log "Setting up features.d/optimise-base.modules" 2
	EOF

    initramfs_entry_initialise "optimise-base"
    if [ -n "${image_hwrng+x}" ] && [ "$image_class" = "physical" ]; then
      initramfs_entry_add "kernel/drivers/char/hw_random/rng-core.ko*"
      case $image_physical_type in
        arm-server )
          initramfs_entry_add "kernel/drivers/char/hw_random"
          ;;
        pc )
          case $image_physical_vendor in
            amd )
              initramfs_entry_add "kernel/drivers/char/hw_random/amd-rng.ko*" ;;
            intel )
              initramfs_entry_add "kernel/drivers/char/hw_random/intel-rng.ko*" ;;
            * )
              initramfs_entry_add "kernel/drivers/char/hw_random/amd-rng.ko*"
              initramfs_entry_add "kernel/drivers/char/hw_random/intel-rng.ko*"
              ;;
          esac
          ;;
      esac
    fi
    if [ "$image_class" != "physical" ] || \
       [ "$(expr "$image_physical_type" : '.*rpi.*')" -eq 0 ]; then
      # Not a Raspberry Pi
      case $image_alpine_release in
        v3.13 | v3.14 )
          # FBdev
          : ;;
        * )
          # DRM
          initramfs_entry_add "kernel/drivers/gpu/drm/tiny/simpledrm.ko*" ;;
      esac
    else
      # Is a Raspberry Pi which still uses FBDEV rather than DRM
      :
    fi
    if [ "$image_arch" != "aarch86" ] || [ "$image_class" != "virtual" ]; then
      # jitterentropy_rng is a module for all machines except for
      # aarch64 VMs where it is compiled into the linux-virt kernel.
      ###initramfs_entry_add "base" "kernel/crypto/jitterentropy_rng.ko*"
      initramfs_entry_add "# No jitterentropy_rng for now."
    fi

    if [ "$image_class" = "physical" ]; then
      case $image_physical_type in
        arm-server | pc )
          # ARM server and x86/x86_64 Physical machines use normal button module
          initramfs_entry_add "kernel/drivers/acpi/button.ko*" ;;
      esac
    fi

    initramfs_entry_finish

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "optimise-base.modules contents:" 2
	      cat /etc/mkinitfs/features.d/optimise-base.modules >> /chroot.log
	    }
	EOF
    fi

  else
    # base.files

    case $image_alpine_release in
      v3.13 | v3.14 | v3.15 | v3.16 | edge )
        # These mkinitfs versions do not include /etc/modules in initramfs
        if [ -n "${debug_enabled+x}" ]; then
          cat <<-'EOF' >> "$run_script"
	    # Debug
	    {
	      cp /etc/mkinitfs/features.d/base.files \
	        /etc/mkinitfs/features.d/base.files-orig
	    }
	
	EOF
        fi

        cat <<-'EOF' >> "$run_script"
	    write_log "Setting up features.d/base.files" 2
	    {
	      echo "/etc/modules"
	    } >> /etc/mkinitfs/features.d/base.files
	
	EOF

        if [ -n "${debug_enabled+x}" ]; then
          cat <<-'EOF' >> "$run_script"
	    # Debug
	    {
	      diff /etc/mkinitfs/features.d/base.files-orig \
	        /etc/mkinitfs/features.d/base.files >> /chroot.log || true
	      rm /etc/mkinitfs/features.d/base.files-orig
	    }
	
	EOF
        fi
        ;;
      * )
        # /etc/modules already added to initramfs
        : ;;
    esac

    # base.modules

    cat <<-'EOF' >> "$run_script"
	    write_log "Setting up features.d/base.modules" 2
	EOF

    initramfs_entry_initialise "base" "append"
    if [ -n "${image_hwrng+x}" ] && [ "$image_class" = "physical" ]; then
      initramfs_entry_add "kernel/drivers/char/hw_random/*.ko*"
    fi
    if [ "$image_arch" != "aarch86" ] || [ "$image_class" != "virtual" ]; then
      # jitterentropy_rng is a module for all machines except for
      # aarch64 VMs where it is compiled into the linux-virt kernel.
      ###initramfs_entry_add "base" "kernel/crypto/jitterentropy_rng.ko*"
      initramfs_entry_add "# No jitterentropy_rng for now."
    fi

    if [ "$image_class" = "physical" ]; then
      case $image_physical_type in
        arm-server | pc )
          # ARM servers and x86/x86_64 Physical machines use normal button module
          initramfs_entry_add "kernel/drivers/acpi/button.ko*" ;;
      esac
    fi
    initramfs_entry_finish

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "base.modules contents:" 2
	      cat /etc/mkinitfs/features.d/base.modules >> /chroot.log
	    }
	EOF
    fi

  fi

  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Create/modify bootchart mkinitfs feature files
#
configure_mkinitfs_feature_bootchart() {
  cat <<-'EOF' >> "$run_script"
	
	  # Bootchart
	  {
	EOF

  if [ -n "${image_optimise+x}" ]; then
    # optimise-bootchart.files

    cat <<-'EOF' >> "$run_script"
	    write_log "Setting up features.d/optimise-bootchart.files" 2
	    {
	      echo "/sbin/bootchartd"
	      echo "/usr/sbin/accton"
	    } > /etc/mkinitfs/features.d/optimise-bootchart.files
	
	EOF

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	    # Debug
	    {
	      write_debug_log "optimise-bootchart.files contents:" 2
	      cat /etc/mkinitfs/features.d/optimise-bootchart.files >> /chroot.log
	    }
	
	EOF
    fi
  else
    # bootchart.files

    cat <<-'EOF' >> "$run_script"
	    :
	EOF

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "bootchart.files contents:" 2
	      cat /etc/mkinitfs/features.d/bootchart.files >> /chroot.log
	    }
	
	EOF
    fi
  fi

  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Create/modify btrfs mkinitfs feature files
#
configure_mkinitfs_feature_btrfs() {
  cat <<-'EOF' >> "$run_script"
	
	  # Ext4
	  {
	EOF

  if [ -n "${image_optimise+x}" ]; then
    # optimise-btrfs.modules

    cat <<-'EOF' >> "$run_script"
	    write_log "Setting up features.d/optimise-btrfs.modules" 2
	EOF

    initramfs_entry_initialise "optimise-btrfs"
    if [ -z "${image_cpu_vendor+x}" ] || [ "$image_cpu_vendor" = "intel" ]; then
      initramfs_entry_add "kernel/arch/*/crypto/crc32c-intel.ko*"
    fi
    initramfs_entry_add "kernel/crypto/xxhash_generic.ko*"
    initramfs_entry_add "kernel/fs/btrfs"
    initramfs_entry_finish

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "optimise-btrfs.modules contents:" 2
	      cat /etc/mkinitfs/features.d/optimise-btrfs.modules >> /chroot.log
	    }
	EOF
    fi

  else
    # btrfs.modules

    cat <<-'EOF' >> "$run_script"
	    :
	EOF

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "btrfs.modules contents:" 2
	      cat /etc/mkinitfs/features.d/btrfs.modules >> /chroot.log
	    }
	EOF

    fi

  fi

  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Create/modify cryptkey mkinitfs feature file
#
configure_mkinitfs_feature_cryptkey() {

  cat <<-'EOF' >> "$run_script"
	
	  # Cryptkey
	  {
	EOF

  # cryptkey.files

  if [ -n "${debug_enabled+x}" ]; then
    cat <<-'EOF' >> "$run_script"
	    # Debug
	    {
	      cp /etc/mkinitfs/features.d/cryptkey.files \
	        /etc/mkinitfs/features.d/cryptkey.files-orig
	    }
	
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	    write_log "Setting up features.d/cryptkey.files" 2
	    echo "/etc/crypttab" >> /etc/mkinitfs/features.d/cryptkey.files
	EOF

  if [ -n "${debug_enabled+x}" ]; then
    cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      diff /etc/mkinitfs/features.d/cryptkey.files-orig \
	        /etc/mkinitfs/features.d/cryptkey.files \
	        >> /chroot.log || true
	      rm /etc/mkinitfs/features.d/cryptkey.files-orig
	    }
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Create/modify cryptsetup mkinitfs feature files
#
configure_mkinitfs_feature_cryptsetup() {
  cat <<-'EOF' >> "$run_script"
	
	  # Cryptsetup
	  {
	EOF

  if [ -n "${image_optimise+x}" ]; then
    # optimise-cryptsetup.files

    cat <<-'EOF' >> "$run_script"
	    write_log "Setting up features.d/optimise-cryptsetup.files" 2
	    {
	      echo "/sbin/cryptsetup"
	    } >> /etc/mkinitfs/features.d/optimise-cryptsetup.files
	EOF

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "optimise-cryptsetup.files contents:" 2
	      cat /etc/mkinitfs/features.d/optimise-cryptsetup.files >> /chroot.log
	    }
	EOF
    fi

    # optimise-cryptsetup.modules

    cat <<-'EOF' >> "$run_script"
	
	    write_log "Setting up features.d/optimise-cryptsetup.modules" 2
	EOF

    initramfs_entry_initialise "optimise-cryptsetup"
    case $image_arch in
      aarch64 )
        case $image_encryption_cipher in
          adiantum )
            initramfs_entry_add "kernel/arch/arm64/crypto/chacha-neon.ko*"
            initramfs_entry_add "kernel/arch/arm64/crypto/nhpoly1305-neon.ko*"
            initramfs_entry_add "kernel/arch/arm64/crypto/poly1305-neon.ko*"
            ;;
          * )
            initramfs_entry_add "kernel/arch/arm64/crypto/aes-arm64.ko*"
            initramfs_entry_add "kernel/arch/arm64/crypto/aes-neon-blk.ko*"
            initramfs_entry_add "kernel/arch/arm64/crypto/aes-neon-bs.ko*"
            ;;
        esac
        case $image_class in
          cloud | virtual )
            # Add Arm Crypto Extension modules for ARM64 virtual servers
            initramfs_entry_add "kernel/arch/arm64/crypto/*-ce*.ko*" ;;
          physical )
            case $image_physical_type in
              arm-server )
                # Add Arm Crypto Extension modules for ARM64 physical servers
                initramfs_entry_add "kernel/arch/arm64/crypto/*-ce*.ko*" ;;
            esac
            ;;
        esac
        ;;
      armv7 )
        case $image_encryption_cipher in
          adiantum )
            initramfs_entry_add "kernel/arch/arm/crypto/chacha-neon.ko*"
            initramfs_entry_add "kernel/arch/arm/crypto/poly1305-arm.ko*"
            ;;
          * )
            initramfs_entry_add "kernel/arch/arm/crypto/aes-arm.ko*"
            initramfs_entry_add "kernel/arch/arm/crypto/aes-arm-bs.ko*"
            ;;
        esac
        ;;
      x86 | x86_64 )
        case $image_encryption_cipher in
          adiantum )
            initramfs_entry_add "kernel/crypto/chacha_generic.ko*"
            initramfs_entry_add "kernel/crypto/chacha_x86_64.ko*"
            initramfs_entry_add "kernel/crypto/nhpoly1305.ko*"
            ;;
          * )
            if [ -z "${image_cpu_vendor+x}" ] || [ "$image_cpu_vendor" = "intel" ]; then
              initramfs_entry_add "kernel/arch/x86/crypto/aesni-intel.ko*"
            fi
            ;;
        esac
        ;;
    esac
    case $image_encryption_cipher in
      adiantum )
        initramfs_entry_add "kernel/crypto/adiantum.ko*" ;;
    esac
    ###initramfs_entry_add "kernel/crypto/cryptd.ko*"
    ###initramfs_entry_add "kernel/crypto/crypto_engine*.ko*"
    initramfs_entry_add "kernel/crypto/algif_skcipher.ko*"
    initramfs_entry_add "kernel/drivers/md/dm-crypt.ko*"
    initramfs_entry_finish

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "optimise-cryptsetup.modules contents:" 2
	      cat /etc/mkinitfs/features.d/optimise-cryptsetup.modules >> /chroot.log
	    }
	EOF
    fi
  else
    cat <<-'EOF' >> "$run_script"
	    :
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Create/modify ext4 mkinitfs feature files
#
configure_mkinitfs_feature_ext4() {
  cat <<-'EOF' >> "$run_script"
	
	  # Ext4
	  {
	EOF

  if [ -n "${image_optimise+x}" ]; then
    # optimise-ext4.modules

    cat <<-'EOF' >> "$run_script"
	    write_log "Setting up features.d/optimise-ext4.modules" 2
	EOF

    initramfs_entry_initialise "optimise-ext4"
    if [ -z "${image_cpu_vendor+x}" ] || [ "$image_cpu_vendor" = "intel" ]; then
      initramfs_entry_add "kernel/arch/*/crypto/crc32c-intel.ko*"
    fi
    initramfs_entry_add "kernel/crypto/crc32c*.ko*"
    initramfs_entry_add "kernel/fs/ext4"
    initramfs_entry_add "kernel/fs/jbd2"
    initramfs_entry_add "kernel/fs/mbcache"
    initramfs_entry_add "kernel/lib/crc16.ko*"
    initramfs_entry_finish

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "optimise-ext4.modules contents:" 2
	      cat /etc/mkinitfs/features.d/optimise-ext4.modules >> /chroot.log
	    }
	EOF
    fi

  else
    # ext4.modules

    cat <<-'EOF' >> "$run_script"
	    :
	EOF

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "ext4.modules contents:" 2
	      cat /etc/mkinitfs/features.d/ext4.modules >> /chroot.log
	    }
	EOF

    fi

  fi

  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Create/modify keymap mkinitfs feature files
#
configure_mkinitfs_feature_keymap() {
  if [ -n "${debug_enabled+x}" ]; then
    cat <<-'EOF' >> "$run_script"
	
	  # Keymap
	  {
	    # Debug
	    {
	      write_debug_log "keymap.files contents:" 2
	      cat /etc/mkinitfs/features.d/keymap.files >> /chroot.log
	    }
	  }
	EOF
  fi
}


#
# Create/modify kms mkinitfs feature files
#
configure_mkinitfs_feature_kms() {
  cat <<-'EOF' >> "$run_script"
	
	  # KMS
	  {
	EOF

  if [ -n "${image_optimise+x}" ]; then
    # optimise-kms.modules

    cat <<-'EOF' >> "$run_script"
	    write_log "Setting up features.d/optimise-kms.modules" 2
	EOF

    initramfs_entry_initialise "optimise-kms"
    case $image_physical_type in
      pc )
        initramfs_entry_add "kernel/drivers/char/agp/agpgart.ko*"
        if [ -z "${image_graphics_vendor+x}" ] || [ "$image_graphics_vendor" = "amd" ]; then
          initramfs_entry_add "kernel/drivers/char/agp/amd64-agp.ko*"
          case $image_alpine_release in
            v3.13 | v3.14 )
              # FBdev
              initramfs_entry_add "kernel/drivers/video/fbdev/aty/radeonfb.ko*"
              ;;
            * )
              # DRM
              if [ -n "${image_graphics_vendor_driver+x}" ]; then
                case $image_graphics_vendor_driver in
                  amdgpu )
                    initramfs_entry_add "kernel/drivers/gpu/drm/amd" ;;
                  radeon )
                    initramfs_entry_add "kernel/drivers/gpu/drm/radeon" ;;
                esac
              else
                initramfs_entry_add "kernel/drivers/gpu/drm/amd"
                initramfs_entry_add "kernel/drivers/gpu/drm/radeon"
              fi
              ;;
          esac
        fi
        if [ -z "${image_graphics_vendor+x}" ] || [ "$image_graphics_vendor" = "intel" ]; then
          initramfs_entry_add "kernel/drivers/char/agp/intel-agp.ko*"
          initramfs_entry_add "kernel/drivers/char/agp/intel-gtt.ko*"
          case $image_alpine_release in
            v3.13 | v3.14 )
              # FBdev
              initramfs_entry_add "kernel/drivers/video/fbdev/intelfb"
              ;;
            * )
              # DRM
              if [ -n "${image_graphics_vendor_driver+x}" ]; then
                case $image_graphics_vendor_driver in
                  gma500 )
                    initramfs_entry_add "kernel/drivers/gpu/drm/gma500" ;;
                  i915 )
                    initramfs_entry_add "kernel/drivers/gpu/drm/i915" ;;
                esac
              else
                initramfs_entry_add "kernel/drivers/gpu/drm/gma500"
                initramfs_entry_add "kernel/drivers/gpu/drm/i915"
              fi
              ;;
          esac
        fi
        if [ -z "${image_graphics_vendor+x}" ] || \
           [ "$image_graphics_vendor" = "nvidia" ]; then
          case $image_alpine_release in
            v3.13 | v3.14 )
              # FBdev
              initramfs_entry_add "kernel/drivers/video/fbdev/nvidia" ;;
            * )
              # DRM
              initramfs_entry_add "kernel/drivers/gpu/drm/nouveau" ;;
          esac
        fi
        case $image_alpine_release in
          v3.13 | v3.14 )
            # FBdev
            initramfs_entry_add "kernel/drivers/video/fbdev/uvesafb.ko*"
            initramfs_entry_add "kernel/drivers/video/fbdev/vga16fb.ko*"
            ;;
          * )
            # DRM
            initramfs_entry_add "kernel/drivers/gpu/drm/i2c"
            initramfs_entry_add "kernel/drivers/gpu/drm/scheduler"
            ;;
        esac
        ###initramfs_entry_add "kernel/drivers/i2c/busses/i2c-amd*.ko*"
        ###initramfs_entry_add "kernel/drivers/i2c/busses/i2c-piix4.ko*"
        ;;
      rpi* )
        initramfs_entry_add "# This file is empty for RPI machines"
        case $image_alpine_release in
          v3.13 | v3.14 )
            # FBdev
            : ;;
          * )
            # DRM
            ###initramfs_entry_add "kernel/drivers/gpu/drm/vc4/vc4.ko*"
            : ;;
        esac
        ###initramfs_entry_add "kernel/drivers/i2c"
        ###initramfs_entry_add "kernel/drivers/i2c/busses/i2c-bcm2708.ko*"
        ;;
    esac
    initramfs_entry_finish

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "optimise-kms.modules contents:" 2
	      cat /etc/mkinitfs/features.d/optimise-kms.modules >> /chroot.log
	    }
	EOF
    fi

  else

    # kms.modules

    cat <<-'EOF' >> "$run_script"
	    write_log "Setting up features.d/kms.modules" 2
	EOF

    initramfs_entry_initialise "kms" "append"
    case $image_physical_type in
      pc )
        initramfs_entry_add "kernel/drivers/char/agp"
        case $image_alpine_release in
          v3.13 | v3.14 )
            initramfs_entry_add "kernel/drivers/video/fbdev" ;;
          * )
            initramfs_entry_add "kernel/drivers/gpu/drm" ;;
        esac
        ;;
      rpi* )
        ###  ###initramfs_entry_add "kernel/drivers/gpu/drm/vc4/vc4.ko*"
        ###  ###initramfs_entry_add "kernel/drivers/i2c"
        ###  ###initramfs_entry_add "kernel/drivers/i2c/busses/i2c-bcm2708.ko*"
        :
        ;;
    esac
    initramfs_entry_finish

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "kms.modules contents:" 2
	      cat /etc/mkinitfs/features.d/kms.modules >> /chroot.log
	    }
	EOF
    fi
  fi

  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Create/modify lvm mkinitfs feature files
#
configure_mkinitfs_feature_lvm() {
  cat <<-'EOF' >> "$run_script"
	
	  # LVM
	  {
	EOF

  if [ -n "${image_optimise+x}" ]; then
    # optimise-lvm.files
    cat <<-'EOF' >> "$run_script"
	    write_log "Setting up features.d/optimise-lvm.files" 2
	    {
	      echo "/sbin/lvm"
	    } >> /etc/mkinitfs/features.d/optimise-lvm.files
	EOF

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "optimise-lvm.files contents:" 2
	      cat /etc/mkinitfs/features.d/optimise-lvm.files >> /chroot.log
	    }
	EOF
    fi

    # optimise-lvm.modules
    cat <<-'EOF' >> "$run_script"
	
	    write_log "Setting up features.d/optimise-lvm.modules" 2
	EOF

    initramfs_entry_initialise "optimise-lvm"
    initramfs_entry_add "kernel/drivers/md/dm-mod.ko*"
    initramfs_entry_add "kernel/drivers/md/dm-snapshot.ko*"
    initramfs_entry_add "kernel/drivers/md/dm-thin-pool.ko*"
    initramfs_entry_finish

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "optimise-lvm.modules contents:" 2
	      cat /etc/mkinitfs/features.d/optimise-lvm.modules >> /chroot.log
	    }
	EOF
    fi

  else
    # lvm.files & lvm.modules
    cat <<-'EOF' >> "$run_script"
	    :
	EOF

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "lvm.files contents:" 2
	      cat /etc/mkinitfs/features.d/lvm.files >> /chroot.log
	
	      write_debug_log "lvm.modules contents:" 2
	      cat /etc/mkinitfs/features.d/lvm.modules >> /chroot.log
	    }
	EOF
    fi
  fi

  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Create/modify mmc mkinitfs feature files
#
configure_mkinitfs_feature_mmc() {
  cat <<-'EOF' >> "$run_script"
	
	  # LVM
	  {
	EOF

  if [ -n "${image_optimise+x}" ]; then
    # optimise-mmc.modules
    cat <<-'EOF' >> "$run_script"
	
	    write_log "Setting up features.d/optimise-mmc.modules" 2
	EOF

    initramfs_entry_initialise "optimise-mmc"
    case $image_physical_type in
      pc )
        initramfs_entry_add "kernel/drivers/mmc" ;;
      rpi* )
        if [ "$image_physical_type" = "rpi4" ]; then
          # RPI4 only?
          initramfs_entry_add "kernel/drivers/mmc/host/mmc_spi.ko*"
          initramfs_entry_add "kernel/drivers/mmc/host/of_mmc_spi.ko*"
          initramfs_entry_add "kernel/drivers/mmc/host/sdhci-iproc.ko*"
        fi
        ;;
    esac
    initramfs_entry_finish

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "optimise-mmc.modules contents:" 2
	      cat /etc/mkinitfs/features.d/optimise-mmc.modules >> /chroot.log
	    }
	EOF
    fi

  else
    # mmc.modules
    cat <<-'EOF' >> "$run_script"
	    :
	EOF

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "mmc.modules contents:" 2
	      cat /etc/mkinitfs/features.d/mmc.modules >> /chroot.log
	    }
	EOF
    fi
  fi

  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Create/modify network mkinitfs feature files
#
configure_mkinitfs_feature_network() {
  cat <<-'EOF' >> "$run_script"
	
	  # Network
	  {
	EOF

  if [ -n "${image_optimise+x}" ]; then
    # optimise-network.files
    cat <<-'EOF' >> "$run_script"
	    write_log "Setting up features.d/optimise-network.files" 2
	    {
	EOF

###    if [  ]; then
###      cat <<'EOF' >> "$run_script"
###      echo "/usr/share/udhcpc/default.script"
###EOF
###    fi

    cat <<-'EOF' >> "$run_script"
	      echo "# This file is empty"
	EOF

    cat <<-'EOF' >> "$run_script"
	    } > /etc/mkinitfs/features.d/optimise-network.files
	EOF

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "optimise-network.files contents:" 2
	      cat /etc/mkinitfs/features.d/optimise-network.files >> /chroot.log
	    }
	EOF
    fi

    # optimise-network.modules
    if [ "$image_class" = "physical" ] || \
       { [ -n "${remote_unlock_enabled+x}" ] && [ -z "${image_disable_ipv6+x}" ]; }; then

      cat <<-'EOF' >> "$run_script"
	
	    write_log "Setting up features.d/optimise-network.modules" 2
	EOF

      initramfs_entry_initialise "optimise-network"

      if [ -n "${remote_unlock_enabled+x}" ] && [ -z "${image_disable_ipv6+x}" ]; then
        initramfs_entry_add "kernel/net/ipv6/ipv6.ko*"
      fi

      case $image_class in
        physical )
          case $image_physical_type in
            arm-server )
              initramfs_entry_add "kernel/drivers/net/ethernet/mellanox"
              ;;
            pc )
              if [ -n "${image_ethernet_module+x}" ]; then
                initramfs_entry_add "kernel/drivers/net/ethernet/${image_ethernet_module}.ko*"
                case $image_ethernet_module in
                  realtek/r8169 )
                    initramfs_entry_add "kernel/drivers/net/phy/realtek.ko*" ;;
                esac
              else
                initramfs_entry_add "kernel/drivers/net/ethernet/atheros/alx"
                initramfs_entry_add "kernel/drivers/net/ethernet/broadcom/tg3.ko*"
                initramfs_entry_add "kernel/drivers/net/ethernet/intel/e1000"
                initramfs_entry_add "kernel/drivers/net/ethernet/intel/e1000e"
                initramfs_entry_add "kernel/drivers/net/ethernet/intel/i40e"
                initramfs_entry_add "kernel/drivers/net/ethernet/intel/ice"
                initramfs_entry_add "kernel/drivers/net/ethernet/intel/igb"
                initramfs_entry_add "kernel/drivers/net/ethernet/intel/igbvf"
                initramfs_entry_add "kernel/drivers/net/ethernet/intel/igc"
                initramfs_entry_add "kernel/drivers/net/ethernet/intel/ixgb"
                initramfs_entry_add "kernel/drivers/net/ethernet/intel/ixgbe"
                initramfs_entry_add "kernel/drivers/net/ethernet/intel/ixgbevf"
                initramfs_entry_add "kernel/drivers/net/ethernet/nvidia"
                initramfs_entry_add "kernel/drivers/net/ethernet/realtek/r8169.ko*"
                initramfs_entry_add "kernel/drivers/net/phy/realtek.ko*"
              fi
              initramfs_entry_add "kernel/drivers/net/mii.ko*"
              ;;
            rpi* )
              : ;;
          esac
          ;;
      esac

      initramfs_entry_finish

      if [ -n "${debug_enabled+x}" ]; then
        cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "optimise-network.modules contents:" 2
	      cat /etc/mkinitfs/features.d/optimise-network.modules >> /chroot.log
	    }
	EOF
      fi
    else
      cat <<-'EOF' >> "$run_script"
	    :
	EOF
    fi
  else
    # network.files & network.modules
    if [ -n "${remote_unlock_enabled+x}" ] && [ -z "${image_disable_ipv6+x}" ]; then

      cat <<-'EOF' >> "$run_script"
	    write_log "Setting up features.d/network.modules" 2
	EOF

      initramfs_entry_initialise "network" "append"
      initramfs_entry_add "kernel/net/ipv6/ipv6.ko*"
      initramfs_entry_finish
    else
      cat <<-'EOF' >> "$run_script"
	    :
	EOF
    fi

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "network.files contents:" 2
	      cat /etc/mkinitfs/features.d/network.files >> /chroot.log
	
	      write_debug_log "network.modules contents:" 2
	      cat /etc/mkinitfs/features.d/network.modules >> /chroot.log
	    }
	EOF
    fi
  fi

  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Create/modify nvme mkinitfs feature files
#
configure_mkinitfs_feature_nvme() {
  cat <<-'EOF' >> "$run_script"
	
	   # NVME
	  {
	EOF

  if [ -n "${image_optimise+x}" ]; then
    # optimise-nvme.modules
    cat <<-'EOF' >> "$run_script"
	    write_log "Setting up features.d/optimise-nvme.modules" 2
	EOF

    initramfs_entry_initialise "optimise-nvme"
    initramfs_entry_add "kernel/drivers/nvme/host/nvme.ko*"
    initramfs_entry_finish

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "optimise-nvme.modules contents:" 2
	      cat /etc/mkinitfs/features.d/optimise-nvme.modules >> /chroot.log
	    }
	EOF
    fi

  else
    # nvme.modules
    cat <<-'EOF' >> "$run_script"
	    :
	EOF

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "nvme.modules contents:" 2
	      cat /etc/mkinitfs/features.d/nvme.modules >> /chroot.log
	    }
	EOF
    fi

  fi

  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Create/modify scsi mkinitfs feature files
#
configure_mkinitfs_feature_scsi() {
  cat <<-'EOF' >> "$run_script"
	
	  # SCSI
	  {
	EOF

  if [ -n "${image_optimise+x}" ]; then
    # optimised-scsi.modules
    cat <<-'EOF' >> "$run_script"
	    write_log "Setting up features.d/optimise-scsi.modules" 2
	EOF

    initramfs_entry_initialise "optimise-scsi"

    case $image_physical_type in
      arm-server | pc )
        case $image_os_device_type in
          sata | scsi )
            initramfs_entry_add "kernel/drivers/scsi/sd_mod.ko*" ;;
          usb )
            initramfs_entry_add "kernel/drivers/scsi/sd_mod.ko*"
            initramfs_entry_add "kernel/drivers/scsi/ses.ko*"
            ;;
        esac
        ###initramfs_entry_add "kernel/drivers/scsi/sg.ko*"
        ###initramfs_entry_add "kernel/drivers/scsi/sr_mod.ko*"
        ;;
      rpi* )
        if [ "$image_os_device_type" = "usb" ]; then
          initramfs_entry_add "kernel/drivers/scsi/sd_mod.ko*"
          initramfs_entry_add "kernel/drivers/scsi/ses.ko*"
        fi
        ;;
    esac
    initramfs_entry_finish

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "optimise-scsi.modules contents:" 2
	      cat /etc/mkinitfs/features.d/optimise-scsi.modules >> /chroot.log
	    }
	EOF
    fi

  else
    # scsi.modules
    cat <<-'EOF' >> "$run_script"
	    :
	EOF

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "scsi.modules contents:" 2
	      cat /etc/mkinitfs/features.d/scsi.modules >> /chroot.log
	    }
	EOF
    fi

  fi

  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Create/modify usb mkinitfs feature files
#
configure_mkinitfs_feature_usb() {
  cat <<-'EOF' >> "$run_script"
	
	  # USB
	  {
	EOF

  if [ -n "${image_optimise+x}" ]; then
    # optimise-usb.modules
    cat <<-'EOF' >> "$run_script"
	    write_log "Setting up features.d/optimise-usb.modules" 2
	EOF

    initramfs_entry_initialise "optimise-usb"
    case $image_class in
      cloud )
        # Keyboard
        case $image_console_type in
          normal )
            case $image_keyboard_type in
              usb | both )
                case $image_vm_type in
                  virtualbox )
                    initramfs_entry_add "kernel/drivers/hid/usbhid"
                    initramfs_entry_add "kernel/drivers/hid/hid-generic.ko*"
                    initramfs_entry_add "kernel/drivers/usb/host/ohci-hcd.ko*"
                    ;;
                esac
                ;;
            esac
            ;;
        esac
        ###initramfs_entry_add "kernel/drivers/usb/host/ehci-hcd.ko*"
        ###initramfs_entry_add "kernel/drivers/usb/host/ehci-pci.ko*"
        ###initramfs_entry_add "kernel/drivers/usb/host/ehci-platform.ko*"
        ###initramfs_entry_add "kernel/drivers/usb/host/uhci-hcd.ko*"
        ###initramfs_entry_add "kernel/drivers/usb/host/xhci-hcd.ko*"
        ###initramfs_entry_add "kernel/drivers/usb/host/xhci-pci.ko*"
        ;;
      physical )
        case $image_physical_type in
          arm-server | pc )
            # Keyboard
            case $image_console_type in
              normal )
                case $image_keyboard_type in
                  usb | both )
                    initramfs_entry_add "kernel/drivers/hid/hid-generic.ko*"
                    initramfs_entry_add "kernel/drivers/hid/hid-cherry.ko*"
                    initramfs_entry_add "kernel/drivers/hid/hid-apple.ko*"
                    initramfs_entry_add "kernel/drivers/hid/usbhid"
                    ;;
                esac
                ;;
            esac

            initramfs_entry_add "kernel/drivers/usb/host/ehci-hcd.ko*"
            initramfs_entry_add "kernel/drivers/usb/host/ehci-pci.ko*"
            initramfs_entry_add "kernel/drivers/usb/host/ehci-platform.ko*"
            if [ -z "${image_optimise+x}" ] || [ -z "${image_cpu_vendor+x}" ] || \
               [ "$image_cpu_vendor" != "intel" ]; then
              initramfs_entry_add "kernel/drivers/usb/host/ohci-hcd.ko*"
              initramfs_entry_add "kernel/drivers/usb/host/ohci-pci.ko*"
              initramfs_entry_add "kernel/drivers/usb/host/ohci-platform.ko*"
            fi
            if [ -z "${image_optimise+x}" ] || [ -z "${image_cpu_vendor+x}" ] || \
               [ "$image_cpu_vendor" = "intel" ]; then
              initramfs_entry_add "kernel/drivers/usb/host/uhci-hcd.ko*"
            fi
            initramfs_entry_add "kernel/drivers/usb/host/xhci-hcd.ko*"
            initramfs_entry_add "kernel/drivers/usb/host/xhci-pci.ko*"
            if [ "$image_os_device_type" = "usb" ]; then
              initramfs_entry_add "kernel/drivers/usb/storage/uas.ko*"
              initramfs_entry_add "kernel/drivers/usb/storage/usb-storage.ko*"
              initramfs_entry_add "kernel/fs/fat"
            fi
            ;;
          rpi* )
            initramfs_entry_add "kernel/drivers/usb/storage/uas.ko*"
            initramfs_entry_add "kernel/drivers/usb/storage/usb-storage.ko*"
            initramfs_entry_add "kernel/drivers/hid/usbhid"
            initramfs_entry_add "kernel/drivers/hid/hid-generic.ko*"
            initramfs_entry_add "kernel/drivers/hid/hid-cherry.ko*"
            initramfs_entry_add "kernel/drivers/hid/hid-apple.ko*"
            initramfs_entry_add "kernel/fs/fat"
            ;;
        esac
        ;;
      virtual )
        # Keyboard
        case $image_console_type in
          normal )
            case $image_keyboard_type in
              usb | both )
                case $image_vm_type in
                  virtualbox )
                    initramfs_entry_add "kernel/drivers/hid/usbhid"
                    initramfs_entry_add "kernel/drivers/hid/hid-generic.ko*"
                    initramfs_entry_add "kernel/drivers/usb/host/ohci-hcd.ko*"
                    ;;
                esac
                ;;
            esac
            ;;
        esac
        ###if [ "$image_vm_type" != "virtualbox" ]; then
        ###  initramfs_entry_add "kernel/drivers/usb/host/ehci-hcd.ko*"
        ###  initramfs_entry_add "kernel/drivers/usb/host/ehci-pci.ko*"
        ###  initramfs_entry_add "kernel/drivers/usb/host/ehci-platform.ko*"
        ###  initramfs_entry_add "kernel/drivers/usb/host/uhci-hcd.ko*"
        ###  initramfs_entry_add "kernel/drivers/usb/host/xhci-hcd.ko*"
        ###  initramfs_entry_add "kernel/drivers/usb/host/xhci-pci.ko*"
        ###else
        ###  initramfs_entry_add "# Virtualbox does not require USB for keyboard."
        ###fi
        ;;
    esac
    initramfs_entry_finish

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "optimise-usb.modules contents:" 2
	      cat /etc/mkinitfs/features.d/optimise-usb.modules >> /chroot.log
	    }
	EOF
    fi

  else
    # usb.modules
    cat <<-'EOF' >> "$run_script"
	    :
	EOF

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "usb.modules contents:" 2
	      cat /etc/mkinitfs/features.d/usb.modules >> /chroot.log
	    }
	EOF
    fi

  fi

  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Create/modify virthost mkinitfs feature files
#
configure_mkinitfs_feature_virthost() {
  cat <<-'EOF' >> "$run_script"
	
	  # VirtHost
	  {
	EOF

  if [ -n "${image_optimise+x}" ]; then
    # optimised-virthost.modules
    cat <<-'EOF' >> "$run_script"
	    write_log "Setting up features.d/optimise-virthost.modules" 2
	EOF

    initramfs_entry_initialise "optimise-virthost"
    initramfs_entry_add "kernel/drivers/vhost/vhost.ko*"
    initramfs_entry_add "kernel/drivers/vhost/vhost_net.ko*"
    initramfs_entry_add "kernel/drivers/vhost/vhost_scsi.ko*"
    initramfs_entry_finish

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "optimise-virthost.modules contents:" 2
	      cat /etc/mkinitfs/features.d/optimise-virthost.modules >> /chroot.log
	    }
	EOF
    fi
  else
    # virthost.modules
    cat <<-'EOF' >> "$run_script"
	    write_log "Setting up features.d/virthost.modules" 2
	EOF

    initramfs_entry_initialise "virthost"
    initramfs_entry_add "kernel/drivers/vhost/*.ko*"
    initramfs_entry_finish

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "virthost.modules contents:" 2
	      cat /etc/mkinitfs/features.d/virthost.modules >> /chroot.log
	    }
	EOF
    fi
  fi

  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Create/modify xfs mkinitfs feature files
#
configure_mkinitfs_feature_xfs() {
  cat <<-'EOF' >> "$run_script"
	
	  # XFS
	  {
	EOF

  if [ -n "${image_optimise+x}" ]; then
    # optimise-xfs.files
    cat <<-'EOF' >> "$run_script"
	    write_log "Setting up features.d/optimise-xfs.files" 2
	    {
	      echo "/sbin/xfs_repair"
	    } > /etc/mkinitfs/features.d/optimise-xfs.files
	EOF

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "optimise-xfs.files contents:" 2
	      cat /etc/mkinitfs/features.d/optimise-xfs.files >> /chroot.log
	    }
	EOF
    fi

    # optimise-xfs.modules
    cat <<-'EOF' >> "$run_script"
	
	    write_log "Setting up features.d/optimise-xfs.modules" 2
	EOF

    initramfs_entry_initialise "optimise-xfs"
    if [ -z "${image_cpu_vendor+x}" ] || [ "$image_cpu_vendor" = "intel" ]; then
      initramfs_entry_add "kernel/arch/*/crypto/crc32c-intel.ko*"
    fi
    initramfs_entry_add "kernel/crypto/crc32c*.ko*"
    initramfs_entry_add "kernel/fs/xfs/xfs.ko*"
    initramfs_entry_add "kernel/lib/libcrc32c.ko*"
    initramfs_entry_finish

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "optimise-xfs.modules contents:" 2
	      cat /etc/mkinitfs/features.d/optimise-xfs.modules >> /chroot.log
	    }
	EOF
    fi

  else
    # xfs.files and xfs.modules
    cat <<-'EOF' >> "$run_script"
	    :
	EOF

    if [ -n "${debug_enabled+x}" ]; then
      cat <<-'EOF' >> "$run_script"
	
	    {
	      # Debug
	      write_debug_log "xfs.files contents:" 2
	      cat /etc/mkinitfs/features.d/xfs.files >> /chroot.log
	
	      # Debug
	      write_debug_log "xfs.modules contents:" 2
	      cat /etc/mkinitfs/features.d/xfs.modules >> /chroot.log
	    }
	EOF
    fi

  fi

  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}
