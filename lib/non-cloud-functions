#!/bin/sh
# shellcheck disable=SC2039

#############################################################################
##
##  non-cloud-functions
##
##  Copyright 2021-2022 Dermot Bradley <dermot_bradley@yahoo.com>
##
##  Licensed via GPL version 2.0
##
#############################################################################


#
# Configure /etc/network/interfaces
#
configure_network_interfaces() {
  cat <<'EOF' >> "$run_script"

  write_log "Creating /etc/network/interfaces" 2
  {
    cat <<-_SCRIPT_ >> /etc/network/interfaces
	# /etc/network/interfaces
	
	auto lo
EOF

  if [ -z "${image_disable_ipv4+x}" ]; then
    cat <<'EOF' >> "$run_script"
	iface lo inet loopback
EOF
  fi

  if [ -z "${image_disable_ipv6+x}" ]; then
    cat <<'EOF' >> "$run_script"
	iface lo inet6 loopback
EOF
  fi

  cat <<'EOF' >> "$run_script"
	
	auto eth0
EOF

  if [ -z "${image_disable_ipv4+x}" ]; then
    cat <<'EOF' >> "$run_script"
	iface eth0 inet dhcp
EOF
  fi

  if [ -z "${image_disable_ipv6+x}" ]; then
    cat <<'EOF' >> "$run_script"
	
	# control-alias eth0
	iface eth0 inet6 dhcp
EOF
  fi

  cat <<'EOF' >> "$run_script"
	
	_SCRIPT_
EOF

  if [ -n "${debug_enabled+x}" ]; then
    cat <<-'EOF' >> "$run_script"
	
	    # Debug
	    {
	      write_debug_log "Contents of /etc/network/interfaces:" 4
	      cat /etc/network/interfaces >> /chroot.log
	    }
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	  }
	EOF
}


#
# Configure non cloud-init
#
configure_non_cloud_init() {
  cat <<-'EOF' >> "$run_script"
	
	write_log "Configuring non cloud-init"
	{
	EOF

  if [ "${image_mdev}" = true ]; then
    # mdev
    cat <<-'EOF' >> "$run_script"
	  write_log "Enable mdev init.d service" 2
	  {
	EOF
    add_init_d_service "mdev" "sysinit" 4
  else
    # udev
    cat <<-'EOF' >> "$run_script"
	  write_log "Enable udev init.d services" 2
	  {
	EOF

    add_init_d_service "udev" "sysinit" 4
    add_init_d_service "udev-trigger" "sysinit" 4
    add_init_d_service "udev-postmount" "default" 4
  fi

    cat <<-'EOF' >> "$run_script"
	  } >> /chroot.log 2>&1
	EOF

  configure_network_interfaces

  if [ -z "${debug_enabled+x}" ]; then
    # Lock the root account's password if debugging not enabled
    cat <<-'EOF' >> "$run_script"
	
	  # Debug
	  {
	    cp /etc/shadow /etc/shadow-orig
	  }
	
	  write_log "Locking the root account" 2
	  passwd -l root
	
	  # Debug
	  {
	    diff /etc/shadow-orig /etc/shadow || true
	    rm /etc/shadow-orig
	  }
	EOF
  fi

  create_default_user
  setup_init_d_for_growing_root_partition

  cat <<-'EOF' >> "$run_script"
	}
	EOF
}


#
# Create default user account
#
create_default_user() {
  if [ -n "${debug_enabled+x}" ]; then
    cat <<-'EOF' >> "$run_script"
	
	# Debug
	{
	  cp /etc/passwd /etc/passwd-orig
	  cp /etc/shadow /etc/shadow-orig
	  cp /etc/group /etc/group-orig
	}
	EOF
  fi

  cat <<-EOF >> "$run_script"
	
	write_log "Setting up default user '${image_admin_username}'" 2
	{
	  write_log "Creating user account" 4
	  adduser -D -g "Default user" ${image_admin_username}
	EOF

  if [ -n "${image_default_user_password+x}" ]; then
    cat <<-EOF >> "$run_script"
	
	  write_log "Setting the default user's password"	4
	  echo "${image_admin_username}:\$default_user_password" | chpasswd
	  write_log "Ensure default user's account is not locked as password is set" 4
	  passwd -u ${image_admin_username}
	EOF
  else
    cat <<-'EOF' >> "$run_script"
	
	    write_log "Default user's account is locked (for password access)" 4
	EOF
  fi

  case $image_auth_control in
    doas )
      cat <<-EOF >> "$run_script"
	
	  write_log "Adding user to group 'wheel'" 4
	  addgroup ${image_admin_username} wheel
	EOF
      ;;
    sudo )
      cat <<-EOF >> "$run_script"
	
	  write_log "Adding user to group 'sudo'" 4
	  addgroup ${image_admin_username} sudo
	EOF
      ;;
    both )
      cat <<-EOF >> "$run_script"
	
	  write_log "Adding user to group 'wheel'" 4
	  addgroup ${image_admin_username} wheel
	
	  write_log "Adding user to group 'sudo'" 4
	  addgroup ${image_admin_username} sudo
	EOF
      ;;
  esac

  if [ -n "${ssh_public_key+x}" ]; then
    cat <<-EOF >> "$run_script"
	
	  write_log "Adding SSH public key to user's authorized_keys file" 4
	  mkdir /home/${image_admin_username}/.ssh
	  chown ${image_admin_username}:${image_admin_username} /home/${image_admin_username}/.ssh
	  chmod 700 /home/${image_admin_username}/.ssh
	  echo "${ssh_public_key}" \\
	    > /home/${image_admin_username}/.ssh/authorized_keys
	  chown ${image_admin_username}:${image_admin_username} /home/${image_admin_username}/.ssh/authorized_keys
	  chmod 600 /home/${image_admin_username}/.ssh/authorized_keys
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	}
	EOF

  if [ -n "${debug_enabled+x}" ]; then
    cat <<-EOF >> "$run_script"
	
	# Debug
	{
	  write_debug_log "/etc/passwd changes:" 2
	  diff /etc/passwd-orig /etc/passwd >> /chroot.log || true
	  rm /etc/passwd-orig
	
	  write_debug_log "/etc/shadow changes:" 2
	  diff /etc/shadow-orig /etc/shadow >> /chroot.log || true
	  rm /etc/shadow-orig
	
	  write_debug_log "/etc/group changes:" 2
	  diff /etc/group-orig /etc/group >> /chroot.log || true
	  rm /etc/group-orig
	
	  write_debug_log "Contents of /home/${image_admin_username}:" 2
	  ls -laR /home/${image_admin_username} >> /chroot.log
	}
	EOF
  fi
}


#
# Define non cloud-init specific packages
#
define_non_cloud_init_packages() {
  local _nonci_pkgs

  _nonci_pkgs="cloud-utils-growpart ifupdown-ng-iproute2 iproute2-minimal"
  _nonci_pkgs="$_nonci_pkgs parted tzdata"

  echo "$_nonci_pkgs"
}


#
# Create an init.d script to grow the root partition
#
setup_init_d_for_growing_root_partition() {
  local _grow_device _grow_device_part _grow_part_num _part_grow_size
  local _disk_leave_free_percent
  local _resize_logs_lv_device _resize_pv_device
  local _resize_pv_part _resize_root_lv _resize_vg

  case $image_os_device_media in
    flash | sd | ssd )
      # Leave a percentage of disk unallocated for "overprovisioning"
      _disk_leave_free_percent=$image_resize_free_percent ;;
    * )
      _disk_leave_free_percent="0" ;;
  esac
  _part_grow_size="$((100-_disk_leave_free_percent))%"

  if [ -n "${image_encrypted+x}" ]; then
    # LUKS or LVM-on-LUKS
    _grow_part_num="$luks_part_num"
  elif [ -n "${image_lvm_rootfs+x}" ]; then
    # LVM
    _grow_part_num="$lvm_part_num"
  else
    # Neither LUKS nor LVM
    _grow_part_num="$root_part_num"
  fi

  case $image_os_device_type in
    nvme )
      _grow_device="/dev/nvme0n1"
      _grow_device_part="${_grow_device}p${_grow_part_num}"
      ;;
    sd )
      _grow_device="/dev/mmcblk0"
      _grow_device_part="${_grow_device}p${_grow_part_num}"
      ;;
    * )
      # SATA, SCSI, or USB
      _grow_device="/dev/sda"
      ;;
  esac
  _grow_device_part="${_grow_device_part:-${_grow_device}${_grow_part_num}}"

  cat <<'EOF' >> "$run_script"

write_log "Creating init.d script for resizing rootfs" 2
{
  cat <<-'_SCRIPT_' > /etc/init.d/resize-rootfs
	#!/sbin/openrc-run
	
	description="Resize rootfs"
	
	depend() {
	    after clock localmount
	    keyword -openvz -prefix -uml -vserver -xenu -lxc
	}
	
	run_and_log() {
	    local _command="\$1"
	    local _success_msg="\$2"
	    local _failure_msg="\$3"
	
	    local _output _rc _timestamp
	    local _logfile="/var/log/resize-storage.log"
	
	    _output=\$(\$_command 2>&1)
	    _rc=\$?
	    _timestamp=\$(printf "[%s]" "\$(date -u "+%Y-%m-%d %H:%M:%S")")
	
	    if [ \$_rc -eq 0 ]; then
	      echo "\$_timestamp: \$_success_msg" >> \$_logfile
	    else
	      echo "\$_timestamp: \$_failure_msg" >> \$_logfile
	    fi
	    if [ -n "\$_output" ]; then
	      echo "  \$_output" >> \$_logfile
	    fi
	}
	
	start() {
	    ebegin "Resizing rootfs"
	
EOF

  if [ -n "${image_encrypted+x}" ] || [ -n "${image_lvm_rootfs+x}" ] || \
     { [ "$image_os_device_media" = "flash" ] || \
       [ "$image_os_device_media" = "sd" ] || \
       [ "$image_os_device_media" = "ssd" ]; }; then
    # growpart does not handle these situations

    if [ -n "${image_encrypted+x}" ]; then
      # LUKS or LVM-on-LUKS

      _resize_luks_device="$CONSTANT_LUKS_DEVICE_NAME"

      cat <<EOF >> "$run_script"
	    # Grow the LUKS partition
	    run_and_log \\\\
	      "parted --machine --script --align=optimal $_grow_device resizepart $_grow_part_num $_part_grow_size" \\\\
	      "Grew $_grow_device_part partition to fill ${_part_grow_size} of the device" \\\\
	      "Unable to grow $_grow_device_part partition to fill ${_part_grow_size} of the device"
	
	    # Grow LUKS to fill the partition
	    run_and_log \\\\
	      "cryptsetup resize ${_resize_luks_device}" \\\\
	      "Grew /dev/mapper/$_resize_luks_device to fill the LUKS partition" \\\\
	      "Unable to grow /dev/mapper/$_resize_luks_device to fill the LUKS partition"
EOF

      if [ -n "${image_lvm_rootfs+x}" ]; then
        # LVM-on-LUKS
        _resize_pv_device="/dev/mapper/$CONSTANT_LUKS_DEVICE_NAME"
        _resize_logs_lv_device="/dev/mapper/$CONSTANT_LVM_VG_NAME-${CONSTANT_LVM_LOGS_LV_NAME}"

        _resize_vg="$CONSTANT_LVM_VG_NAME"
        _resize_root_fs_part="/dev/mapper/${CONSTANT_LVM_VG_NAME}-${CONSTANT_LVM_ROOT_LV_NAME}"

        cat <<EOF >> "$run_script"
		
	    # Grow the LVM PV to fill the LUKS partition
	    run_and_log \\\\
	      "pvresize ${_resize_pv_device}" \\\\
	      "Resized PV $_resize_pv_device to fill LUKS device" \\\\
	      "Unable to resize PV $_resize_pv_device to fill LUKS device"
	
	    # Don't resize the root LV at all
	
	    # Grow the logs LV by 16MiB
	    run_and_log \\\\
	      "lvextend -L +16m $_resize_logs_lv_device" \\\\
	      "Extended LV $_resize_logs_lv_device by 16MiB" \\\\
	      "Unable to extend LV $_resize_logs_lv_device by 16MiB"
EOF
      else
        # just LUKS
        _resize_root_fs_part="/dev/mapper/$CONSTANT_LUKS_DEVICE_NAME"
      fi
    elif [ -n "${image_lvm_rootfs+x}" ]; then
      # LVM

      case $image_os_device_type in
        nvme | sd )
          _resize_pv_part="${_grow_device}p${lvm_part_num}" ;;
        * )
          _resize_pv_part="${_grow_device}${lvm_part_num}" ;;
      esac
      _resize_logs_lv_device="/dev/mapper/$CONSTANT_LVM_VG_NAME-${CONSTANT_LVM_LOGS_LV_NAME}"

      cat <<EOF >> "$run_script"
	    # Grow the LVM partition
	    run_and_log \\\\
	      "parted --machine --script --align=optimal $_grow_device resizepart $_grow_part_num $_part_grow_size" \\\\
	      "Grew $_grow_device_part LVM partition to fill ${_part_grow_size} of the device" \\\\
	      "Unable to grow $_grow_device_part LVM partition to fill ${_part_grow_size} of the device"

	    # Grow the LVM PV to fill the partition
	    run_and_log \\\\
	      "pvresize ${_resize_pv_part}" \\\\
	      "Resized PV $_resize_pv_part to fill LVM partition" \\\\
	      "Unable to resize PV $_resize_pv_part to fill LVM partition"
	
	    # Don't resize the root LV at all
	
	    # Grow the logs LV by 16M
	    run_and_log \\\\
	      "lvextend -L +16m $_resize_logs_lv_device" \\\\
	      "Extended LV $_resize_logs_lv_device by 16MiB" \\\\
	      "Unable to extend LV $_resize_logs_lv_device by 16MiB"
EOF

      _resize_vg="$CONSTANT_LVM_VG_NAME"
      _resize_root_lv="$CONSTANT_LVM_ROOT_LV_NAME"
      _resize_root_fs_part="/dev/mapper/${_resize_vg}-${_resize_root_lv}"
    else
      # Neither LUKS nor LVM

      case $image_alpine_release in
        v3.13 | v3.14 | v3.15 )
          # growpart with no overprovisioning support
          cat <<EOF >> "$run_script"
	
	    # Grow the partition to fill most, but not all, of the disk
	    run_and_log \\\\
	      "parted --machine --script --align=optimal $_grow_device resizepart $_grow_part_num $_part_grow_size" \\\\
	      "Grew $_grow_device_part partition to fill ${_part_grow_size} of the device" \\\\
	      "Unable to grow $_grow_device_part partition to fill ${_part_grow_size} of the device"
EOF
          ;;
        * )
          # growpart version that does support overprovisioning
          cat <<EOF >> "$run_script"
	
	    # Grow the partition to fill most, but not all, of the disk
	    run_and_log \\\\
	      "growpart --free-percent=$_disk_leave_free_percent $_grow_device $_grow_part_num" \\\\
	      "Grew partition ${_grow_device}${_grow_part_num}, leaving ${_disk_leave_free_percent}% free of disk" \\\\
	      "Unable to grow partition ${_grow_device}${_grow_part_num}, leaving ${_disk_leave_free_percent}% free of disk"
EOF
          ;;
      esac

      case $image_os_device_type in
        nvme | sd )
          _resize_root_fs_part="${_grow_device}p${_grow_part_num}" ;;
        * )
          _resize_root_fs_part="${_grow_device}${_grow_part_num}" ;;
      esac
    fi
  else
    # Use growpart
    cat <<EOF >> "$run_script"
	    # Grow the partition
	    run_and_log \\\\
	      "growpart $_grow_device $_grow_part_num" \\\\
	      "Grew partition ${_grow_device}${_grow_part_num}" \\\\
	      "Unable to grow partition ${_grow_device}${_grow_part_num}"
EOF

    case $image_os_device_type in
      nvme | sd )
        _resize_root_fs_part="${_grow_device}p${_grow_part_num}" ;;
      * )
        _resize_root_fs_part="${_grow_device}${_grow_part_num}" ;;
    esac
  fi

  case $image_fs_type in
    btrfs )
      _resize_command="btrfs filesystem resize max" ;;
    ext4 )
      _resize_command="resize2fs" ;;
    f2fs )
      _resize_command="resize.f2fs" ;;
    xfs )
      _resize_command="xfs_growfs" ;;
  esac

  cat <<EOF >> "$run_script"
	
	    # Resize the underlying root filesystem
	    run_and_log \\\\
	      "$_resize_command $_resize_root_fs_part" \\\\
	      "Resized $image_fs_type root filesystem ${_resize_root_fs_part}" \\\\
	      "Unable to resize $image_fs_type root filesystem ${_resize_root_fs_part}"
EOF

  if [ -n "${image_lvm_rootfs+x}" ]; then
    cat <<EOF >> "$run_script"
	
	    # Resize the underlying logs filesystem
	    run_and_log \\\\
	      "$_resize_command /dev/mapper/${CONSTANT_LVM_VG_NAME}-${CONSTANT_LVM_LOGS_LV_NAME}" \\\\
	      "Resized $image_fs_type logs filesystem /dev/mapper/${CONSTANT_LVM_VG_NAME}-${CONSTANT_LVM_LOGS_LV_NAME}" \\\\
	      "Unable to resize $image_fs_type logs filesystem /dev/mapper/${CONSTANT_LVM_VG_NAME}-${CONSTANT_LVM_LOGS_LV_NAME}"
EOF
  fi

  cat <<'EOF' >> "$run_script"
	
	    eend 0
	}
	_SCRIPT_
	
  chmod a+x /etc/init.d/resize-rootfs
	
  {
EOF

  add_init_d_service "resize-rootfs" "default" 4

  cat <<-'EOF' >> "$run_script"
	  } >> /chroot.log 2>&1
	EOF

  if [ -n "${debug_enabled+x}" ]; then
    cat <<-'EOF' >> "$run_script"
	
	  # Debug
	  {
	    write_debug_log "resize-rootfs contents:" 4
	    cat /etc/init.d/resize-rootfs >> /chroot.log
	  }
	EOF
  fi

  cat <<-'EOF' >> "$run_script"
	}
	EOF
}
